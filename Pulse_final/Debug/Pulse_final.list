
Pulse_final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000016a0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08001828  08001828  00011828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001840  08001840  00011840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001844  08001844  00011844  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000014  20000000  08001848  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
  7 .bss          0000003c  20000014  20000014  00020014  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20000050  20000050  00020014  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 10 .debug_info   00005818  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000f25  00000000  00000000  0002585c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000808  00000000  00000000  00026788  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000778  00000000  00000000  00026f90  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00002836  00000000  00000000  00027708  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000027a4  00000000  00000000  00029f3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0002c6e2  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002280  00000000  00000000  0002c760  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  0002e9e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001810 	.word	0x08001810

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08001810 	.word	0x08001810

080001c8 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80001d0:	2300      	movs	r3, #0
 80001d2:	73fb      	strb	r3, [r7, #15]
 80001d4:	2300      	movs	r3, #0
 80001d6:	73bb      	strb	r3, [r7, #14]
 80001d8:	230f      	movs	r3, #15
 80001da:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	78db      	ldrb	r3, [r3, #3]
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d039      	beq.n	8000258 <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80001e4:	4b27      	ldr	r3, [pc, #156]	; (8000284 <NVIC_Init+0xbc>)
 80001e6:	68db      	ldr	r3, [r3, #12]
 80001e8:	43db      	mvns	r3, r3
 80001ea:	0a1b      	lsrs	r3, r3, #8
 80001ec:	b2db      	uxtb	r3, r3
 80001ee:	f003 0307 	and.w	r3, r3, #7
 80001f2:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 80001f4:	7bfb      	ldrb	r3, [r7, #15]
 80001f6:	f1c3 0304 	rsb	r3, r3, #4
 80001fa:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 80001fc:	7b7a      	ldrb	r2, [r7, #13]
 80001fe:	7bfb      	ldrb	r3, [r7, #15]
 8000200:	fa42 f303 	asr.w	r3, r2, r3
 8000204:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	785b      	ldrb	r3, [r3, #1]
 800020a:	461a      	mov	r2, r3
 800020c:	7bbb      	ldrb	r3, [r7, #14]
 800020e:	fa02 f303 	lsl.w	r3, r2, r3
 8000212:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	789a      	ldrb	r2, [r3, #2]
 8000218:	7b7b      	ldrb	r3, [r7, #13]
 800021a:	4013      	ands	r3, r2
 800021c:	b2da      	uxtb	r2, r3
 800021e:	7bfb      	ldrb	r3, [r7, #15]
 8000220:	4313      	orrs	r3, r2
 8000222:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8000224:	7bfb      	ldrb	r3, [r7, #15]
 8000226:	011b      	lsls	r3, r3, #4
 8000228:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800022a:	4a17      	ldr	r2, [pc, #92]	; (8000288 <NVIC_Init+0xc0>)
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	781b      	ldrb	r3, [r3, #0]
 8000230:	4413      	add	r3, r2
 8000232:	7bfa      	ldrb	r2, [r7, #15]
 8000234:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000238:	4a13      	ldr	r2, [pc, #76]	; (8000288 <NVIC_Init+0xc0>)
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	781b      	ldrb	r3, [r3, #0]
 800023e:	095b      	lsrs	r3, r3, #5
 8000240:	b2db      	uxtb	r3, r3
 8000242:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	781b      	ldrb	r3, [r3, #0]
 8000248:	f003 031f 	and.w	r3, r3, #31
 800024c:	2101      	movs	r1, #1
 800024e:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000252:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000256:	e00f      	b.n	8000278 <NVIC_Init+0xb0>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000258:	490b      	ldr	r1, [pc, #44]	; (8000288 <NVIC_Init+0xc0>)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	781b      	ldrb	r3, [r3, #0]
 800025e:	095b      	lsrs	r3, r3, #5
 8000260:	b2db      	uxtb	r3, r3
 8000262:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	f003 031f 	and.w	r3, r3, #31
 800026c:	2201      	movs	r2, #1
 800026e:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000270:	f100 0320 	add.w	r3, r0, #32
 8000274:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000278:	bf00      	nop
 800027a:	3714      	adds	r7, #20
 800027c:	46bd      	mov	sp, r7
 800027e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000282:	4770      	bx	lr
 8000284:	e000ed00 	.word	0xe000ed00
 8000288:	e000e100 	.word	0xe000e100

0800028c <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 800028c:	b480      	push	{r7}
 800028e:	b085      	sub	sp, #20
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8000294:	2300      	movs	r3, #0
 8000296:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 8000298:	4b34      	ldr	r3, [pc, #208]	; (800036c <EXTI_Init+0xe0>)
 800029a:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	799b      	ldrb	r3, [r3, #6]
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d04f      	beq.n	8000344 <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 80002a4:	4931      	ldr	r1, [pc, #196]	; (800036c <EXTI_Init+0xe0>)
 80002a6:	4b31      	ldr	r3, [pc, #196]	; (800036c <EXTI_Init+0xe0>)
 80002a8:	681a      	ldr	r2, [r3, #0]
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	43db      	mvns	r3, r3
 80002b0:	4013      	ands	r3, r2
 80002b2:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 80002b4:	492d      	ldr	r1, [pc, #180]	; (800036c <EXTI_Init+0xe0>)
 80002b6:	4b2d      	ldr	r3, [pc, #180]	; (800036c <EXTI_Init+0xe0>)
 80002b8:	685a      	ldr	r2, [r3, #4]
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	43db      	mvns	r3, r3
 80002c0:	4013      	ands	r3, r2
 80002c2:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	791b      	ldrb	r3, [r3, #4]
 80002c8:	461a      	mov	r2, r3
 80002ca:	68fb      	ldr	r3, [r7, #12]
 80002cc:	4413      	add	r3, r2
 80002ce:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	68fa      	ldr	r2, [r7, #12]
 80002d4:	6811      	ldr	r1, [r2, #0]
 80002d6:	687a      	ldr	r2, [r7, #4]
 80002d8:	6812      	ldr	r2, [r2, #0]
 80002da:	430a      	orrs	r2, r1
 80002dc:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 80002de:	4923      	ldr	r1, [pc, #140]	; (800036c <EXTI_Init+0xe0>)
 80002e0:	4b22      	ldr	r3, [pc, #136]	; (800036c <EXTI_Init+0xe0>)
 80002e2:	689a      	ldr	r2, [r3, #8]
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	43db      	mvns	r3, r3
 80002ea:	4013      	ands	r3, r2
 80002ec:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 80002ee:	491f      	ldr	r1, [pc, #124]	; (800036c <EXTI_Init+0xe0>)
 80002f0:	4b1e      	ldr	r3, [pc, #120]	; (800036c <EXTI_Init+0xe0>)
 80002f2:	68da      	ldr	r2, [r3, #12]
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	43db      	mvns	r3, r3
 80002fa:	4013      	ands	r3, r2
 80002fc:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	795b      	ldrb	r3, [r3, #5]
 8000302:	2b10      	cmp	r3, #16
 8000304:	d10e      	bne.n	8000324 <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8000306:	4919      	ldr	r1, [pc, #100]	; (800036c <EXTI_Init+0xe0>)
 8000308:	4b18      	ldr	r3, [pc, #96]	; (800036c <EXTI_Init+0xe0>)
 800030a:	689a      	ldr	r2, [r3, #8]
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	4313      	orrs	r3, r2
 8000312:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8000314:	4915      	ldr	r1, [pc, #84]	; (800036c <EXTI_Init+0xe0>)
 8000316:	4b15      	ldr	r3, [pc, #84]	; (800036c <EXTI_Init+0xe0>)
 8000318:	68da      	ldr	r2, [r3, #12]
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	4313      	orrs	r3, r2
 8000320:	60cb      	str	r3, [r1, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 8000322:	e01d      	b.n	8000360 <EXTI_Init+0xd4>
      tmp = (uint32_t)EXTI_BASE;
 8000324:	4b11      	ldr	r3, [pc, #68]	; (800036c <EXTI_Init+0xe0>)
 8000326:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	795b      	ldrb	r3, [r3, #5]
 800032c:	461a      	mov	r2, r3
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	4413      	add	r3, r2
 8000332:	60fb      	str	r3, [r7, #12]
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000334:	68fb      	ldr	r3, [r7, #12]
 8000336:	68fa      	ldr	r2, [r7, #12]
 8000338:	6811      	ldr	r1, [r2, #0]
 800033a:	687a      	ldr	r2, [r7, #4]
 800033c:	6812      	ldr	r2, [r2, #0]
 800033e:	430a      	orrs	r2, r1
 8000340:	601a      	str	r2, [r3, #0]
}
 8000342:	e00d      	b.n	8000360 <EXTI_Init+0xd4>
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	791b      	ldrb	r3, [r3, #4]
 8000348:	461a      	mov	r2, r3
 800034a:	68fb      	ldr	r3, [r7, #12]
 800034c:	4413      	add	r3, r2
 800034e:	60fb      	str	r3, [r7, #12]
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8000350:	68fb      	ldr	r3, [r7, #12]
 8000352:	68fa      	ldr	r2, [r7, #12]
 8000354:	6811      	ldr	r1, [r2, #0]
 8000356:	687a      	ldr	r2, [r7, #4]
 8000358:	6812      	ldr	r2, [r2, #0]
 800035a:	43d2      	mvns	r2, r2
 800035c:	400a      	ands	r2, r1
 800035e:	601a      	str	r2, [r3, #0]
}
 8000360:	bf00      	nop
 8000362:	3714      	adds	r7, #20
 8000364:	46bd      	mov	sp, r7
 8000366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036a:	4770      	bx	lr
 800036c:	40013c00 	.word	0x40013c00

08000370 <EXTI_GetITStatus>:
  * @param  EXTI_Line: specifies the EXTI line to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 8000370:	b480      	push	{r7}
 8000372:	b085      	sub	sp, #20
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 8000378:	2300      	movs	r3, #0
 800037a:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 800037c:	2300      	movs	r3, #0
 800037e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 8000380:	4b0c      	ldr	r3, [pc, #48]	; (80003b4 <EXTI_GetITStatus+0x44>)
 8000382:	681a      	ldr	r2, [r3, #0]
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	4013      	ands	r3, r2
 8000388:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 800038a:	4b0a      	ldr	r3, [pc, #40]	; (80003b4 <EXTI_GetITStatus+0x44>)
 800038c:	695a      	ldr	r2, [r3, #20]
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	4013      	ands	r3, r2
 8000392:	2b00      	cmp	r3, #0
 8000394:	d005      	beq.n	80003a2 <EXTI_GetITStatus+0x32>
 8000396:	68bb      	ldr	r3, [r7, #8]
 8000398:	2b00      	cmp	r3, #0
 800039a:	d002      	beq.n	80003a2 <EXTI_GetITStatus+0x32>
  {
    bitstatus = SET;
 800039c:	2301      	movs	r3, #1
 800039e:	73fb      	strb	r3, [r7, #15]
 80003a0:	e001      	b.n	80003a6 <EXTI_GetITStatus+0x36>
  }
  else
  {
    bitstatus = RESET;
 80003a2:	2300      	movs	r3, #0
 80003a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80003a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80003a8:	4618      	mov	r0, r3
 80003aa:	3714      	adds	r7, #20
 80003ac:	46bd      	mov	sp, r7
 80003ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b2:	4770      	bx	lr
 80003b4:	40013c00 	.word	0x40013c00

080003b8 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 80003b8:	b480      	push	{r7}
 80003ba:	b083      	sub	sp, #12
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 80003c0:	4a04      	ldr	r2, [pc, #16]	; (80003d4 <EXTI_ClearITPendingBit+0x1c>)
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	6153      	str	r3, [r2, #20]
}
 80003c6:	bf00      	nop
 80003c8:	370c      	adds	r7, #12
 80003ca:	46bd      	mov	sp, r7
 80003cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d0:	4770      	bx	lr
 80003d2:	bf00      	nop
 80003d4:	40013c00 	.word	0x40013c00

080003d8 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80003d8:	b480      	push	{r7}
 80003da:	b087      	sub	sp, #28
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
 80003e0:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80003e2:	2300      	movs	r3, #0
 80003e4:	617b      	str	r3, [r7, #20]
 80003e6:	2300      	movs	r3, #0
 80003e8:	613b      	str	r3, [r7, #16]
 80003ea:	2300      	movs	r3, #0
 80003ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80003ee:	2300      	movs	r3, #0
 80003f0:	617b      	str	r3, [r7, #20]
 80003f2:	e076      	b.n	80004e2 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80003f4:	2201      	movs	r2, #1
 80003f6:	697b      	ldr	r3, [r7, #20]
 80003f8:	fa02 f303 	lsl.w	r3, r2, r3
 80003fc:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80003fe:	683b      	ldr	r3, [r7, #0]
 8000400:	681a      	ldr	r2, [r3, #0]
 8000402:	693b      	ldr	r3, [r7, #16]
 8000404:	4013      	ands	r3, r2
 8000406:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000408:	68fa      	ldr	r2, [r7, #12]
 800040a:	693b      	ldr	r3, [r7, #16]
 800040c:	429a      	cmp	r2, r3
 800040e:	d165      	bne.n	80004dc <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	681a      	ldr	r2, [r3, #0]
 8000414:	697b      	ldr	r3, [r7, #20]
 8000416:	005b      	lsls	r3, r3, #1
 8000418:	2103      	movs	r1, #3
 800041a:	fa01 f303 	lsl.w	r3, r1, r3
 800041e:	43db      	mvns	r3, r3
 8000420:	401a      	ands	r2, r3
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	681a      	ldr	r2, [r3, #0]
 800042a:	683b      	ldr	r3, [r7, #0]
 800042c:	791b      	ldrb	r3, [r3, #4]
 800042e:	4619      	mov	r1, r3
 8000430:	697b      	ldr	r3, [r7, #20]
 8000432:	005b      	lsls	r3, r3, #1
 8000434:	fa01 f303 	lsl.w	r3, r1, r3
 8000438:	431a      	orrs	r2, r3
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800043e:	683b      	ldr	r3, [r7, #0]
 8000440:	791b      	ldrb	r3, [r3, #4]
 8000442:	2b01      	cmp	r3, #1
 8000444:	d003      	beq.n	800044e <GPIO_Init+0x76>
 8000446:	683b      	ldr	r3, [r7, #0]
 8000448:	791b      	ldrb	r3, [r3, #4]
 800044a:	2b02      	cmp	r3, #2
 800044c:	d12e      	bne.n	80004ac <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	689a      	ldr	r2, [r3, #8]
 8000452:	697b      	ldr	r3, [r7, #20]
 8000454:	005b      	lsls	r3, r3, #1
 8000456:	2103      	movs	r1, #3
 8000458:	fa01 f303 	lsl.w	r3, r1, r3
 800045c:	43db      	mvns	r3, r3
 800045e:	401a      	ands	r2, r3
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	689a      	ldr	r2, [r3, #8]
 8000468:	683b      	ldr	r3, [r7, #0]
 800046a:	795b      	ldrb	r3, [r3, #5]
 800046c:	4619      	mov	r1, r3
 800046e:	697b      	ldr	r3, [r7, #20]
 8000470:	005b      	lsls	r3, r3, #1
 8000472:	fa01 f303 	lsl.w	r3, r1, r3
 8000476:	431a      	orrs	r2, r3
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	685a      	ldr	r2, [r3, #4]
 8000480:	697b      	ldr	r3, [r7, #20]
 8000482:	b29b      	uxth	r3, r3
 8000484:	4619      	mov	r1, r3
 8000486:	2301      	movs	r3, #1
 8000488:	408b      	lsls	r3, r1
 800048a:	43db      	mvns	r3, r3
 800048c:	401a      	ands	r2, r3
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	685b      	ldr	r3, [r3, #4]
 8000496:	683a      	ldr	r2, [r7, #0]
 8000498:	7992      	ldrb	r2, [r2, #6]
 800049a:	4611      	mov	r1, r2
 800049c:	697a      	ldr	r2, [r7, #20]
 800049e:	b292      	uxth	r2, r2
 80004a0:	fa01 f202 	lsl.w	r2, r1, r2
 80004a4:	b292      	uxth	r2, r2
 80004a6:	431a      	orrs	r2, r3
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	68da      	ldr	r2, [r3, #12]
 80004b0:	697b      	ldr	r3, [r7, #20]
 80004b2:	b29b      	uxth	r3, r3
 80004b4:	005b      	lsls	r3, r3, #1
 80004b6:	2103      	movs	r1, #3
 80004b8:	fa01 f303 	lsl.w	r3, r1, r3
 80004bc:	43db      	mvns	r3, r3
 80004be:	401a      	ands	r2, r3
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	68da      	ldr	r2, [r3, #12]
 80004c8:	683b      	ldr	r3, [r7, #0]
 80004ca:	79db      	ldrb	r3, [r3, #7]
 80004cc:	4619      	mov	r1, r3
 80004ce:	697b      	ldr	r3, [r7, #20]
 80004d0:	005b      	lsls	r3, r3, #1
 80004d2:	fa01 f303 	lsl.w	r3, r1, r3
 80004d6:	431a      	orrs	r2, r3
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80004dc:	697b      	ldr	r3, [r7, #20]
 80004de:	3301      	adds	r3, #1
 80004e0:	617b      	str	r3, [r7, #20]
 80004e2:	697b      	ldr	r3, [r7, #20]
 80004e4:	2b0f      	cmp	r3, #15
 80004e6:	d985      	bls.n	80003f4 <GPIO_Init+0x1c>
    }
  }
}
 80004e8:	bf00      	nop
 80004ea:	371c      	adds	r7, #28
 80004ec:	46bd      	mov	sp, r7
 80004ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f2:	4770      	bx	lr

080004f4 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b085      	sub	sp, #20
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
 80004fc:	460b      	mov	r3, r1
 80004fe:	807b      	strh	r3, [r7, #2]
 8000500:	4613      	mov	r3, r2
 8000502:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8000504:	2300      	movs	r3, #0
 8000506:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8000508:	2300      	movs	r3, #0
 800050a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800050c:	787a      	ldrb	r2, [r7, #1]
 800050e:	887b      	ldrh	r3, [r7, #2]
 8000510:	f003 0307 	and.w	r3, r3, #7
 8000514:	009b      	lsls	r3, r3, #2
 8000516:	fa02 f303 	lsl.w	r3, r2, r3
 800051a:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800051c:	887b      	ldrh	r3, [r7, #2]
 800051e:	08db      	lsrs	r3, r3, #3
 8000520:	b29b      	uxth	r3, r3
 8000522:	4618      	mov	r0, r3
 8000524:	887b      	ldrh	r3, [r7, #2]
 8000526:	08db      	lsrs	r3, r3, #3
 8000528:	b29b      	uxth	r3, r3
 800052a:	461a      	mov	r2, r3
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	3208      	adds	r2, #8
 8000530:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000534:	887b      	ldrh	r3, [r7, #2]
 8000536:	f003 0307 	and.w	r3, r3, #7
 800053a:	009b      	lsls	r3, r3, #2
 800053c:	210f      	movs	r1, #15
 800053e:	fa01 f303 	lsl.w	r3, r1, r3
 8000542:	43db      	mvns	r3, r3
 8000544:	ea02 0103 	and.w	r1, r2, r3
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	f100 0208 	add.w	r2, r0, #8
 800054e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000552:	887b      	ldrh	r3, [r7, #2]
 8000554:	08db      	lsrs	r3, r3, #3
 8000556:	b29b      	uxth	r3, r3
 8000558:	461a      	mov	r2, r3
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	3208      	adds	r2, #8
 800055e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	4313      	orrs	r3, r2
 8000566:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000568:	887b      	ldrh	r3, [r7, #2]
 800056a:	08db      	lsrs	r3, r3, #3
 800056c:	b29b      	uxth	r3, r3
 800056e:	461a      	mov	r2, r3
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	3208      	adds	r2, #8
 8000574:	68b9      	ldr	r1, [r7, #8]
 8000576:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800057a:	bf00      	nop
 800057c:	3714      	adds	r7, #20
 800057e:	46bd      	mov	sp, r7
 8000580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000584:	4770      	bx	lr
	...

08000588 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000588:	b480      	push	{r7}
 800058a:	b089      	sub	sp, #36	; 0x24
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000590:	2300      	movs	r3, #0
 8000592:	61bb      	str	r3, [r7, #24]
 8000594:	2300      	movs	r3, #0
 8000596:	617b      	str	r3, [r7, #20]
 8000598:	2300      	movs	r3, #0
 800059a:	61fb      	str	r3, [r7, #28]
 800059c:	2302      	movs	r3, #2
 800059e:	613b      	str	r3, [r7, #16]
 80005a0:	2300      	movs	r3, #0
 80005a2:	60fb      	str	r3, [r7, #12]
 80005a4:	2302      	movs	r3, #2
 80005a6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80005a8:	4b47      	ldr	r3, [pc, #284]	; (80006c8 <RCC_GetClocksFreq+0x140>)
 80005aa:	689b      	ldr	r3, [r3, #8]
 80005ac:	f003 030c 	and.w	r3, r3, #12
 80005b0:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 80005b2:	69bb      	ldr	r3, [r7, #24]
 80005b4:	2b04      	cmp	r3, #4
 80005b6:	d007      	beq.n	80005c8 <RCC_GetClocksFreq+0x40>
 80005b8:	2b08      	cmp	r3, #8
 80005ba:	d009      	beq.n	80005d0 <RCC_GetClocksFreq+0x48>
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d13d      	bne.n	800063c <RCC_GetClocksFreq+0xb4>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	4a42      	ldr	r2, [pc, #264]	; (80006cc <RCC_GetClocksFreq+0x144>)
 80005c4:	601a      	str	r2, [r3, #0]
      break;
 80005c6:	e03d      	b.n	8000644 <RCC_GetClocksFreq+0xbc>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	4a41      	ldr	r2, [pc, #260]	; (80006d0 <RCC_GetClocksFreq+0x148>)
 80005cc:	601a      	str	r2, [r3, #0]
      break;
 80005ce:	e039      	b.n	8000644 <RCC_GetClocksFreq+0xbc>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80005d0:	4b3d      	ldr	r3, [pc, #244]	; (80006c8 <RCC_GetClocksFreq+0x140>)
 80005d2:	685b      	ldr	r3, [r3, #4]
 80005d4:	0d9b      	lsrs	r3, r3, #22
 80005d6:	f003 0301 	and.w	r3, r3, #1
 80005da:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80005dc:	4b3a      	ldr	r3, [pc, #232]	; (80006c8 <RCC_GetClocksFreq+0x140>)
 80005de:	685b      	ldr	r3, [r3, #4]
 80005e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80005e4:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d00c      	beq.n	8000606 <RCC_GetClocksFreq+0x7e>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80005ec:	4a38      	ldr	r2, [pc, #224]	; (80006d0 <RCC_GetClocksFreq+0x148>)
 80005ee:	68bb      	ldr	r3, [r7, #8]
 80005f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80005f4:	4a34      	ldr	r2, [pc, #208]	; (80006c8 <RCC_GetClocksFreq+0x140>)
 80005f6:	6852      	ldr	r2, [r2, #4]
 80005f8:	0992      	lsrs	r2, r2, #6
 80005fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80005fe:	fb02 f303 	mul.w	r3, r2, r3
 8000602:	61fb      	str	r3, [r7, #28]
 8000604:	e00b      	b.n	800061e <RCC_GetClocksFreq+0x96>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000606:	4a31      	ldr	r2, [pc, #196]	; (80006cc <RCC_GetClocksFreq+0x144>)
 8000608:	68bb      	ldr	r3, [r7, #8]
 800060a:	fbb2 f3f3 	udiv	r3, r2, r3
 800060e:	4a2e      	ldr	r2, [pc, #184]	; (80006c8 <RCC_GetClocksFreq+0x140>)
 8000610:	6852      	ldr	r2, [r2, #4]
 8000612:	0992      	lsrs	r2, r2, #6
 8000614:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000618:	fb02 f303 	mul.w	r3, r2, r3
 800061c:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800061e:	4b2a      	ldr	r3, [pc, #168]	; (80006c8 <RCC_GetClocksFreq+0x140>)
 8000620:	685b      	ldr	r3, [r3, #4]
 8000622:	0c1b      	lsrs	r3, r3, #16
 8000624:	f003 0303 	and.w	r3, r3, #3
 8000628:	3301      	adds	r3, #1
 800062a:	005b      	lsls	r3, r3, #1
 800062c:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 800062e:	69fa      	ldr	r2, [r7, #28]
 8000630:	693b      	ldr	r3, [r7, #16]
 8000632:	fbb2 f2f3 	udiv	r2, r2, r3
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	601a      	str	r2, [r3, #0]
      break;
 800063a:	e003      	b.n	8000644 <RCC_GetClocksFreq+0xbc>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	4a23      	ldr	r2, [pc, #140]	; (80006cc <RCC_GetClocksFreq+0x144>)
 8000640:	601a      	str	r2, [r3, #0]
      break;
 8000642:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000644:	4b20      	ldr	r3, [pc, #128]	; (80006c8 <RCC_GetClocksFreq+0x140>)
 8000646:	689b      	ldr	r3, [r3, #8]
 8000648:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800064c:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 800064e:	69bb      	ldr	r3, [r7, #24]
 8000650:	091b      	lsrs	r3, r3, #4
 8000652:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000654:	4a1f      	ldr	r2, [pc, #124]	; (80006d4 <RCC_GetClocksFreq+0x14c>)
 8000656:	69bb      	ldr	r3, [r7, #24]
 8000658:	4413      	add	r3, r2
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	b2db      	uxtb	r3, r3
 800065e:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681a      	ldr	r2, [r3, #0]
 8000664:	697b      	ldr	r3, [r7, #20]
 8000666:	40da      	lsrs	r2, r3
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 800066c:	4b16      	ldr	r3, [pc, #88]	; (80006c8 <RCC_GetClocksFreq+0x140>)
 800066e:	689b      	ldr	r3, [r3, #8]
 8000670:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000674:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8000676:	69bb      	ldr	r3, [r7, #24]
 8000678:	0a9b      	lsrs	r3, r3, #10
 800067a:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 800067c:	4a15      	ldr	r2, [pc, #84]	; (80006d4 <RCC_GetClocksFreq+0x14c>)
 800067e:	69bb      	ldr	r3, [r7, #24]
 8000680:	4413      	add	r3, r2
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	b2db      	uxtb	r3, r3
 8000686:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	685a      	ldr	r2, [r3, #4]
 800068c:	697b      	ldr	r3, [r7, #20]
 800068e:	40da      	lsrs	r2, r3
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000694:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <RCC_GetClocksFreq+0x140>)
 8000696:	689b      	ldr	r3, [r3, #8]
 8000698:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800069c:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 800069e:	69bb      	ldr	r3, [r7, #24]
 80006a0:	0b5b      	lsrs	r3, r3, #13
 80006a2:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80006a4:	4a0b      	ldr	r2, [pc, #44]	; (80006d4 <RCC_GetClocksFreq+0x14c>)
 80006a6:	69bb      	ldr	r3, [r7, #24]
 80006a8:	4413      	add	r3, r2
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	685a      	ldr	r2, [r3, #4]
 80006b4:	697b      	ldr	r3, [r7, #20]
 80006b6:	40da      	lsrs	r2, r3
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	60da      	str	r2, [r3, #12]
}
 80006bc:	bf00      	nop
 80006be:	3724      	adds	r7, #36	; 0x24
 80006c0:	46bd      	mov	sp, r7
 80006c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c6:	4770      	bx	lr
 80006c8:	40023800 	.word	0x40023800
 80006cc:	00f42400 	.word	0x00f42400
 80006d0:	017d7840 	.word	0x017d7840
 80006d4:	20000000 	.word	0x20000000

080006d8 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
 80006e0:	460b      	mov	r3, r1
 80006e2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80006e4:	78fb      	ldrb	r3, [r7, #3]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d006      	beq.n	80006f8 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80006ea:	490a      	ldr	r1, [pc, #40]	; (8000714 <RCC_AHB1PeriphClockCmd+0x3c>)
 80006ec:	4b09      	ldr	r3, [pc, #36]	; (8000714 <RCC_AHB1PeriphClockCmd+0x3c>)
 80006ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	4313      	orrs	r3, r2
 80006f4:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 80006f6:	e006      	b.n	8000706 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80006f8:	4906      	ldr	r1, [pc, #24]	; (8000714 <RCC_AHB1PeriphClockCmd+0x3c>)
 80006fa:	4b06      	ldr	r3, [pc, #24]	; (8000714 <RCC_AHB1PeriphClockCmd+0x3c>)
 80006fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	43db      	mvns	r3, r3
 8000702:	4013      	ands	r3, r2
 8000704:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000706:	bf00      	nop
 8000708:	370c      	adds	r7, #12
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	40023800 	.word	0x40023800

08000718 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
 8000720:	460b      	mov	r3, r1
 8000722:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000724:	78fb      	ldrb	r3, [r7, #3]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d006      	beq.n	8000738 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800072a:	490a      	ldr	r1, [pc, #40]	; (8000754 <RCC_APB1PeriphClockCmd+0x3c>)
 800072c:	4b09      	ldr	r3, [pc, #36]	; (8000754 <RCC_APB1PeriphClockCmd+0x3c>)
 800072e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	4313      	orrs	r3, r2
 8000734:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8000736:	e006      	b.n	8000746 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000738:	4906      	ldr	r1, [pc, #24]	; (8000754 <RCC_APB1PeriphClockCmd+0x3c>)
 800073a:	4b06      	ldr	r3, [pc, #24]	; (8000754 <RCC_APB1PeriphClockCmd+0x3c>)
 800073c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	43db      	mvns	r3, r3
 8000742:	4013      	ands	r3, r2
 8000744:	640b      	str	r3, [r1, #64]	; 0x40
}
 8000746:	bf00      	nop
 8000748:	370c      	adds	r7, #12
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	40023800 	.word	0x40023800

08000758 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
 8000760:	460b      	mov	r3, r1
 8000762:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000764:	78fb      	ldrb	r3, [r7, #3]
 8000766:	2b00      	cmp	r3, #0
 8000768:	d006      	beq.n	8000778 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800076a:	490a      	ldr	r1, [pc, #40]	; (8000794 <RCC_APB2PeriphClockCmd+0x3c>)
 800076c:	4b09      	ldr	r3, [pc, #36]	; (8000794 <RCC_APB2PeriphClockCmd+0x3c>)
 800076e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	4313      	orrs	r3, r2
 8000774:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000776:	e006      	b.n	8000786 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000778:	4906      	ldr	r1, [pc, #24]	; (8000794 <RCC_APB2PeriphClockCmd+0x3c>)
 800077a:	4b06      	ldr	r3, [pc, #24]	; (8000794 <RCC_APB2PeriphClockCmd+0x3c>)
 800077c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	43db      	mvns	r3, r3
 8000782:	4013      	ands	r3, r2
 8000784:	644b      	str	r3, [r1, #68]	; 0x44
}
 8000786:	bf00      	nop
 8000788:	370c      	adds	r7, #12
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	40023800 	.word	0x40023800

08000798 <SYSCFG_EXTILineConfig>:
  *           and STM32F427x/STM32F437x devices. 
  *             
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 8000798:	b490      	push	{r4, r7}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0
 800079e:	4603      	mov	r3, r0
 80007a0:	460a      	mov	r2, r1
 80007a2:	71fb      	strb	r3, [r7, #7]
 80007a4:	4613      	mov	r3, r2
 80007a6:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 80007a8:	2300      	movs	r3, #0
 80007aa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 80007ac:	79bb      	ldrb	r3, [r7, #6]
 80007ae:	f003 0303 	and.w	r3, r3, #3
 80007b2:	009b      	lsls	r3, r3, #2
 80007b4:	220f      	movs	r2, #15
 80007b6:	fa02 f303 	lsl.w	r3, r2, r3
 80007ba:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 80007bc:	4916      	ldr	r1, [pc, #88]	; (8000818 <SYSCFG_EXTILineConfig+0x80>)
 80007be:	79bb      	ldrb	r3, [r7, #6]
 80007c0:	089b      	lsrs	r3, r3, #2
 80007c2:	b2db      	uxtb	r3, r3
 80007c4:	4618      	mov	r0, r3
 80007c6:	4a14      	ldr	r2, [pc, #80]	; (8000818 <SYSCFG_EXTILineConfig+0x80>)
 80007c8:	79bb      	ldrb	r3, [r7, #6]
 80007ca:	089b      	lsrs	r3, r3, #2
 80007cc:	b2db      	uxtb	r3, r3
 80007ce:	3302      	adds	r3, #2
 80007d0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	43db      	mvns	r3, r3
 80007d8:	401a      	ands	r2, r3
 80007da:	1c83      	adds	r3, r0, #2
 80007dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 80007e0:	480d      	ldr	r0, [pc, #52]	; (8000818 <SYSCFG_EXTILineConfig+0x80>)
 80007e2:	79bb      	ldrb	r3, [r7, #6]
 80007e4:	089b      	lsrs	r3, r3, #2
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	461c      	mov	r4, r3
 80007ea:	4a0b      	ldr	r2, [pc, #44]	; (8000818 <SYSCFG_EXTILineConfig+0x80>)
 80007ec:	79bb      	ldrb	r3, [r7, #6]
 80007ee:	089b      	lsrs	r3, r3, #2
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	3302      	adds	r3, #2
 80007f4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007f8:	79f9      	ldrb	r1, [r7, #7]
 80007fa:	79bb      	ldrb	r3, [r7, #6]
 80007fc:	f003 0303 	and.w	r3, r3, #3
 8000800:	009b      	lsls	r3, r3, #2
 8000802:	fa01 f303 	lsl.w	r3, r1, r3
 8000806:	431a      	orrs	r2, r3
 8000808:	1ca3      	adds	r3, r4, #2
 800080a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 800080e:	bf00      	nop
 8000810:	3710      	adds	r7, #16
 8000812:	46bd      	mov	sp, r7
 8000814:	bc90      	pop	{r4, r7}
 8000816:	4770      	bx	lr
 8000818:	40013800 	.word	0x40013800

0800081c <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 800081c:	b480      	push	{r7}
 800081e:	b085      	sub	sp, #20
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
 8000824:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8000826:	2300      	movs	r3, #0
 8000828:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	881b      	ldrh	r3, [r3, #0]
 800082e:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	4a29      	ldr	r2, [pc, #164]	; (80008d8 <TIM_TimeBaseInit+0xbc>)
 8000834:	4293      	cmp	r3, r2
 8000836:	d013      	beq.n	8000860 <TIM_TimeBaseInit+0x44>
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	4a28      	ldr	r2, [pc, #160]	; (80008dc <TIM_TimeBaseInit+0xc0>)
 800083c:	4293      	cmp	r3, r2
 800083e:	d00f      	beq.n	8000860 <TIM_TimeBaseInit+0x44>
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000846:	d00b      	beq.n	8000860 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	4a25      	ldr	r2, [pc, #148]	; (80008e0 <TIM_TimeBaseInit+0xc4>)
 800084c:	4293      	cmp	r3, r2
 800084e:	d007      	beq.n	8000860 <TIM_TimeBaseInit+0x44>
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	4a24      	ldr	r2, [pc, #144]	; (80008e4 <TIM_TimeBaseInit+0xc8>)
 8000854:	4293      	cmp	r3, r2
 8000856:	d003      	beq.n	8000860 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	4a23      	ldr	r2, [pc, #140]	; (80008e8 <TIM_TimeBaseInit+0xcc>)
 800085c:	4293      	cmp	r3, r2
 800085e:	d108      	bne.n	8000872 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8000860:	89fb      	ldrh	r3, [r7, #14]
 8000862:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000866:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	885a      	ldrh	r2, [r3, #2]
 800086c:	89fb      	ldrh	r3, [r7, #14]
 800086e:	4313      	orrs	r3, r2
 8000870:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	4a1d      	ldr	r2, [pc, #116]	; (80008ec <TIM_TimeBaseInit+0xd0>)
 8000876:	4293      	cmp	r3, r2
 8000878:	d00c      	beq.n	8000894 <TIM_TimeBaseInit+0x78>
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	4a1c      	ldr	r2, [pc, #112]	; (80008f0 <TIM_TimeBaseInit+0xd4>)
 800087e:	4293      	cmp	r3, r2
 8000880:	d008      	beq.n	8000894 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8000882:	89fb      	ldrh	r3, [r7, #14]
 8000884:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000888:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	891a      	ldrh	r2, [r3, #8]
 800088e:	89fb      	ldrh	r3, [r7, #14]
 8000890:	4313      	orrs	r3, r2
 8000892:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	89fa      	ldrh	r2, [r7, #14]
 8000898:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	685a      	ldr	r2, [r3, #4]
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	881a      	ldrh	r2, [r3, #0]
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	4a0a      	ldr	r2, [pc, #40]	; (80008d8 <TIM_TimeBaseInit+0xbc>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d003      	beq.n	80008ba <TIM_TimeBaseInit+0x9e>
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	4a09      	ldr	r2, [pc, #36]	; (80008dc <TIM_TimeBaseInit+0xc0>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d104      	bne.n	80008c4 <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	7a9b      	ldrb	r3, [r3, #10]
 80008be:	b29a      	uxth	r2, r3
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	2201      	movs	r2, #1
 80008c8:	829a      	strh	r2, [r3, #20]
}
 80008ca:	bf00      	nop
 80008cc:	3714      	adds	r7, #20
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	40010000 	.word	0x40010000
 80008dc:	40010400 	.word	0x40010400
 80008e0:	40000400 	.word	0x40000400
 80008e4:	40000800 	.word	0x40000800
 80008e8:	40000c00 	.word	0x40000c00
 80008ec:	40001000 	.word	0x40001000
 80008f0:	40001400 	.word	0x40001400

080008f4 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
 80008fc:	460b      	mov	r3, r1
 80008fe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000900:	78fb      	ldrb	r3, [r7, #3]
 8000902:	2b00      	cmp	r3, #0
 8000904:	d008      	beq.n	8000918 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	881b      	ldrh	r3, [r3, #0]
 800090a:	b29b      	uxth	r3, r3
 800090c:	f043 0301 	orr.w	r3, r3, #1
 8000910:	b29a      	uxth	r2, r3
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 8000916:	e007      	b.n	8000928 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	881b      	ldrh	r3, [r3, #0]
 800091c:	b29b      	uxth	r3, r3
 800091e:	f023 0301 	bic.w	r3, r3, #1
 8000922:	b29a      	uxth	r2, r3
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	801a      	strh	r2, [r3, #0]
}
 8000928:	bf00      	nop
 800092a:	370c      	adds	r7, #12
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr

08000934 <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8000934:	b480      	push	{r7}
 8000936:	b085      	sub	sp, #20
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
 800093c:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800093e:	2300      	movs	r3, #0
 8000940:	817b      	strh	r3, [r7, #10]
 8000942:	2300      	movs	r3, #0
 8000944:	81fb      	strh	r3, [r7, #14]
 8000946:	2300      	movs	r3, #0
 8000948:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	8c1b      	ldrh	r3, [r3, #32]
 800094e:	b29b      	uxth	r3, r3
 8000950:	f023 0301 	bic.w	r3, r3, #1
 8000954:	b29a      	uxth	r2, r3
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	8c1b      	ldrh	r3, [r3, #32]
 800095e:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	889b      	ldrh	r3, [r3, #4]
 8000964:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	8b1b      	ldrh	r3, [r3, #24]
 800096a:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
 800096c:	897b      	ldrh	r3, [r7, #10]
 800096e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000972:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 8000974:	897b      	ldrh	r3, [r7, #10]
 8000976:	f023 0303 	bic.w	r3, r3, #3
 800097a:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	881a      	ldrh	r2, [r3, #0]
 8000980:	897b      	ldrh	r3, [r7, #10]
 8000982:	4313      	orrs	r3, r2
 8000984:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 8000986:	89fb      	ldrh	r3, [r7, #14]
 8000988:	f023 0302 	bic.w	r3, r3, #2
 800098c:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	899a      	ldrh	r2, [r3, #12]
 8000992:	89fb      	ldrh	r3, [r7, #14]
 8000994:	4313      	orrs	r3, r2
 8000996:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	885a      	ldrh	r2, [r3, #2]
 800099c:	89fb      	ldrh	r3, [r7, #14]
 800099e:	4313      	orrs	r3, r2
 80009a0:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	4a1e      	ldr	r2, [pc, #120]	; (8000a20 <TIM_OC1Init+0xec>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d003      	beq.n	80009b2 <TIM_OC1Init+0x7e>
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	4a1d      	ldr	r2, [pc, #116]	; (8000a24 <TIM_OC1Init+0xf0>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d123      	bne.n	80009fa <TIM_OC1Init+0xc6>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 80009b2:	89fb      	ldrh	r3, [r7, #14]
 80009b4:	f023 0308 	bic.w	r3, r3, #8
 80009b8:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	89da      	ldrh	r2, [r3, #14]
 80009be:	89fb      	ldrh	r3, [r7, #14]
 80009c0:	4313      	orrs	r3, r2
 80009c2:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
 80009c4:	89fb      	ldrh	r3, [r7, #14]
 80009c6:	f023 0304 	bic.w	r3, r3, #4
 80009ca:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	889a      	ldrh	r2, [r3, #4]
 80009d0:	89fb      	ldrh	r3, [r7, #14]
 80009d2:	4313      	orrs	r3, r2
 80009d4:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
 80009d6:	89bb      	ldrh	r3, [r7, #12]
 80009d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80009dc:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
 80009de:	89bb      	ldrh	r3, [r7, #12]
 80009e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80009e4:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	8a1a      	ldrh	r2, [r3, #16]
 80009ea:	89bb      	ldrh	r3, [r7, #12]
 80009ec:	4313      	orrs	r3, r2
 80009ee:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	8a5a      	ldrh	r2, [r3, #18]
 80009f4:	89bb      	ldrh	r3, [r7, #12]
 80009f6:	4313      	orrs	r3, r2
 80009f8:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	89ba      	ldrh	r2, [r7, #12]
 80009fe:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	897a      	ldrh	r2, [r7, #10]
 8000a04:	831a      	strh	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	689a      	ldr	r2, [r3, #8]
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	89fa      	ldrh	r2, [r7, #14]
 8000a12:	841a      	strh	r2, [r3, #32]
}
 8000a14:	bf00      	nop
 8000a16:	3714      	adds	r7, #20
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr
 8000a20:	40010000 	.word	0x40010000
 8000a24:	40010400 	.word	0x40010400

08000a28 <TIM_OC2Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b085      	sub	sp, #20
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
 8000a30:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8000a32:	2300      	movs	r3, #0
 8000a34:	817b      	strh	r3, [r7, #10]
 8000a36:	2300      	movs	r3, #0
 8000a38:	81fb      	strh	r3, [r7, #14]
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	8c1b      	ldrh	r3, [r3, #32]
 8000a42:	b29b      	uxth	r3, r3
 8000a44:	f023 0310 	bic.w	r3, r3, #16
 8000a48:	b29a      	uxth	r2, r3
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	8c1b      	ldrh	r3, [r3, #32]
 8000a52:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	889b      	ldrh	r3, [r3, #4]
 8000a58:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	8b1b      	ldrh	r3, [r3, #24]
 8000a5e:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
 8000a60:	897b      	ldrh	r3, [r7, #10]
 8000a62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000a66:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
 8000a68:	897b      	ldrh	r3, [r7, #10]
 8000a6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000a6e:	817b      	strh	r3, [r7, #10]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	881b      	ldrh	r3, [r3, #0]
 8000a74:	021b      	lsls	r3, r3, #8
 8000a76:	b29a      	uxth	r2, r3
 8000a78:	897b      	ldrh	r3, [r7, #10]
 8000a7a:	4313      	orrs	r3, r2
 8000a7c:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 8000a7e:	89fb      	ldrh	r3, [r7, #14]
 8000a80:	f023 0320 	bic.w	r3, r3, #32
 8000a84:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	899b      	ldrh	r3, [r3, #12]
 8000a8a:	011b      	lsls	r3, r3, #4
 8000a8c:	b29a      	uxth	r2, r3
 8000a8e:	89fb      	ldrh	r3, [r7, #14]
 8000a90:	4313      	orrs	r3, r2
 8000a92:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	885b      	ldrh	r3, [r3, #2]
 8000a98:	011b      	lsls	r3, r3, #4
 8000a9a:	b29a      	uxth	r2, r3
 8000a9c:	89fb      	ldrh	r3, [r7, #14]
 8000a9e:	4313      	orrs	r3, r2
 8000aa0:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	4a22      	ldr	r2, [pc, #136]	; (8000b30 <TIM_OC2Init+0x108>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d003      	beq.n	8000ab2 <TIM_OC2Init+0x8a>
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	4a21      	ldr	r2, [pc, #132]	; (8000b34 <TIM_OC2Init+0x10c>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d12b      	bne.n	8000b0a <TIM_OC2Init+0xe2>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 8000ab2:	89fb      	ldrh	r3, [r7, #14]
 8000ab4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000ab8:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	89db      	ldrh	r3, [r3, #14]
 8000abe:	011b      	lsls	r3, r3, #4
 8000ac0:	b29a      	uxth	r2, r3
 8000ac2:	89fb      	ldrh	r3, [r7, #14]
 8000ac4:	4313      	orrs	r3, r2
 8000ac6:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
 8000ac8:	89fb      	ldrh	r3, [r7, #14]
 8000aca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000ace:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	889b      	ldrh	r3, [r3, #4]
 8000ad4:	011b      	lsls	r3, r3, #4
 8000ad6:	b29a      	uxth	r2, r3
 8000ad8:	89fb      	ldrh	r3, [r7, #14]
 8000ada:	4313      	orrs	r3, r2
 8000adc:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
 8000ade:	89bb      	ldrh	r3, [r7, #12]
 8000ae0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000ae4:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
 8000ae6:	89bb      	ldrh	r3, [r7, #12]
 8000ae8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000aec:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	8a1b      	ldrh	r3, [r3, #16]
 8000af2:	009b      	lsls	r3, r3, #2
 8000af4:	b29a      	uxth	r2, r3
 8000af6:	89bb      	ldrh	r3, [r7, #12]
 8000af8:	4313      	orrs	r3, r2
 8000afa:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	8a5b      	ldrh	r3, [r3, #18]
 8000b00:	009b      	lsls	r3, r3, #2
 8000b02:	b29a      	uxth	r2, r3
 8000b04:	89bb      	ldrh	r3, [r7, #12]
 8000b06:	4313      	orrs	r3, r2
 8000b08:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	89ba      	ldrh	r2, [r7, #12]
 8000b0e:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	897a      	ldrh	r2, [r7, #10]
 8000b14:	831a      	strh	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	689a      	ldr	r2, [r3, #8]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	89fa      	ldrh	r2, [r7, #14]
 8000b22:	841a      	strh	r2, [r3, #32]
}
 8000b24:	bf00      	nop
 8000b26:	3714      	adds	r7, #20
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr
 8000b30:	40010000 	.word	0x40010000
 8000b34:	40010400 	.word	0x40010400

08000b38 <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b085      	sub	sp, #20
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
 8000b40:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8000b42:	2300      	movs	r3, #0
 8000b44:	817b      	strh	r3, [r7, #10]
 8000b46:	2300      	movs	r3, #0
 8000b48:	81fb      	strh	r3, [r7, #14]
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	8c1b      	ldrh	r3, [r3, #32]
 8000b52:	b29b      	uxth	r3, r3
 8000b54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000b58:	b29a      	uxth	r2, r3
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	8c1b      	ldrh	r3, [r3, #32]
 8000b62:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	889b      	ldrh	r3, [r3, #4]
 8000b68:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	8b9b      	ldrh	r3, [r3, #28]
 8000b6e:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
 8000b70:	897b      	ldrh	r3, [r7, #10]
 8000b72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000b76:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 8000b78:	897b      	ldrh	r3, [r7, #10]
 8000b7a:	f023 0303 	bic.w	r3, r3, #3
 8000b7e:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	881a      	ldrh	r2, [r3, #0]
 8000b84:	897b      	ldrh	r3, [r7, #10]
 8000b86:	4313      	orrs	r3, r2
 8000b88:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 8000b8a:	89fb      	ldrh	r3, [r7, #14]
 8000b8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000b90:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	899b      	ldrh	r3, [r3, #12]
 8000b96:	021b      	lsls	r3, r3, #8
 8000b98:	b29a      	uxth	r2, r3
 8000b9a:	89fb      	ldrh	r3, [r7, #14]
 8000b9c:	4313      	orrs	r3, r2
 8000b9e:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	885b      	ldrh	r3, [r3, #2]
 8000ba4:	021b      	lsls	r3, r3, #8
 8000ba6:	b29a      	uxth	r2, r3
 8000ba8:	89fb      	ldrh	r3, [r7, #14]
 8000baa:	4313      	orrs	r3, r2
 8000bac:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	4a22      	ldr	r2, [pc, #136]	; (8000c3c <TIM_OC3Init+0x104>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d003      	beq.n	8000bbe <TIM_OC3Init+0x86>
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	4a21      	ldr	r2, [pc, #132]	; (8000c40 <TIM_OC3Init+0x108>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d12b      	bne.n	8000c16 <TIM_OC3Init+0xde>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 8000bbe:	89fb      	ldrh	r3, [r7, #14]
 8000bc0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000bc4:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	89db      	ldrh	r3, [r3, #14]
 8000bca:	021b      	lsls	r3, r3, #8
 8000bcc:	b29a      	uxth	r2, r3
 8000bce:	89fb      	ldrh	r3, [r7, #14]
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 8000bd4:	89fb      	ldrh	r3, [r7, #14]
 8000bd6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000bda:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	889b      	ldrh	r3, [r3, #4]
 8000be0:	021b      	lsls	r3, r3, #8
 8000be2:	b29a      	uxth	r2, r3
 8000be4:	89fb      	ldrh	r3, [r7, #14]
 8000be6:	4313      	orrs	r3, r2
 8000be8:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
 8000bea:	89bb      	ldrh	r3, [r7, #12]
 8000bec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000bf0:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 8000bf2:	89bb      	ldrh	r3, [r7, #12]
 8000bf4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000bf8:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	8a1b      	ldrh	r3, [r3, #16]
 8000bfe:	011b      	lsls	r3, r3, #4
 8000c00:	b29a      	uxth	r2, r3
 8000c02:	89bb      	ldrh	r3, [r7, #12]
 8000c04:	4313      	orrs	r3, r2
 8000c06:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	8a5b      	ldrh	r3, [r3, #18]
 8000c0c:	011b      	lsls	r3, r3, #4
 8000c0e:	b29a      	uxth	r2, r3
 8000c10:	89bb      	ldrh	r3, [r7, #12]
 8000c12:	4313      	orrs	r3, r2
 8000c14:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	89ba      	ldrh	r2, [r7, #12]
 8000c1a:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	897a      	ldrh	r2, [r7, #10]
 8000c20:	839a      	strh	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	689a      	ldr	r2, [r3, #8]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	89fa      	ldrh	r2, [r7, #14]
 8000c2e:	841a      	strh	r2, [r3, #32]
}
 8000c30:	bf00      	nop
 8000c32:	3714      	adds	r7, #20
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr
 8000c3c:	40010000 	.word	0x40010000
 8000c40:	40010400 	.word	0x40010400

08000c44 <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b085      	sub	sp, #20
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
 8000c4c:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	81bb      	strh	r3, [r7, #12]
 8000c52:	2300      	movs	r3, #0
 8000c54:	817b      	strh	r3, [r7, #10]
 8000c56:	2300      	movs	r3, #0
 8000c58:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	8c1b      	ldrh	r3, [r3, #32]
 8000c5e:	b29b      	uxth	r3, r3
 8000c60:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000c64:	b29a      	uxth	r2, r3
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	8c1b      	ldrh	r3, [r3, #32]
 8000c6e:	817b      	strh	r3, [r7, #10]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	889b      	ldrh	r3, [r3, #4]
 8000c74:	81fb      	strh	r3, [r7, #14]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	8b9b      	ldrh	r3, [r3, #28]
 8000c7a:	81bb      	strh	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
 8000c7c:	89bb      	ldrh	r3, [r7, #12]
 8000c7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000c82:	81bb      	strh	r3, [r7, #12]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 8000c84:	89bb      	ldrh	r3, [r7, #12]
 8000c86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000c8a:	81bb      	strh	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	881b      	ldrh	r3, [r3, #0]
 8000c90:	021b      	lsls	r3, r3, #8
 8000c92:	b29a      	uxth	r2, r3
 8000c94:	89bb      	ldrh	r3, [r7, #12]
 8000c96:	4313      	orrs	r3, r2
 8000c98:	81bb      	strh	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 8000c9a:	897b      	ldrh	r3, [r7, #10]
 8000c9c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000ca0:	817b      	strh	r3, [r7, #10]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	899b      	ldrh	r3, [r3, #12]
 8000ca6:	031b      	lsls	r3, r3, #12
 8000ca8:	b29a      	uxth	r2, r3
 8000caa:	897b      	ldrh	r3, [r7, #10]
 8000cac:	4313      	orrs	r3, r2
 8000cae:	817b      	strh	r3, [r7, #10]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	885b      	ldrh	r3, [r3, #2]
 8000cb4:	031b      	lsls	r3, r3, #12
 8000cb6:	b29a      	uxth	r2, r3
 8000cb8:	897b      	ldrh	r3, [r7, #10]
 8000cba:	4313      	orrs	r3, r2
 8000cbc:	817b      	strh	r3, [r7, #10]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	4a12      	ldr	r2, [pc, #72]	; (8000d0c <TIM_OC4Init+0xc8>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d003      	beq.n	8000cce <TIM_OC4Init+0x8a>
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	4a11      	ldr	r2, [pc, #68]	; (8000d10 <TIM_OC4Init+0xcc>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d10a      	bne.n	8000ce4 <TIM_OC4Init+0xa0>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
 8000cce:	89fb      	ldrh	r3, [r7, #14]
 8000cd0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000cd4:	81fb      	strh	r3, [r7, #14]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	8a1b      	ldrh	r3, [r3, #16]
 8000cda:	019b      	lsls	r3, r3, #6
 8000cdc:	b29a      	uxth	r2, r3
 8000cde:	89fb      	ldrh	r3, [r7, #14]
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	81fb      	strh	r3, [r7, #14]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	89fa      	ldrh	r2, [r7, #14]
 8000ce8:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	89ba      	ldrh	r2, [r7, #12]
 8000cee:	839a      	strh	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	689a      	ldr	r2, [r3, #8]
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	897a      	ldrh	r2, [r7, #10]
 8000cfc:	841a      	strh	r2, [r3, #32]
}
 8000cfe:	bf00      	nop
 8000d00:	3714      	adds	r7, #20
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	40010000 	.word	0x40010000
 8000d10:	40010400 	.word	0x40010400

08000d14 <TIM_OC1PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b085      	sub	sp, #20
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
 8000d1c:	460b      	mov	r3, r1
 8000d1e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8000d20:	2300      	movs	r3, #0
 8000d22:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	8b1b      	ldrh	r3, [r3, #24]
 8000d28:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC1PE);
 8000d2a:	89fb      	ldrh	r3, [r7, #14]
 8000d2c:	f023 0308 	bic.w	r3, r3, #8
 8000d30:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 8000d32:	89fa      	ldrh	r2, [r7, #14]
 8000d34:	887b      	ldrh	r3, [r7, #2]
 8000d36:	4313      	orrs	r3, r2
 8000d38:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	89fa      	ldrh	r2, [r7, #14]
 8000d3e:	831a      	strh	r2, [r3, #24]
}
 8000d40:	bf00      	nop
 8000d42:	3714      	adds	r7, #20
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr

08000d4c <TIM_OC2PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b085      	sub	sp, #20
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
 8000d54:	460b      	mov	r3, r1
 8000d56:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	8b1b      	ldrh	r3, [r3, #24]
 8000d60:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2PE);
 8000d62:	89fb      	ldrh	r3, [r7, #14]
 8000d64:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000d68:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
 8000d6a:	887b      	ldrh	r3, [r7, #2]
 8000d6c:	021b      	lsls	r3, r3, #8
 8000d6e:	b29a      	uxth	r2, r3
 8000d70:	89fb      	ldrh	r3, [r7, #14]
 8000d72:	4313      	orrs	r3, r2
 8000d74:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	89fa      	ldrh	r2, [r7, #14]
 8000d7a:	831a      	strh	r2, [r3, #24]
}
 8000d7c:	bf00      	nop
 8000d7e:	3714      	adds	r7, #20
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr

08000d88 <TIM_OC3PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b085      	sub	sp, #20
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
 8000d90:	460b      	mov	r3, r1
 8000d92:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8000d94:	2300      	movs	r3, #0
 8000d96:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	8b9b      	ldrh	r3, [r3, #28]
 8000d9c:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC3PE);
 8000d9e:	89fb      	ldrh	r3, [r7, #14]
 8000da0:	f023 0308 	bic.w	r3, r3, #8
 8000da4:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 8000da6:	89fa      	ldrh	r2, [r7, #14]
 8000da8:	887b      	ldrh	r3, [r7, #2]
 8000daa:	4313      	orrs	r3, r2
 8000dac:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	89fa      	ldrh	r2, [r7, #14]
 8000db2:	839a      	strh	r2, [r3, #28]
}
 8000db4:	bf00      	nop
 8000db6:	3714      	adds	r7, #20
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr

08000dc0 <TIM_OC4PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b085      	sub	sp, #20
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
 8000dc8:	460b      	mov	r3, r1
 8000dca:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	8b9b      	ldrh	r3, [r3, #28]
 8000dd4:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4PE);
 8000dd6:	89fb      	ldrh	r3, [r7, #14]
 8000dd8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000ddc:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 8000dde:	887b      	ldrh	r3, [r7, #2]
 8000de0:	021b      	lsls	r3, r3, #8
 8000de2:	b29a      	uxth	r2, r3
 8000de4:	89fb      	ldrh	r3, [r7, #14]
 8000de6:	4313      	orrs	r3, r2
 8000de8:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	89fa      	ldrh	r2, [r7, #14]
 8000dee:	839a      	strh	r2, [r3, #28]
}
 8000df0:	bf00      	nop
 8000df2:	3714      	adds	r7, #20
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr

08000dfc <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
 8000e04:	460b      	mov	r3, r1
 8000e06:	807b      	strh	r3, [r7, #2]
 8000e08:	4613      	mov	r3, r2
 8000e0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000e0c:	787b      	ldrb	r3, [r7, #1]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d008      	beq.n	8000e24 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	899b      	ldrh	r3, [r3, #12]
 8000e16:	b29a      	uxth	r2, r3
 8000e18:	887b      	ldrh	r3, [r7, #2]
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	b29a      	uxth	r2, r3
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 8000e22:	e009      	b.n	8000e38 <TIM_ITConfig+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	899b      	ldrh	r3, [r3, #12]
 8000e28:	b29a      	uxth	r2, r3
 8000e2a:	887b      	ldrh	r3, [r7, #2]
 8000e2c:	43db      	mvns	r3, r3
 8000e2e:	b29b      	uxth	r3, r3
 8000e30:	4013      	ands	r3, r2
 8000e32:	b29a      	uxth	r2, r3
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	819a      	strh	r2, [r3, #12]
}
 8000e38:	bf00      	nop
 8000e3a:	370c      	adds	r7, #12
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr

08000e44 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b08a      	sub	sp, #40	; 0x28
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	627b      	str	r3, [r7, #36]	; 0x24
 8000e52:	2300      	movs	r3, #0
 8000e54:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 8000e56:	2300      	movs	r3, #0
 8000e58:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	8a1b      	ldrh	r3, [r3, #16]
 8000e62:	b29b      	uxth	r3, r3
 8000e64:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8000e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e68:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000e6c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	88db      	ldrh	r3, [r3, #6]
 8000e72:	461a      	mov	r2, r3
 8000e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e76:	4313      	orrs	r3, r2
 8000e78:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8000e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e7c:	b29a      	uxth	r2, r3
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	899b      	ldrh	r3, [r3, #12]
 8000e86:	b29b      	uxth	r3, r3
 8000e88:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8000e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e8c:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8000e90:	f023 030c 	bic.w	r3, r3, #12
 8000e94:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	889a      	ldrh	r2, [r3, #4]
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	891b      	ldrh	r3, [r3, #8]
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	b29b      	uxth	r3, r3
 8000eaa:	461a      	mov	r2, r3
 8000eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8000eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb4:	b29a      	uxth	r2, r3
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	8a9b      	ldrh	r3, [r3, #20]
 8000ebe:	b29b      	uxth	r3, r3
 8000ec0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8000ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000ec8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	899b      	ldrh	r3, [r3, #12]
 8000ece:	461a      	mov	r2, r3
 8000ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8000ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ed8:	b29a      	uxth	r2, r3
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8000ede:	f107 0308 	add.w	r3, r7, #8
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f7ff fb50 	bl	8000588 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	4a30      	ldr	r2, [pc, #192]	; (8000fac <USART_Init+0x168>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d003      	beq.n	8000ef8 <USART_Init+0xb4>
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	4a2f      	ldr	r2, [pc, #188]	; (8000fb0 <USART_Init+0x16c>)
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d102      	bne.n	8000efe <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	623b      	str	r3, [r7, #32]
 8000efc:	e001      	b.n	8000f02 <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8000efe:	693b      	ldr	r3, [r7, #16]
 8000f00:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	899b      	ldrh	r3, [r3, #12]
 8000f06:	b29b      	uxth	r3, r3
 8000f08:	b21b      	sxth	r3, r3
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	da0c      	bge.n	8000f28 <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8000f0e:	6a3a      	ldr	r2, [r7, #32]
 8000f10:	4613      	mov	r3, r2
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	4413      	add	r3, r2
 8000f16:	009a      	lsls	r2, r3, #2
 8000f18:	441a      	add	r2, r3
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	005b      	lsls	r3, r3, #1
 8000f20:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f24:	61fb      	str	r3, [r7, #28]
 8000f26:	e00b      	b.n	8000f40 <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8000f28:	6a3a      	ldr	r2, [r7, #32]
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	4413      	add	r3, r2
 8000f30:	009a      	lsls	r2, r3, #2
 8000f32:	441a      	add	r2, r3
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f3e:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	4a1c      	ldr	r2, [pc, #112]	; (8000fb4 <USART_Init+0x170>)
 8000f44:	fba2 2303 	umull	r2, r3, r2, r3
 8000f48:	095b      	lsrs	r3, r3, #5
 8000f4a:	011b      	lsls	r3, r3, #4
 8000f4c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8000f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f50:	091b      	lsrs	r3, r3, #4
 8000f52:	2264      	movs	r2, #100	; 0x64
 8000f54:	fb02 f303 	mul.w	r3, r2, r3
 8000f58:	69fa      	ldr	r2, [r7, #28]
 8000f5a:	1ad3      	subs	r3, r2, r3
 8000f5c:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	899b      	ldrh	r3, [r3, #12]
 8000f62:	b29b      	uxth	r3, r3
 8000f64:	b21b      	sxth	r3, r3
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	da0c      	bge.n	8000f84 <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8000f6a:	69bb      	ldr	r3, [r7, #24]
 8000f6c:	00db      	lsls	r3, r3, #3
 8000f6e:	3332      	adds	r3, #50	; 0x32
 8000f70:	4a10      	ldr	r2, [pc, #64]	; (8000fb4 <USART_Init+0x170>)
 8000f72:	fba2 2303 	umull	r2, r3, r2, r3
 8000f76:	095b      	lsrs	r3, r3, #5
 8000f78:	f003 0307 	and.w	r3, r3, #7
 8000f7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	627b      	str	r3, [r7, #36]	; 0x24
 8000f82:	e00b      	b.n	8000f9c <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8000f84:	69bb      	ldr	r3, [r7, #24]
 8000f86:	011b      	lsls	r3, r3, #4
 8000f88:	3332      	adds	r3, #50	; 0x32
 8000f8a:	4a0a      	ldr	r2, [pc, #40]	; (8000fb4 <USART_Init+0x170>)
 8000f8c:	fba2 2303 	umull	r2, r3, r2, r3
 8000f90:	095b      	lsrs	r3, r3, #5
 8000f92:	f003 030f 	and.w	r3, r3, #15
 8000f96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8000f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f9e:	b29a      	uxth	r2, r3
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	811a      	strh	r2, [r3, #8]
}
 8000fa4:	bf00      	nop
 8000fa6:	3728      	adds	r7, #40	; 0x28
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	40011000 	.word	0x40011000
 8000fb0:	40011400 	.word	0x40011400
 8000fb4:	51eb851f 	.word	0x51eb851f

08000fb8 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000fc4:	78fb      	ldrb	r3, [r7, #3]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d008      	beq.n	8000fdc <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	899b      	ldrh	r3, [r3, #12]
 8000fce:	b29b      	uxth	r3, r3
 8000fd0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000fd4:	b29a      	uxth	r2, r3
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 8000fda:	e007      	b.n	8000fec <USART_Cmd+0x34>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	899b      	ldrh	r3, [r3, #12]
 8000fe0:	b29b      	uxth	r3, r3
 8000fe2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000fe6:	b29a      	uxth	r2, r3
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	819a      	strh	r2, [r3, #12]
}
 8000fec:	bf00      	nop
 8000fee:	370c      	adds	r7, #12
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr

08000ff8 <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	460b      	mov	r3, r1
 8001002:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8001004:	887b      	ldrh	r3, [r7, #2]
 8001006:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800100a:	b29a      	uxth	r2, r3
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	809a      	strh	r2, [r3, #4]
}
 8001010:	bf00      	nop
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr

0800101c <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 800101c:	b480      	push	{r7}
 800101e:	b087      	sub	sp, #28
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	460b      	mov	r3, r1
 8001026:	807b      	strh	r3, [r7, #2]
 8001028:	4613      	mov	r3, r2
 800102a:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 800102c:	2300      	movs	r3, #0
 800102e:	613b      	str	r3, [r7, #16]
 8001030:	2300      	movs	r3, #0
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	2300      	movs	r3, #0
 8001036:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 8001038:	2300      	movs	r3, #0
 800103a:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8001040:	887b      	ldrh	r3, [r7, #2]
 8001042:	b2db      	uxtb	r3, r3
 8001044:	095b      	lsrs	r3, r3, #5
 8001046:	b2db      	uxtb	r3, r3
 8001048:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 800104a:	887b      	ldrh	r3, [r7, #2]
 800104c:	f003 031f 	and.w	r3, r3, #31
 8001050:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 8001052:	2201      	movs	r2, #1
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	2b01      	cmp	r3, #1
 8001060:	d103      	bne.n	800106a <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	330c      	adds	r3, #12
 8001066:	617b      	str	r3, [r7, #20]
 8001068:	e009      	b.n	800107e <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	2b02      	cmp	r3, #2
 800106e:	d103      	bne.n	8001078 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	3310      	adds	r3, #16
 8001074:	617b      	str	r3, [r7, #20]
 8001076:	e002      	b.n	800107e <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	3314      	adds	r3, #20
 800107c:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 800107e:	787b      	ldrb	r3, [r7, #1]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d006      	beq.n	8001092 <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	697a      	ldr	r2, [r7, #20]
 8001088:	6811      	ldr	r1, [r2, #0]
 800108a:	68ba      	ldr	r2, [r7, #8]
 800108c:	430a      	orrs	r2, r1
 800108e:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8001090:	e006      	b.n	80010a0 <USART_ITConfig+0x84>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	697a      	ldr	r2, [r7, #20]
 8001096:	6811      	ldr	r1, [r2, #0]
 8001098:	68ba      	ldr	r2, [r7, #8]
 800109a:	43d2      	mvns	r2, r2
 800109c:	400a      	ands	r2, r1
 800109e:	601a      	str	r2, [r3, #0]
}
 80010a0:	bf00      	nop
 80010a2:	371c      	adds	r7, #28
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b087      	sub	sp, #28
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	460b      	mov	r3, r1
 80010b6:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 80010b8:	2300      	movs	r3, #0
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	2300      	movs	r3, #0
 80010be:	617b      	str	r3, [r7, #20]
 80010c0:	2300      	movs	r3, #0
 80010c2:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 80010c4:	2300      	movs	r3, #0
 80010c6:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 80010c8:	887b      	ldrh	r3, [r7, #2]
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	095b      	lsrs	r3, r3, #5
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 80010d2:	887b      	ldrh	r3, [r7, #2]
 80010d4:	f003 031f 	and.w	r3, r3, #31
 80010d8:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 80010da:	2201      	movs	r2, #1
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d107      	bne.n	80010fa <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	899b      	ldrh	r3, [r3, #12]
 80010ee:	b29b      	uxth	r3, r3
 80010f0:	461a      	mov	r2, r3
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	4013      	ands	r3, r2
 80010f6:	617b      	str	r3, [r7, #20]
 80010f8:	e011      	b.n	800111e <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	2b02      	cmp	r3, #2
 80010fe:	d107      	bne.n	8001110 <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	8a1b      	ldrh	r3, [r3, #16]
 8001104:	b29b      	uxth	r3, r3
 8001106:	461a      	mov	r2, r3
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	4013      	ands	r3, r2
 800110c:	617b      	str	r3, [r7, #20]
 800110e:	e006      	b.n	800111e <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	8a9b      	ldrh	r3, [r3, #20]
 8001114:	b29b      	uxth	r3, r3
 8001116:	461a      	mov	r2, r3
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	4013      	ands	r3, r2
 800111c:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 800111e:	887b      	ldrh	r3, [r7, #2]
 8001120:	0a1b      	lsrs	r3, r3, #8
 8001122:	b29b      	uxth	r3, r3
 8001124:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8001126:	2201      	movs	r2, #1
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	fa02 f303 	lsl.w	r3, r2, r3
 800112e:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	881b      	ldrh	r3, [r3, #0]
 8001134:	b29b      	uxth	r3, r3
 8001136:	461a      	mov	r2, r3
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	4013      	ands	r3, r2
 800113c:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d005      	beq.n	8001150 <USART_GetITStatus+0xa4>
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d002      	beq.n	8001150 <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 800114a:	2301      	movs	r3, #1
 800114c:	74fb      	strb	r3, [r7, #19]
 800114e:	e001      	b.n	8001154 <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 8001150:	2300      	movs	r3, #0
 8001152:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8001154:	7cfb      	ldrb	r3, [r7, #19]
}
 8001156:	4618      	mov	r0, r3
 8001158:	371c      	adds	r7, #28
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
	...

08001164 <init_USART1>:
/* This funcion initializes the USART1 peripheral
 *
 * Arguments: baudrate --> the baudrate at which the USART is
 * 						   supposed to operate
 */
void init_USART1(uint32_t baudrate){
 8001164:	b580      	push	{r7, lr}
 8001166:	b08a      	sub	sp, #40	; 0x28
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]

	/* enable APB2 peripheral clock for USART1
	 * note that only USART1 and USART6 are connected to APB2
	 * the other USARTs are connected to APB1
	 */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 800116c:	2101      	movs	r1, #1
 800116e:	2010      	movs	r0, #16
 8001170:	f7ff faf2 	bl	8000758 <RCC_APB2PeriphClockCmd>

	/* enable the peripheral clock for the pins used by
	 * USART1, PB6 for TX and PB7 for RX
	 */
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8001174:	2101      	movs	r1, #1
 8001176:	2001      	movs	r0, #1
 8001178:	f7ff faae 	bl	80006d8 <RCC_AHB1PeriphClockCmd>

	/* This sequence sets up the TX and RX pins
	 * so they work correctly with the USART1 peripheral
	 */
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_9 | GPIO_Pin_10; // Pins 6 (TX) and 7 (RX) are used
 800117c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001180:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF; 			// the pins are configured as alternate function so the USART peripheral has access to them
 8001182:	2302      	movs	r3, #2
 8001184:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;		// this defines the IO speed and has nothing to do with the baudrate!
 8001188:	2302      	movs	r3, #2
 800118a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;			// this defines the output type as push pull mode (as opposed to open drain)
 800118e:	2300      	movs	r3, #0
 8001190:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;			// this activates the pullup resistors on the IO pins
 8001194:	2301      	movs	r3, #1
 8001196:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	GPIO_Init(GPIOA, &GPIO_InitStruct);					// now all the values are passed to the GPIO_Init() function which sets the GPIO registers
 800119a:	f107 0320 	add.w	r3, r7, #32
 800119e:	4619      	mov	r1, r3
 80011a0:	481c      	ldr	r0, [pc, #112]	; (8001214 <init_USART1+0xb0>)
 80011a2:	f7ff f919 	bl	80003d8 <GPIO_Init>

	/* The RX and TX pins are now connected to their AF
	 * so that the USART1 can take over control of the
	 * pins
	 */
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource9, GPIO_AF_USART1); //
 80011a6:	2207      	movs	r2, #7
 80011a8:	2109      	movs	r1, #9
 80011aa:	481a      	ldr	r0, [pc, #104]	; (8001214 <init_USART1+0xb0>)
 80011ac:	f7ff f9a2 	bl	80004f4 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource10, GPIO_AF_USART1);
 80011b0:	2207      	movs	r2, #7
 80011b2:	210a      	movs	r1, #10
 80011b4:	4817      	ldr	r0, [pc, #92]	; (8001214 <init_USART1+0xb0>)
 80011b6:	f7ff f99d 	bl	80004f4 <GPIO_PinAFConfig>

	/* Now the USART_InitStruct is used to define the
	 * properties of USART1
	 */
	USART_InitStruct.USART_BaudRate = baudrate;				// the baudrate is set to the value we passed into this init function
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	613b      	str	r3, [r7, #16]
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bits (standard)
 80011be:	2300      	movs	r3, #0
 80011c0:	82bb      	strh	r3, [r7, #20]
	USART_InitStruct.USART_StopBits = USART_StopBits_1;		// we want 1 stop bit (standard)
 80011c2:	2300      	movs	r3, #0
 80011c4:	82fb      	strh	r3, [r7, #22]
	USART_InitStruct.USART_Parity = USART_Parity_No;		// we don't want a parity bit (standard)
 80011c6:	2300      	movs	r3, #0
 80011c8:	833b      	strh	r3, [r7, #24]
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None; // we don't want flow control (standard)
 80011ca:	2300      	movs	r3, #0
 80011cc:	83bb      	strh	r3, [r7, #28]
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver
 80011ce:	230c      	movs	r3, #12
 80011d0:	837b      	strh	r3, [r7, #26]
	USART_Init(USART1, &USART_InitStruct);					// again all the properties are passed to the USART_Init function which takes care of all the bit setting
 80011d2:	f107 0310 	add.w	r3, r7, #16
 80011d6:	4619      	mov	r1, r3
 80011d8:	480f      	ldr	r0, [pc, #60]	; (8001218 <init_USART1+0xb4>)
 80011da:	f7ff fe33 	bl	8000e44 <USART_Init>
	/* Here the USART1 receive interrupt is enabled
	 * and the interrupt controller is configured
	 * to jump to the USART1_IRQHandler() function
	 * if the USART1 receive interrupt occurs
	 */
	USART_ITConfig(USART1, USART_IT_RXNE, ENABLE); // enable the USART1 receive interrupt
 80011de:	2201      	movs	r2, #1
 80011e0:	f240 5125 	movw	r1, #1317	; 0x525
 80011e4:	480c      	ldr	r0, [pc, #48]	; (8001218 <init_USART1+0xb4>)
 80011e6:	f7ff ff19 	bl	800101c <USART_ITConfig>

	NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;		 // we want to configure the USART1 interrupts
 80011ea:	2325      	movs	r3, #37	; 0x25
 80011ec:	733b      	strb	r3, [r7, #12]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;// this sets the priority group of the USART1 interrupts
 80011ee:	2300      	movs	r3, #0
 80011f0:	737b      	strb	r3, [r7, #13]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;		 // this sets the subpriority inside the group
 80011f2:	2300      	movs	r3, #0
 80011f4:	73bb      	strb	r3, [r7, #14]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;			 // the USART1 interrupts are globally enabled
 80011f6:	2301      	movs	r3, #1
 80011f8:	73fb      	strb	r3, [r7, #15]
	NVIC_Init(&NVIC_InitStructure);							 // the properties are passed to the NVIC_Init function which takes care of the low level stuff
 80011fa:	f107 030c 	add.w	r3, r7, #12
 80011fe:	4618      	mov	r0, r3
 8001200:	f7fe ffe2 	bl	80001c8 <NVIC_Init>

	// finally this enables the complete USART1 peripheral
	USART_Cmd(USART1, ENABLE);
 8001204:	2101      	movs	r1, #1
 8001206:	4804      	ldr	r0, [pc, #16]	; (8001218 <init_USART1+0xb4>)
 8001208:	f7ff fed6 	bl	8000fb8 <USART_Cmd>
}
 800120c:	bf00      	nop
 800120e:	3728      	adds	r7, #40	; 0x28
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	40020000 	.word	0x40020000
 8001218:	40011000 	.word	0x40011000

0800121c <Configure_PC4>:

void Configure_PC4(void) {
 800121c:	b580      	push	{r7, lr}
 800121e:	b086      	sub	sp, #24
 8001220:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct;
    EXTI_InitTypeDef EXTI_InitStruct;
    NVIC_InitTypeDef NVIC_InitStruct;

    /* Enable clock for GPIOD */
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8001222:	2101      	movs	r1, #1
 8001224:	2004      	movs	r0, #4
 8001226:	f7ff fa57 	bl	80006d8 <RCC_AHB1PeriphClockCmd>
    /* Enable clock for SYSCFG */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 800122a:	2101      	movs	r1, #1
 800122c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001230:	f7ff fa92 	bl	8000758 <RCC_APB2PeriphClockCmd>

    /* Set pin as input */
    GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IN;
 8001234:	2300      	movs	r3, #0
 8001236:	753b      	strb	r3, [r7, #20]
    GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8001238:	2300      	movs	r3, #0
 800123a:	75bb      	strb	r3, [r7, #22]
    GPIO_InitStruct.GPIO_Pin = GPIO_Pin_4;
 800123c:	2310      	movs	r3, #16
 800123e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 8001240:	2301      	movs	r3, #1
 8001242:	75fb      	strb	r3, [r7, #23]
    GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 8001244:	2303      	movs	r3, #3
 8001246:	757b      	strb	r3, [r7, #21]
    GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001248:	f107 0310 	add.w	r3, r7, #16
 800124c:	4619      	mov	r1, r3
 800124e:	4812      	ldr	r0, [pc, #72]	; (8001298 <Configure_PC4+0x7c>)
 8001250:	f7ff f8c2 	bl	80003d8 <GPIO_Init>

    /* Tell system that you will use PD0 for EXTI_Line0 */
    SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOC, EXTI_PinSource4);
 8001254:	2104      	movs	r1, #4
 8001256:	2002      	movs	r0, #2
 8001258:	f7ff fa9e 	bl	8000798 <SYSCFG_EXTILineConfig>

    /* PD0 is connected to EXTI_Line0 */
    EXTI_InitStruct.EXTI_Line = EXTI_Line4;
 800125c:	2310      	movs	r3, #16
 800125e:	60bb      	str	r3, [r7, #8]
    /* Enable interrupt */
    EXTI_InitStruct.EXTI_LineCmd = ENABLE;
 8001260:	2301      	movs	r3, #1
 8001262:	73bb      	strb	r3, [r7, #14]
    /* Interrupt mode */
    EXTI_InitStruct.EXTI_Mode = EXTI_Mode_Interrupt;
 8001264:	2300      	movs	r3, #0
 8001266:	733b      	strb	r3, [r7, #12]
    /* Triggers on rising and falling edge */
    EXTI_InitStruct.EXTI_Trigger = EXTI_Trigger_Falling;
 8001268:	230c      	movs	r3, #12
 800126a:	737b      	strb	r3, [r7, #13]
    /* Add to EXTI */
    EXTI_Init(&EXTI_InitStruct);
 800126c:	f107 0308 	add.w	r3, r7, #8
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff f80b 	bl	800028c <EXTI_Init>

    /* Add IRQ vector to NVIC */
    /* PD0 is connected to EXTI_Line0, which has EXTI0_IRQn vector */
    NVIC_InitStruct.NVIC_IRQChannel = EXTI4_IRQn;
 8001276:	230a      	movs	r3, #10
 8001278:	713b      	strb	r3, [r7, #4]
    /* Set priority */
    NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = 0x00;
 800127a:	2300      	movs	r3, #0
 800127c:	717b      	strb	r3, [r7, #5]
    /* Set sub priority */
    NVIC_InitStruct.NVIC_IRQChannelSubPriority = 0x00;
 800127e:	2300      	movs	r3, #0
 8001280:	71bb      	strb	r3, [r7, #6]
    /* Enable interrupt */
    NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 8001282:	2301      	movs	r3, #1
 8001284:	71fb      	strb	r3, [r7, #7]
    /* Add to NVIC */
    NVIC_Init(&NVIC_InitStruct);
 8001286:	1d3b      	adds	r3, r7, #4
 8001288:	4618      	mov	r0, r3
 800128a:	f7fe ff9d 	bl	80001c8 <NVIC_Init>
}
 800128e:	bf00      	nop
 8001290:	3718      	adds	r7, #24
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	40020800 	.word	0x40020800

0800129c <USART_puts>:
 * 		 C a string is just an array of characters
 *
 * Note 2: At the moment it takes a volatile char because the received_string variable
 * 		   declared as volatile char --> otherwise the compiler will spit out warnings
 * */
void USART_puts(USART_TypeDef* USARTx, volatile char *s){
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	6039      	str	r1, [r7, #0]

	while(*s){
 80012a6:	e013      	b.n	80012d0 <USART_puts+0x34>
		// wait until data register is empty
		while( !(USARTx->SR & 0x00000040) );
 80012a8:	bf00      	nop
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	881b      	ldrh	r3, [r3, #0]
 80012ae:	b29b      	uxth	r3, r3
 80012b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d0f8      	beq.n	80012aa <USART_puts+0xe>
		USART_SendData(USARTx, *s);
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	b29b      	uxth	r3, r3
 80012c0:	4619      	mov	r1, r3
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f7ff fe98 	bl	8000ff8 <USART_SendData>
		*s++;
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	1c5a      	adds	r2, r3, #1
 80012cc:	603a      	str	r2, [r7, #0]
 80012ce:	781b      	ldrb	r3, [r3, #0]
	while(*s){
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d1e6      	bne.n	80012a8 <USART_puts+0xc>
	}
}
 80012da:	bf00      	nop
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <TIM_INT_Init>:

void TIM_INT_Init()
{
 80012e2:	b580      	push	{r7, lr}
 80012e4:	b084      	sub	sp, #16
 80012e6:	af00      	add	r7, sp, #0
    // Enable clock for TIM2
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 80012e8:	2101      	movs	r1, #1
 80012ea:	2001      	movs	r0, #1
 80012ec:	f7ff fa14 	bl	8000718 <RCC_APB1PeriphClockCmd>
    // so update event is 0.5Hz or 500ms
    // Update Event (Hz) = timer_clock / ((TIM_Prescaler + 1) *
    // (TIM_Period + 1))
    // Update Event (Hz) = 84MHz / ((4199 + 1) * (9999 + 1)) = 0.5 Hz
    TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStruct;
    TIM_TimeBaseInitStruct.TIM_Prescaler = 4199;
 80012f0:	f241 0367 	movw	r3, #4199	; 0x1067
 80012f4:	80bb      	strh	r3, [r7, #4]
    TIM_TimeBaseInitStruct.TIM_Period = 9999;
 80012f6:	f242 730f 	movw	r3, #9999	; 0x270f
 80012fa:	60bb      	str	r3, [r7, #8]
    TIM_TimeBaseInitStruct.TIM_ClockDivision = TIM_CKD_DIV1;
 80012fc:	2300      	movs	r3, #0
 80012fe:	81bb      	strh	r3, [r7, #12]
    TIM_TimeBaseInitStruct.TIM_CounterMode = TIM_CounterMode_Up;
 8001300:	2300      	movs	r3, #0
 8001302:	80fb      	strh	r3, [r7, #6]

    // TIM2 initialize
    TIM_TimeBaseInit(TIM2, &TIM_TimeBaseInitStruct);
 8001304:	1d3b      	adds	r3, r7, #4
 8001306:	4619      	mov	r1, r3
 8001308:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800130c:	f7ff fa86 	bl	800081c <TIM_TimeBaseInit>
    // Enable TIM2 interrupt
    TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);
 8001310:	2201      	movs	r2, #1
 8001312:	2101      	movs	r1, #1
 8001314:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001318:	f7ff fd70 	bl	8000dfc <TIM_ITConfig>
    // Start TIM2
    TIM_Cmd(TIM2, ENABLE);
 800131c:	2101      	movs	r1, #1
 800131e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001322:	f7ff fae7 	bl	80008f4 <TIM_Cmd>

    // Nested vectored interrupt settings
    // TIM2 interrupt is most important (PreemptionPriority and
    // SubPriority = 0)
    NVIC_InitTypeDef NVIC_InitStruct;
    NVIC_InitStruct.NVIC_IRQChannel = TIM2_IRQn;
 8001326:	231c      	movs	r3, #28
 8001328:	703b      	strb	r3, [r7, #0]
    NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = 0;
 800132a:	2300      	movs	r3, #0
 800132c:	707b      	strb	r3, [r7, #1]
    NVIC_InitStruct.NVIC_IRQChannelSubPriority = 0;
 800132e:	2300      	movs	r3, #0
 8001330:	70bb      	strb	r3, [r7, #2]
    NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 8001332:	2301      	movs	r3, #1
 8001334:	70fb      	strb	r3, [r7, #3]
    NVIC_Init(&NVIC_InitStruct);
 8001336:	463b      	mov	r3, r7
 8001338:	4618      	mov	r0, r3
 800133a:	f7fe ff45 	bl	80001c8 <NVIC_Init>
}
 800133e:	bf00      	nop
 8001340:	3710      	adds	r7, #16
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
	...

08001348 <TM_LEDS_Init>:

void TM_LEDS_Init(void) {
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;

	/* Clock for GPIOD */
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 800134e:	2101      	movs	r1, #1
 8001350:	2004      	movs	r0, #4
 8001352:	f7ff f9c1 	bl	80006d8 <RCC_AHB1PeriphClockCmd>

	/* Alternating functions for pins */
	GPIO_PinAFConfig(GPIOC, GPIO_PinSource12, GPIO_AF_TIM4);
 8001356:	2202      	movs	r2, #2
 8001358:	210c      	movs	r1, #12
 800135a:	4813      	ldr	r0, [pc, #76]	; (80013a8 <TM_LEDS_Init+0x60>)
 800135c:	f7ff f8ca 	bl	80004f4 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOC, GPIO_PinSource13, GPIO_AF_TIM4);
 8001360:	2202      	movs	r2, #2
 8001362:	210d      	movs	r1, #13
 8001364:	4810      	ldr	r0, [pc, #64]	; (80013a8 <TM_LEDS_Init+0x60>)
 8001366:	f7ff f8c5 	bl	80004f4 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOC, GPIO_PinSource14, GPIO_AF_TIM4);
 800136a:	2202      	movs	r2, #2
 800136c:	210e      	movs	r1, #14
 800136e:	480e      	ldr	r0, [pc, #56]	; (80013a8 <TM_LEDS_Init+0x60>)
 8001370:	f7ff f8c0 	bl	80004f4 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOC, GPIO_PinSource15, GPIO_AF_TIM4);
 8001374:	2202      	movs	r2, #2
 8001376:	210f      	movs	r1, #15
 8001378:	480b      	ldr	r0, [pc, #44]	; (80013a8 <TM_LEDS_Init+0x60>)
 800137a:	f7ff f8bb 	bl	80004f4 <GPIO_PinAFConfig>

	/* Set pins */
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;
 800137e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001382:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8001384:	2300      	movs	r3, #0
 8001386:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001388:	2300      	movs	r3, #0
 800138a:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 800138c:	2302      	movs	r3, #2
 800138e:	713b      	strb	r3, [r7, #4]
    GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 8001390:	2303      	movs	r3, #3
 8001392:	717b      	strb	r3, [r7, #5]
    GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001394:	463b      	mov	r3, r7
 8001396:	4619      	mov	r1, r3
 8001398:	4803      	ldr	r0, [pc, #12]	; (80013a8 <TM_LEDS_Init+0x60>)
 800139a:	f7ff f81d 	bl	80003d8 <GPIO_Init>
}
 800139e:	bf00      	nop
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	40020800 	.word	0x40020800

080013ac <TM_TIMER_Init>:

void TM_TIMER_Init(void) {
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
	TIM_TimeBaseInitTypeDef TIM_BaseStruct;

	/* Enable clock for TIM4 */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 80013b2:	2101      	movs	r1, #1
 80013b4:	2001      	movs	r0, #1
 80013b6:	f7ff f9cf 	bl	8000758 <RCC_APB2PeriphClockCmd>
	In our case, we want a max frequency for timer, so we set prescaller to 0
	And our timer will have tick frequency

	timer_tick_frequency = 84000000 / (0 + 1) = 84000000
*/
	TIM_BaseStruct.TIM_Prescaler = 0;
 80013ba:	2300      	movs	r3, #0
 80013bc:	80bb      	strh	r3, [r7, #4]
	/* Count up */
    TIM_BaseStruct.TIM_CounterMode = TIM_CounterMode_Up;
 80013be:	2300      	movs	r3, #0
 80013c0:	80fb      	strh	r3, [r7, #6]
	TIM_Period = 84000000 / 10000 - 1 = 8399

	If you get TIM_Period larger than max timer value (in our case 65535),
	you have to choose larger prescaler and slow down timer tick frequency
*/
    TIM_BaseStruct.TIM_Period = 8399; /* 10kHz PWM */
 80013c2:	f242 03cf 	movw	r3, #8399	; 0x20cf
 80013c6:	60bb      	str	r3, [r7, #8]
    TIM_BaseStruct.TIM_ClockDivision = TIM_CKD_DIV1;
 80013c8:	2300      	movs	r3, #0
 80013ca:	81bb      	strh	r3, [r7, #12]
    TIM_BaseStruct.TIM_RepetitionCounter = 0;
 80013cc:	2300      	movs	r3, #0
 80013ce:	73bb      	strb	r3, [r7, #14]
	/* Initialize TIM4 */
    TIM_TimeBaseInit(TIM1, &TIM_BaseStruct);
 80013d0:	1d3b      	adds	r3, r7, #4
 80013d2:	4619      	mov	r1, r3
 80013d4:	4805      	ldr	r0, [pc, #20]	; (80013ec <TM_TIMER_Init+0x40>)
 80013d6:	f7ff fa21 	bl	800081c <TIM_TimeBaseInit>
	/* Start count on TIM4 */
    TIM_Cmd(TIM1, ENABLE);
 80013da:	2101      	movs	r1, #1
 80013dc:	4803      	ldr	r0, [pc, #12]	; (80013ec <TM_TIMER_Init+0x40>)
 80013de:	f7ff fa89 	bl	80008f4 <TIM_Cmd>
}
 80013e2:	bf00      	nop
 80013e4:	3710      	adds	r7, #16
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	40010000 	.word	0x40010000

080013f0 <TM_PWM_Init>:

void TM_PWM_Init(void) {
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b086      	sub	sp, #24
 80013f4:	af00      	add	r7, sp, #0

	/* Common settings */

	/* PWM mode 2 = Clear on compare match */
	/* PWM mode 1 = Set on compare match */
	TIM_OCStruct.TIM_OCMode = TIM_OCMode_PWM2;
 80013f6:	2370      	movs	r3, #112	; 0x70
 80013f8:	80bb      	strh	r3, [r7, #4]
	TIM_OCStruct.TIM_OutputState = TIM_OutputState_Enable;
 80013fa:	2301      	movs	r3, #1
 80013fc:	80fb      	strh	r3, [r7, #6]
	TIM_OCStruct.TIM_OCPolarity = TIM_OCPolarity_Low;
 80013fe:	2302      	movs	r3, #2
 8001400:	823b      	strh	r3, [r7, #16]
	75% duty cycle: 	pulse_length = ((8399 + 1) * 75) / 100 - 1 = 6299
	100% duty cycle:	pulse_length = ((8399 + 1) * 100) / 100 - 1 = 8399

	Remember: if pulse_length is larger than TIM_Period, you will have output HIGH all the time
*/
	TIM_OCStruct.TIM_Pulse = 2099; /* 25% duty cycle */
 8001402:	f640 0333 	movw	r3, #2099	; 0x833
 8001406:	60fb      	str	r3, [r7, #12]
	TIM_OC1Init(TIM1, &TIM_OCStruct);
 8001408:	1d3b      	adds	r3, r7, #4
 800140a:	4619      	mov	r1, r3
 800140c:	4817      	ldr	r0, [pc, #92]	; (800146c <TM_PWM_Init+0x7c>)
 800140e:	f7ff fa91 	bl	8000934 <TIM_OC1Init>
	TIM_OC1PreloadConfig(TIM1, TIM_OCPreload_Enable);
 8001412:	2108      	movs	r1, #8
 8001414:	4815      	ldr	r0, [pc, #84]	; (800146c <TM_PWM_Init+0x7c>)
 8001416:	f7ff fc7d 	bl	8000d14 <TIM_OC1PreloadConfig>

	TIM_OCStruct.TIM_Pulse = 4199; /* 50% duty cycle */
 800141a:	f241 0367 	movw	r3, #4199	; 0x1067
 800141e:	60fb      	str	r3, [r7, #12]
	TIM_OC2Init(TIM1, &TIM_OCStruct);
 8001420:	1d3b      	adds	r3, r7, #4
 8001422:	4619      	mov	r1, r3
 8001424:	4811      	ldr	r0, [pc, #68]	; (800146c <TM_PWM_Init+0x7c>)
 8001426:	f7ff faff 	bl	8000a28 <TIM_OC2Init>
	TIM_OC2PreloadConfig(TIM1, TIM_OCPreload_Enable);
 800142a:	2108      	movs	r1, #8
 800142c:	480f      	ldr	r0, [pc, #60]	; (800146c <TM_PWM_Init+0x7c>)
 800142e:	f7ff fc8d 	bl	8000d4c <TIM_OC2PreloadConfig>

	TIM_OCStruct.TIM_Pulse = 6299; /* 75% duty cycle */
 8001432:	f641 039b 	movw	r3, #6299	; 0x189b
 8001436:	60fb      	str	r3, [r7, #12]
	TIM_OC3Init(TIM1, &TIM_OCStruct);
 8001438:	1d3b      	adds	r3, r7, #4
 800143a:	4619      	mov	r1, r3
 800143c:	480b      	ldr	r0, [pc, #44]	; (800146c <TM_PWM_Init+0x7c>)
 800143e:	f7ff fb7b 	bl	8000b38 <TIM_OC3Init>
	TIM_OC3PreloadConfig(TIM1, TIM_OCPreload_Enable);
 8001442:	2108      	movs	r1, #8
 8001444:	4809      	ldr	r0, [pc, #36]	; (800146c <TM_PWM_Init+0x7c>)
 8001446:	f7ff fc9f 	bl	8000d88 <TIM_OC3PreloadConfig>

	TIM_OCStruct.TIM_Pulse = 8399; /* 100% duty cycle */
 800144a:	f242 03cf 	movw	r3, #8399	; 0x20cf
 800144e:	60fb      	str	r3, [r7, #12]
	TIM_OC4Init(TIM1, &TIM_OCStruct);
 8001450:	1d3b      	adds	r3, r7, #4
 8001452:	4619      	mov	r1, r3
 8001454:	4805      	ldr	r0, [pc, #20]	; (800146c <TM_PWM_Init+0x7c>)
 8001456:	f7ff fbf5 	bl	8000c44 <TIM_OC4Init>
	TIM_OC4PreloadConfig(TIM1, TIM_OCPreload_Enable);
 800145a:	2108      	movs	r1, #8
 800145c:	4803      	ldr	r0, [pc, #12]	; (800146c <TM_PWM_Init+0x7c>)
 800145e:	f7ff fcaf 	bl	8000dc0 <TIM_OC4PreloadConfig>
}
 8001462:	bf00      	nop
 8001464:	3718      	adds	r7, #24
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	40010000 	.word	0x40010000

08001470 <main>:

int main(void) {
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0

  Configure_PC4();
 8001474:	f7ff fed2 	bl	800121c <Configure_PC4>

  init_USART1(9600); // initialize USART1 @ 9600 baud
 8001478:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 800147c:	f7ff fe72 	bl	8001164 <init_USART1>

  //init_I2C1(); //

  TIM_INT_Init();
 8001480:	f7ff ff2f 	bl	80012e2 <TIM_INT_Init>

  /* Init leds */
  TM_LEDS_Init();
 8001484:	f7ff ff60 	bl	8001348 <TM_LEDS_Init>
  /* Init timer */
  TM_TIMER_Init();
 8001488:	f7ff ff90 	bl	80013ac <TM_TIMER_Init>
  /* Init PWM */
  TM_PWM_Init();
 800148c:	f7ff ffb0 	bl	80013f0 <TM_PWM_Init>


  while (1){
 8001490:	e7fe      	b.n	8001490 <main+0x20>
	...

08001494 <USART1_IRQHandler>:
	  //__WFI();
  }
}

// this is the interrupt request handler (IRQ) for ALL USART1 interrupts
void USART1_IRQHandler(void){
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0

	// check if the USART1 receive interrupt flag was set
	if( USART_GetITStatus(USART1, USART_IT_RXNE) ){
 800149a:	f240 5125 	movw	r1, #1317	; 0x525
 800149e:	4812      	ldr	r0, [pc, #72]	; (80014e8 <USART1_IRQHandler+0x54>)
 80014a0:	f7ff fe04 	bl	80010ac <USART_GetITStatus>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d01a      	beq.n	80014e0 <USART1_IRQHandler+0x4c>

		static uint8_t cnt = 0; // this counter is used to determine the string length
		char t = USART1->DR; // the character from the USART1 data register is saved in t
 80014aa:	4b0f      	ldr	r3, [pc, #60]	; (80014e8 <USART1_IRQHandler+0x54>)
 80014ac:	889b      	ldrh	r3, [r3, #4]
 80014ae:	b29b      	uxth	r3, r3
 80014b0:	71fb      	strb	r3, [r7, #7]

		/* check if the received character is not the LF character (used to determine end of string)
		 * or the if the maximum string length has been been reached
		 */
		if( (t != '\n') && (cnt < MAX_STRLEN) ){
 80014b2:	79fb      	ldrb	r3, [r7, #7]
 80014b4:	2b0a      	cmp	r3, #10
 80014b6:	d010      	beq.n	80014da <USART1_IRQHandler+0x46>
 80014b8:	4b0c      	ldr	r3, [pc, #48]	; (80014ec <USART1_IRQHandler+0x58>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	2b13      	cmp	r3, #19
 80014be:	d80c      	bhi.n	80014da <USART1_IRQHandler+0x46>
			received_string[cnt] = t;
 80014c0:	4b0a      	ldr	r3, [pc, #40]	; (80014ec <USART1_IRQHandler+0x58>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	4619      	mov	r1, r3
 80014c6:	4a0a      	ldr	r2, [pc, #40]	; (80014f0 <USART1_IRQHandler+0x5c>)
 80014c8:	79fb      	ldrb	r3, [r7, #7]
 80014ca:	5453      	strb	r3, [r2, r1]
			cnt++;
 80014cc:	4b07      	ldr	r3, [pc, #28]	; (80014ec <USART1_IRQHandler+0x58>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	3301      	adds	r3, #1
 80014d2:	b2da      	uxtb	r2, r3
 80014d4:	4b05      	ldr	r3, [pc, #20]	; (80014ec <USART1_IRQHandler+0x58>)
 80014d6:	701a      	strb	r2, [r3, #0]
		}
		else{ // otherwise reset the character counter and print the received string
			cnt = 0;
		}
	}
}
 80014d8:	e002      	b.n	80014e0 <USART1_IRQHandler+0x4c>
			cnt = 0;
 80014da:	4b04      	ldr	r3, [pc, #16]	; (80014ec <USART1_IRQHandler+0x58>)
 80014dc:	2200      	movs	r2, #0
 80014de:	701a      	strb	r2, [r3, #0]
}
 80014e0:	bf00      	nop
 80014e2:	3708      	adds	r7, #8
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	40011000 	.word	0x40011000
 80014ec:	20000030 	.word	0x20000030
 80014f0:	20000038 	.word	0x20000038

080014f4 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void) {
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
    /* Make sure that interrupt flag is set */
    if (EXTI_GetITStatus(EXTI_Line4) != RESET) {
 80014fa:	2010      	movs	r0, #16
 80014fc:	f7fe ff38 	bl	8000370 <EXTI_GetITStatus>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d044      	beq.n	8001590 <EXTI4_IRQHandler+0x9c>
        /* Do your stuff when PD0 is changed */
    	uint32_t time = 0;
 8001506:	2300      	movs	r3, #0
 8001508:	607b      	str	r3, [r7, #4]

    	while(!(GPIOC->IDR & GPIO_Pin_4) && (time < BUTTON_LIMIT)){
 800150a:	e002      	b.n	8001512 <EXTI4_IRQHandler+0x1e>
    		time = time + 1;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	3301      	adds	r3, #1
 8001510:	607b      	str	r3, [r7, #4]
    	while(!(GPIOC->IDR & GPIO_Pin_4) && (time < BUTTON_LIMIT)){
 8001512:	4b21      	ldr	r3, [pc, #132]	; (8001598 <EXTI4_IRQHandler+0xa4>)
 8001514:	691b      	ldr	r3, [r3, #16]
 8001516:	f003 0310 	and.w	r3, r3, #16
 800151a:	2b00      	cmp	r3, #0
 800151c:	d103      	bne.n	8001526 <EXTI4_IRQHandler+0x32>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4a1e      	ldr	r2, [pc, #120]	; (800159c <EXTI4_IRQHandler+0xa8>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d9f2      	bls.n	800150c <EXTI4_IRQHandler+0x18>
    	}

    	// if state is equal to 1
    	if(state == 1){
 8001526:	4b1e      	ldr	r3, [pc, #120]	; (80015a0 <EXTI4_IRQHandler+0xac>)
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	2b01      	cmp	r3, #1
 800152c:	d113      	bne.n	8001556 <EXTI4_IRQHandler+0x62>
    		if(time < BUTTON_LIMIT){
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4a1a      	ldr	r2, [pc, #104]	; (800159c <EXTI4_IRQHandler+0xa8>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d807      	bhi.n	8001546 <EXTI4_IRQHandler+0x52>
    			USART_puts(USART1, "hello");
 8001536:	491b      	ldr	r1, [pc, #108]	; (80015a4 <EXTI4_IRQHandler+0xb0>)
 8001538:	481b      	ldr	r0, [pc, #108]	; (80015a8 <EXTI4_IRQHandler+0xb4>)
 800153a:	f7ff feaf 	bl	800129c <USART_puts>
    			state = 2;
 800153e:	4b18      	ldr	r3, [pc, #96]	; (80015a0 <EXTI4_IRQHandler+0xac>)
 8001540:	2202      	movs	r2, #2
 8001542:	701a      	strb	r2, [r3, #0]
 8001544:	e01a      	b.n	800157c <EXTI4_IRQHandler+0x88>
    		}
    		else{
    			USART_puts(USART1, "quit");
 8001546:	4919      	ldr	r1, [pc, #100]	; (80015ac <EXTI4_IRQHandler+0xb8>)
 8001548:	4817      	ldr	r0, [pc, #92]	; (80015a8 <EXTI4_IRQHandler+0xb4>)
 800154a:	f7ff fea7 	bl	800129c <USART_puts>
    			state = 1;
 800154e:	4b14      	ldr	r3, [pc, #80]	; (80015a0 <EXTI4_IRQHandler+0xac>)
 8001550:	2201      	movs	r2, #1
 8001552:	701a      	strb	r2, [r3, #0]
 8001554:	e012      	b.n	800157c <EXTI4_IRQHandler+0x88>
    		}
    	}
    	else{
    		if(time < BUTTON_LIMIT){
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4a10      	ldr	r2, [pc, #64]	; (800159c <EXTI4_IRQHandler+0xa8>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d807      	bhi.n	800156e <EXTI4_IRQHandler+0x7a>
    			USART_puts(USART1, "data");
 800155e:	4914      	ldr	r1, [pc, #80]	; (80015b0 <EXTI4_IRQHandler+0xbc>)
 8001560:	4811      	ldr	r0, [pc, #68]	; (80015a8 <EXTI4_IRQHandler+0xb4>)
 8001562:	f7ff fe9b 	bl	800129c <USART_puts>
    			state = 2;
 8001566:	4b0e      	ldr	r3, [pc, #56]	; (80015a0 <EXTI4_IRQHandler+0xac>)
 8001568:	2202      	movs	r2, #2
 800156a:	701a      	strb	r2, [r3, #0]
 800156c:	e006      	b.n	800157c <EXTI4_IRQHandler+0x88>
    		}
    		else{
    			USART_puts(USART1, "quit");
 800156e:	490f      	ldr	r1, [pc, #60]	; (80015ac <EXTI4_IRQHandler+0xb8>)
 8001570:	480d      	ldr	r0, [pc, #52]	; (80015a8 <EXTI4_IRQHandler+0xb4>)
 8001572:	f7ff fe93 	bl	800129c <USART_puts>
    			state = 1;
 8001576:	4b0a      	ldr	r3, [pc, #40]	; (80015a0 <EXTI4_IRQHandler+0xac>)
 8001578:	2201      	movs	r2, #1
 800157a:	701a      	strb	r2, [r3, #0]
    		}
    	}

    	while(!(GPIOC->IDR & GPIO_Pin_4)){}
 800157c:	bf00      	nop
 800157e:	4b06      	ldr	r3, [pc, #24]	; (8001598 <EXTI4_IRQHandler+0xa4>)
 8001580:	691b      	ldr	r3, [r3, #16]
 8001582:	f003 0310 	and.w	r3, r3, #16
 8001586:	2b00      	cmp	r3, #0
 8001588:	d0f9      	beq.n	800157e <EXTI4_IRQHandler+0x8a>

        /* Clear interrupt flag */
        EXTI_ClearITPendingBit(EXTI_Line4);
 800158a:	2010      	movs	r0, #16
 800158c:	f7fe ff14 	bl	80003b8 <EXTI_ClearITPendingBit>
    }
}
 8001590:	bf00      	nop
 8001592:	3708      	adds	r7, #8
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	40020800 	.word	0x40020800
 800159c:	0026259f 	.word	0x0026259f
 80015a0:	20000010 	.word	0x20000010
 80015a4:	08001828 	.word	0x08001828
 80015a8:	40011000 	.word	0x40011000
 80015ac:	08001830 	.word	0x08001830
 80015b0:	08001838 	.word	0x08001838

080015b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80015b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015ec <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80015b8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80015ba:	e003      	b.n	80015c4 <LoopCopyDataInit>

080015bc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80015bc:	4b0c      	ldr	r3, [pc, #48]	; (80015f0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80015be:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80015c0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80015c2:	3104      	adds	r1, #4

080015c4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80015c4:	480b      	ldr	r0, [pc, #44]	; (80015f4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80015c6:	4b0c      	ldr	r3, [pc, #48]	; (80015f8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80015c8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80015ca:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80015cc:	d3f6      	bcc.n	80015bc <CopyDataInit>
  ldr  r2, =_sbss
 80015ce:	4a0b      	ldr	r2, [pc, #44]	; (80015fc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80015d0:	e002      	b.n	80015d8 <LoopFillZerobss>

080015d2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80015d2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80015d4:	f842 3b04 	str.w	r3, [r2], #4

080015d8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80015d8:	4b09      	ldr	r3, [pc, #36]	; (8001600 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80015da:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80015dc:	d3f9      	bcc.n	80015d2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80015de:	f000 f841 	bl	8001664 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015e2:	f000 f8f1 	bl	80017c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015e6:	f7ff ff43 	bl	8001470 <main>
  bx  lr    
 80015ea:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80015ec:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80015f0:	08001848 	.word	0x08001848
  ldr  r0, =_sdata
 80015f4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80015f8:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 80015fc:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 8001600:	20000050 	.word	0x20000050

08001604 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001604:	e7fe      	b.n	8001604 <ADC_IRQHandler>

08001606 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001606:	b480      	push	{r7}
 8001608:	af00      	add	r7, sp, #0
}
 800160a:	bf00      	nop
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr

08001614 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001618:	e7fe      	b.n	8001618 <HardFault_Handler+0x4>

0800161a <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800161a:	b480      	push	{r7}
 800161c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800161e:	e7fe      	b.n	800161e <MemManage_Handler+0x4>

08001620 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001624:	e7fe      	b.n	8001624 <BusFault_Handler+0x4>

08001626 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001626:	b480      	push	{r7}
 8001628:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800162a:	e7fe      	b.n	800162a <UsageFault_Handler+0x4>

0800162c <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
}
 8001630:	bf00      	nop
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr

0800163a <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800163a:	b480      	push	{r7}
 800163c:	af00      	add	r7, sp, #0
}
 800163e:	bf00      	nop
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
}
 800164c:	bf00      	nop
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr

08001656 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001656:	b480      	push	{r7}
 8001658:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 800165a:	bf00      	nop
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr

08001664 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001668:	4a16      	ldr	r2, [pc, #88]	; (80016c4 <SystemInit+0x60>)
 800166a:	4b16      	ldr	r3, [pc, #88]	; (80016c4 <SystemInit+0x60>)
 800166c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001670:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001674:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001678:	4a13      	ldr	r2, [pc, #76]	; (80016c8 <SystemInit+0x64>)
 800167a:	4b13      	ldr	r3, [pc, #76]	; (80016c8 <SystemInit+0x64>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f043 0301 	orr.w	r3, r3, #1
 8001682:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001684:	4b10      	ldr	r3, [pc, #64]	; (80016c8 <SystemInit+0x64>)
 8001686:	2200      	movs	r2, #0
 8001688:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800168a:	4a0f      	ldr	r2, [pc, #60]	; (80016c8 <SystemInit+0x64>)
 800168c:	4b0e      	ldr	r3, [pc, #56]	; (80016c8 <SystemInit+0x64>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001694:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001698:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800169a:	4b0b      	ldr	r3, [pc, #44]	; (80016c8 <SystemInit+0x64>)
 800169c:	4a0b      	ldr	r2, [pc, #44]	; (80016cc <SystemInit+0x68>)
 800169e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80016a0:	4a09      	ldr	r2, [pc, #36]	; (80016c8 <SystemInit+0x64>)
 80016a2:	4b09      	ldr	r3, [pc, #36]	; (80016c8 <SystemInit+0x64>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016aa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80016ac:	4b06      	ldr	r3, [pc, #24]	; (80016c8 <SystemInit+0x64>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80016b2:	f000 f80d 	bl	80016d0 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80016b6:	4b03      	ldr	r3, [pc, #12]	; (80016c4 <SystemInit+0x60>)
 80016b8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016bc:	609a      	str	r2, [r3, #8]
#endif
}
 80016be:	bf00      	nop
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	e000ed00 	.word	0xe000ed00
 80016c8:	40023800 	.word	0x40023800
 80016cc:	24003010 	.word	0x24003010

080016d0 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80016d6:	2300      	movs	r3, #0
 80016d8:	607b      	str	r3, [r7, #4]
 80016da:	2300      	movs	r3, #0
 80016dc:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80016de:	4a36      	ldr	r2, [pc, #216]	; (80017b8 <SetSysClock+0xe8>)
 80016e0:	4b35      	ldr	r3, [pc, #212]	; (80017b8 <SetSysClock+0xe8>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016e8:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80016ea:	4b33      	ldr	r3, [pc, #204]	; (80017b8 <SetSysClock+0xe8>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f2:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	3301      	adds	r3, #1
 80016f8:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d103      	bne.n	8001708 <SetSysClock+0x38>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001706:	d1f0      	bne.n	80016ea <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001708:	4b2b      	ldr	r3, [pc, #172]	; (80017b8 <SetSysClock+0xe8>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001710:	2b00      	cmp	r3, #0
 8001712:	d002      	beq.n	800171a <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8001714:	2301      	movs	r3, #1
 8001716:	603b      	str	r3, [r7, #0]
 8001718:	e001      	b.n	800171e <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800171a:	2300      	movs	r3, #0
 800171c:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	2b01      	cmp	r3, #1
 8001722:	d142      	bne.n	80017aa <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001724:	4a24      	ldr	r2, [pc, #144]	; (80017b8 <SetSysClock+0xe8>)
 8001726:	4b24      	ldr	r3, [pc, #144]	; (80017b8 <SetSysClock+0xe8>)
 8001728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800172e:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8001730:	4a22      	ldr	r2, [pc, #136]	; (80017bc <SetSysClock+0xec>)
 8001732:	4b22      	ldr	r3, [pc, #136]	; (80017bc <SetSysClock+0xec>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800173a:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 800173c:	4a1e      	ldr	r2, [pc, #120]	; (80017b8 <SetSysClock+0xe8>)
 800173e:	4b1e      	ldr	r3, [pc, #120]	; (80017b8 <SetSysClock+0xe8>)
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8001744:	4a1c      	ldr	r2, [pc, #112]	; (80017b8 <SetSysClock+0xe8>)
 8001746:	4b1c      	ldr	r3, [pc, #112]	; (80017b8 <SetSysClock+0xe8>)
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800174e:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8001750:	4a19      	ldr	r2, [pc, #100]	; (80017b8 <SetSysClock+0xe8>)
 8001752:	4b19      	ldr	r3, [pc, #100]	; (80017b8 <SetSysClock+0xe8>)
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 800175a:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 800175c:	4b16      	ldr	r3, [pc, #88]	; (80017b8 <SetSysClock+0xe8>)
 800175e:	4a18      	ldr	r2, [pc, #96]	; (80017c0 <SetSysClock+0xf0>)
 8001760:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001762:	4a15      	ldr	r2, [pc, #84]	; (80017b8 <SetSysClock+0xe8>)
 8001764:	4b14      	ldr	r3, [pc, #80]	; (80017b8 <SetSysClock+0xe8>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800176c:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800176e:	bf00      	nop
 8001770:	4b11      	ldr	r3, [pc, #68]	; (80017b8 <SetSysClock+0xe8>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001778:	2b00      	cmp	r3, #0
 800177a:	d0f9      	beq.n	8001770 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 800177c:	4b11      	ldr	r3, [pc, #68]	; (80017c4 <SetSysClock+0xf4>)
 800177e:	f240 7205 	movw	r2, #1797	; 0x705
 8001782:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001784:	4a0c      	ldr	r2, [pc, #48]	; (80017b8 <SetSysClock+0xe8>)
 8001786:	4b0c      	ldr	r3, [pc, #48]	; (80017b8 <SetSysClock+0xe8>)
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	f023 0303 	bic.w	r3, r3, #3
 800178e:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8001790:	4a09      	ldr	r2, [pc, #36]	; (80017b8 <SetSysClock+0xe8>)
 8001792:	4b09      	ldr	r3, [pc, #36]	; (80017b8 <SetSysClock+0xe8>)
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	f043 0302 	orr.w	r3, r3, #2
 800179a:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 800179c:	bf00      	nop
 800179e:	4b06      	ldr	r3, [pc, #24]	; (80017b8 <SetSysClock+0xe8>)
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	f003 030c 	and.w	r3, r3, #12
 80017a6:	2b08      	cmp	r3, #8
 80017a8:	d1f9      	bne.n	800179e <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 80017aa:	bf00      	nop
 80017ac:	370c      	adds	r7, #12
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	40023800 	.word	0x40023800
 80017bc:	40007000 	.word	0x40007000
 80017c0:	07405419 	.word	0x07405419
 80017c4:	40023c00 	.word	0x40023c00

080017c8 <__libc_init_array>:
 80017c8:	b570      	push	{r4, r5, r6, lr}
 80017ca:	4e0d      	ldr	r6, [pc, #52]	; (8001800 <__libc_init_array+0x38>)
 80017cc:	4c0d      	ldr	r4, [pc, #52]	; (8001804 <__libc_init_array+0x3c>)
 80017ce:	1ba4      	subs	r4, r4, r6
 80017d0:	10a4      	asrs	r4, r4, #2
 80017d2:	2500      	movs	r5, #0
 80017d4:	42a5      	cmp	r5, r4
 80017d6:	d109      	bne.n	80017ec <__libc_init_array+0x24>
 80017d8:	4e0b      	ldr	r6, [pc, #44]	; (8001808 <__libc_init_array+0x40>)
 80017da:	4c0c      	ldr	r4, [pc, #48]	; (800180c <__libc_init_array+0x44>)
 80017dc:	f000 f818 	bl	8001810 <_init>
 80017e0:	1ba4      	subs	r4, r4, r6
 80017e2:	10a4      	asrs	r4, r4, #2
 80017e4:	2500      	movs	r5, #0
 80017e6:	42a5      	cmp	r5, r4
 80017e8:	d105      	bne.n	80017f6 <__libc_init_array+0x2e>
 80017ea:	bd70      	pop	{r4, r5, r6, pc}
 80017ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80017f0:	4798      	blx	r3
 80017f2:	3501      	adds	r5, #1
 80017f4:	e7ee      	b.n	80017d4 <__libc_init_array+0xc>
 80017f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80017fa:	4798      	blx	r3
 80017fc:	3501      	adds	r5, #1
 80017fe:	e7f2      	b.n	80017e6 <__libc_init_array+0x1e>
 8001800:	08001840 	.word	0x08001840
 8001804:	08001840 	.word	0x08001840
 8001808:	08001840 	.word	0x08001840
 800180c:	08001844 	.word	0x08001844

08001810 <_init>:
 8001810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001812:	bf00      	nop
 8001814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001816:	bc08      	pop	{r3}
 8001818:	469e      	mov	lr, r3
 800181a:	4770      	bx	lr

0800181c <_fini>:
 800181c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800181e:	bf00      	nop
 8001820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001822:	bc08      	pop	{r3}
 8001824:	469e      	mov	lr, r3
 8001826:	4770      	bx	lr
