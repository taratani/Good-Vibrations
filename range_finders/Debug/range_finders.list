
range_finders.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000506c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b8  080051fc  080051fc  000151fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080053b4  080053b4  000153b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080053bc  080053bc  000153bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080053c0  080053c0  000153c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000324  20000000  080053c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020324  2**0
                  CONTENTS
  8 .bss          000000c4  20000324  20000324  00020324  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200003e8  200003e8  00020324  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020324  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001fc45  00000000  00000000  00020354  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000034ac  00000000  00000000  0003ff99  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000e9f8  00000000  00000000  00043445  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c78  00000000  00000000  00051e40  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001078  00000000  00000000  00052ab8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   000078dd  00000000  00000000  00053b30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00005f96  00000000  00000000  0005b40d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  000613a3  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00002d24  00000000  00000000  00061420  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stab         0000009c  00000000  00000000  00064144  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stabstr      0000014d  00000000  00000000  000641e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000324 	.word	0x20000324
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080051e4 	.word	0x080051e4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000328 	.word	0x20000328
 80001cc:	080051e4 	.word	0x080051e4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b97a 	b.w	800057c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	468c      	mov	ip, r1
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	9e08      	ldr	r6, [sp, #32]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d151      	bne.n	8000354 <__udivmoddi4+0xb4>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d96d      	bls.n	8000392 <__udivmoddi4+0xf2>
 80002b6:	fab2 fe82 	clz	lr, r2
 80002ba:	f1be 0f00 	cmp.w	lr, #0
 80002be:	d00b      	beq.n	80002d8 <__udivmoddi4+0x38>
 80002c0:	f1ce 0c20 	rsb	ip, lr, #32
 80002c4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002c8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002cc:	fa02 f70e 	lsl.w	r7, r2, lr
 80002d0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002d4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002d8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002dc:	0c25      	lsrs	r5, r4, #16
 80002de:	fbbc f8fa 	udiv	r8, ip, sl
 80002e2:	fa1f f987 	uxth.w	r9, r7
 80002e6:	fb0a cc18 	mls	ip, sl, r8, ip
 80002ea:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002ee:	fb08 f309 	mul.w	r3, r8, r9
 80002f2:	42ab      	cmp	r3, r5
 80002f4:	d90a      	bls.n	800030c <__udivmoddi4+0x6c>
 80002f6:	19ed      	adds	r5, r5, r7
 80002f8:	f108 32ff 	add.w	r2, r8, #4294967295
 80002fc:	f080 8123 	bcs.w	8000546 <__udivmoddi4+0x2a6>
 8000300:	42ab      	cmp	r3, r5
 8000302:	f240 8120 	bls.w	8000546 <__udivmoddi4+0x2a6>
 8000306:	f1a8 0802 	sub.w	r8, r8, #2
 800030a:	443d      	add	r5, r7
 800030c:	1aed      	subs	r5, r5, r3
 800030e:	b2a4      	uxth	r4, r4
 8000310:	fbb5 f0fa 	udiv	r0, r5, sl
 8000314:	fb0a 5510 	mls	r5, sl, r0, r5
 8000318:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800031c:	fb00 f909 	mul.w	r9, r0, r9
 8000320:	45a1      	cmp	r9, r4
 8000322:	d909      	bls.n	8000338 <__udivmoddi4+0x98>
 8000324:	19e4      	adds	r4, r4, r7
 8000326:	f100 33ff 	add.w	r3, r0, #4294967295
 800032a:	f080 810a 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800032e:	45a1      	cmp	r9, r4
 8000330:	f240 8107 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000334:	3802      	subs	r0, #2
 8000336:	443c      	add	r4, r7
 8000338:	eba4 0409 	sub.w	r4, r4, r9
 800033c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000340:	2100      	movs	r1, #0
 8000342:	2e00      	cmp	r6, #0
 8000344:	d061      	beq.n	800040a <__udivmoddi4+0x16a>
 8000346:	fa24 f40e 	lsr.w	r4, r4, lr
 800034a:	2300      	movs	r3, #0
 800034c:	6034      	str	r4, [r6, #0]
 800034e:	6073      	str	r3, [r6, #4]
 8000350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000354:	428b      	cmp	r3, r1
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0xc8>
 8000358:	2e00      	cmp	r6, #0
 800035a:	d054      	beq.n	8000406 <__udivmoddi4+0x166>
 800035c:	2100      	movs	r1, #0
 800035e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000362:	4608      	mov	r0, r1
 8000364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000368:	fab3 f183 	clz	r1, r3
 800036c:	2900      	cmp	r1, #0
 800036e:	f040 808e 	bne.w	800048e <__udivmoddi4+0x1ee>
 8000372:	42ab      	cmp	r3, r5
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xdc>
 8000376:	4282      	cmp	r2, r0
 8000378:	f200 80fa 	bhi.w	8000570 <__udivmoddi4+0x2d0>
 800037c:	1a84      	subs	r4, r0, r2
 800037e:	eb65 0503 	sbc.w	r5, r5, r3
 8000382:	2001      	movs	r0, #1
 8000384:	46ac      	mov	ip, r5
 8000386:	2e00      	cmp	r6, #0
 8000388:	d03f      	beq.n	800040a <__udivmoddi4+0x16a>
 800038a:	e886 1010 	stmia.w	r6, {r4, ip}
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	b912      	cbnz	r2, 800039a <__udivmoddi4+0xfa>
 8000394:	2701      	movs	r7, #1
 8000396:	fbb7 f7f2 	udiv	r7, r7, r2
 800039a:	fab7 fe87 	clz	lr, r7
 800039e:	f1be 0f00 	cmp.w	lr, #0
 80003a2:	d134      	bne.n	800040e <__udivmoddi4+0x16e>
 80003a4:	1beb      	subs	r3, r5, r7
 80003a6:	0c3a      	lsrs	r2, r7, #16
 80003a8:	fa1f fc87 	uxth.w	ip, r7
 80003ac:	2101      	movs	r1, #1
 80003ae:	fbb3 f8f2 	udiv	r8, r3, r2
 80003b2:	0c25      	lsrs	r5, r4, #16
 80003b4:	fb02 3318 	mls	r3, r2, r8, r3
 80003b8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003bc:	fb0c f308 	mul.w	r3, ip, r8
 80003c0:	42ab      	cmp	r3, r5
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x134>
 80003c4:	19ed      	adds	r5, r5, r7
 80003c6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x132>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	f200 80d1 	bhi.w	8000574 <__udivmoddi4+0x2d4>
 80003d2:	4680      	mov	r8, r0
 80003d4:	1aed      	subs	r5, r5, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003dc:	fb02 5510 	mls	r5, r2, r0, r5
 80003e0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003e4:	fb0c fc00 	mul.w	ip, ip, r0
 80003e8:	45a4      	cmp	ip, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x15c>
 80003ec:	19e4      	adds	r4, r4, r7
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x15a>
 80003f4:	45a4      	cmp	ip, r4
 80003f6:	f200 80b8 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 040c 	sub.w	r4, r4, ip
 8000400:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000404:	e79d      	b.n	8000342 <__udivmoddi4+0xa2>
 8000406:	4631      	mov	r1, r6
 8000408:	4630      	mov	r0, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	f1ce 0420 	rsb	r4, lr, #32
 8000412:	fa05 f30e 	lsl.w	r3, r5, lr
 8000416:	fa07 f70e 	lsl.w	r7, r7, lr
 800041a:	fa20 f804 	lsr.w	r8, r0, r4
 800041e:	0c3a      	lsrs	r2, r7, #16
 8000420:	fa25 f404 	lsr.w	r4, r5, r4
 8000424:	ea48 0803 	orr.w	r8, r8, r3
 8000428:	fbb4 f1f2 	udiv	r1, r4, r2
 800042c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000430:	fb02 4411 	mls	r4, r2, r1, r4
 8000434:	fa1f fc87 	uxth.w	ip, r7
 8000438:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800043c:	fb01 f30c 	mul.w	r3, r1, ip
 8000440:	42ab      	cmp	r3, r5
 8000442:	fa00 f40e 	lsl.w	r4, r0, lr
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x1bc>
 8000448:	19ed      	adds	r5, r5, r7
 800044a:	f101 30ff 	add.w	r0, r1, #4294967295
 800044e:	f080 808a 	bcs.w	8000566 <__udivmoddi4+0x2c6>
 8000452:	42ab      	cmp	r3, r5
 8000454:	f240 8087 	bls.w	8000566 <__udivmoddi4+0x2c6>
 8000458:	3902      	subs	r1, #2
 800045a:	443d      	add	r5, r7
 800045c:	1aeb      	subs	r3, r5, r3
 800045e:	fa1f f588 	uxth.w	r5, r8
 8000462:	fbb3 f0f2 	udiv	r0, r3, r2
 8000466:	fb02 3310 	mls	r3, r2, r0, r3
 800046a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800046e:	fb00 f30c 	mul.w	r3, r0, ip
 8000472:	42ab      	cmp	r3, r5
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x1e6>
 8000476:	19ed      	adds	r5, r5, r7
 8000478:	f100 38ff 	add.w	r8, r0, #4294967295
 800047c:	d26f      	bcs.n	800055e <__udivmoddi4+0x2be>
 800047e:	42ab      	cmp	r3, r5
 8000480:	d96d      	bls.n	800055e <__udivmoddi4+0x2be>
 8000482:	3802      	subs	r0, #2
 8000484:	443d      	add	r5, r7
 8000486:	1aeb      	subs	r3, r5, r3
 8000488:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800048c:	e78f      	b.n	80003ae <__udivmoddi4+0x10e>
 800048e:	f1c1 0720 	rsb	r7, r1, #32
 8000492:	fa22 f807 	lsr.w	r8, r2, r7
 8000496:	408b      	lsls	r3, r1
 8000498:	fa05 f401 	lsl.w	r4, r5, r1
 800049c:	ea48 0303 	orr.w	r3, r8, r3
 80004a0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004a4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004a8:	40fd      	lsrs	r5, r7
 80004aa:	ea4e 0e04 	orr.w	lr, lr, r4
 80004ae:	fbb5 f9fc 	udiv	r9, r5, ip
 80004b2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004b6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ba:	fa1f f883 	uxth.w	r8, r3
 80004be:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004c2:	fb09 f408 	mul.w	r4, r9, r8
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	fa02 f201 	lsl.w	r2, r2, r1
 80004cc:	fa00 fa01 	lsl.w	sl, r0, r1
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x244>
 80004d2:	18ed      	adds	r5, r5, r3
 80004d4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d8:	d243      	bcs.n	8000562 <__udivmoddi4+0x2c2>
 80004da:	42ac      	cmp	r4, r5
 80004dc:	d941      	bls.n	8000562 <__udivmoddi4+0x2c2>
 80004de:	f1a9 0902 	sub.w	r9, r9, #2
 80004e2:	441d      	add	r5, r3
 80004e4:	1b2d      	subs	r5, r5, r4
 80004e6:	fa1f fe8e 	uxth.w	lr, lr
 80004ea:	fbb5 f0fc 	udiv	r0, r5, ip
 80004ee:	fb0c 5510 	mls	r5, ip, r0, r5
 80004f2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 80004f6:	fb00 f808 	mul.w	r8, r0, r8
 80004fa:	45a0      	cmp	r8, r4
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x26e>
 80004fe:	18e4      	adds	r4, r4, r3
 8000500:	f100 35ff 	add.w	r5, r0, #4294967295
 8000504:	d229      	bcs.n	800055a <__udivmoddi4+0x2ba>
 8000506:	45a0      	cmp	r8, r4
 8000508:	d927      	bls.n	800055a <__udivmoddi4+0x2ba>
 800050a:	3802      	subs	r0, #2
 800050c:	441c      	add	r4, r3
 800050e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000512:	eba4 0408 	sub.w	r4, r4, r8
 8000516:	fba0 8902 	umull	r8, r9, r0, r2
 800051a:	454c      	cmp	r4, r9
 800051c:	46c6      	mov	lr, r8
 800051e:	464d      	mov	r5, r9
 8000520:	d315      	bcc.n	800054e <__udivmoddi4+0x2ae>
 8000522:	d012      	beq.n	800054a <__udivmoddi4+0x2aa>
 8000524:	b156      	cbz	r6, 800053c <__udivmoddi4+0x29c>
 8000526:	ebba 030e 	subs.w	r3, sl, lr
 800052a:	eb64 0405 	sbc.w	r4, r4, r5
 800052e:	fa04 f707 	lsl.w	r7, r4, r7
 8000532:	40cb      	lsrs	r3, r1
 8000534:	431f      	orrs	r7, r3
 8000536:	40cc      	lsrs	r4, r1
 8000538:	6037      	str	r7, [r6, #0]
 800053a:	6074      	str	r4, [r6, #4]
 800053c:	2100      	movs	r1, #0
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	4618      	mov	r0, r3
 8000544:	e6f8      	b.n	8000338 <__udivmoddi4+0x98>
 8000546:	4690      	mov	r8, r2
 8000548:	e6e0      	b.n	800030c <__udivmoddi4+0x6c>
 800054a:	45c2      	cmp	sl, r8
 800054c:	d2ea      	bcs.n	8000524 <__udivmoddi4+0x284>
 800054e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000552:	eb69 0503 	sbc.w	r5, r9, r3
 8000556:	3801      	subs	r0, #1
 8000558:	e7e4      	b.n	8000524 <__udivmoddi4+0x284>
 800055a:	4628      	mov	r0, r5
 800055c:	e7d7      	b.n	800050e <__udivmoddi4+0x26e>
 800055e:	4640      	mov	r0, r8
 8000560:	e791      	b.n	8000486 <__udivmoddi4+0x1e6>
 8000562:	4681      	mov	r9, r0
 8000564:	e7be      	b.n	80004e4 <__udivmoddi4+0x244>
 8000566:	4601      	mov	r1, r0
 8000568:	e778      	b.n	800045c <__udivmoddi4+0x1bc>
 800056a:	3802      	subs	r0, #2
 800056c:	443c      	add	r4, r7
 800056e:	e745      	b.n	80003fc <__udivmoddi4+0x15c>
 8000570:	4608      	mov	r0, r1
 8000572:	e708      	b.n	8000386 <__udivmoddi4+0xe6>
 8000574:	f1a8 0802 	sub.w	r8, r8, #2
 8000578:	443d      	add	r5, r7
 800057a:	e72b      	b.n	80003d4 <__udivmoddi4+0x134>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000580:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000582:	4b08      	ldr	r3, [pc, #32]	; (80005a4 <HAL_InitTick+0x24>)
{
 8000584:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000586:	6818      	ldr	r0, [r3, #0]
 8000588:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800058c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000590:	f000 f894 	bl	80006bc <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000594:	2200      	movs	r2, #0
 8000596:	4621      	mov	r1, r4
 8000598:	f04f 30ff 	mov.w	r0, #4294967295
 800059c:	f000 f84e 	bl	800063c <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 80005a0:	2000      	movs	r0, #0
 80005a2:	bd10      	pop	{r4, pc}
 80005a4:	20000000 	.word	0x20000000

080005a8 <HAL_Init>:
{
 80005a8:	b508      	push	{r3, lr}
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005aa:	4b0b      	ldr	r3, [pc, #44]	; (80005d8 <HAL_Init+0x30>)
 80005ac:	681a      	ldr	r2, [r3, #0]
 80005ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80005b2:	601a      	str	r2, [r3, #0]
   __HAL_FLASH_DATA_CACHE_ENABLE();
 80005b4:	681a      	ldr	r2, [r3, #0]
 80005b6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80005ba:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005bc:	681a      	ldr	r2, [r3, #0]
 80005be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80005c2:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005c4:	2003      	movs	r0, #3
 80005c6:	f000 f827 	bl	8000618 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ca:	2000      	movs	r0, #0
 80005cc:	f7ff ffd8 	bl	8000580 <HAL_InitTick>
  HAL_MspInit();
 80005d0:	f001 fb87 	bl	8001ce2 <HAL_MspInit>
}
 80005d4:	2000      	movs	r0, #0
 80005d6:	bd08      	pop	{r3, pc}
 80005d8:	40023c00 	.word	0x40023c00

080005dc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80005dc:	4a02      	ldr	r2, [pc, #8]	; (80005e8 <HAL_IncTick+0xc>)
 80005de:	6813      	ldr	r3, [r2, #0]
 80005e0:	3301      	adds	r3, #1
 80005e2:	6013      	str	r3, [r2, #0]
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	2000034c 	.word	0x2000034c

080005ec <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005ec:	4b01      	ldr	r3, [pc, #4]	; (80005f4 <HAL_GetTick+0x8>)
 80005ee:	6818      	ldr	r0, [r3, #0]
}
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	2000034c 	.word	0x2000034c

080005f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80005f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80005fa:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 80005fc:	f7ff fff6 	bl	80005ec <HAL_GetTick>
  uint32_t wait = Delay;
 8000600:	9c01      	ldr	r4, [sp, #4]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000602:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8000604:	4605      	mov	r5, r0
  {
     wait++;
 8000606:	bf18      	it	ne
 8000608:	3401      	addne	r4, #1
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800060a:	f7ff ffef 	bl	80005ec <HAL_GetTick>
 800060e:	1b40      	subs	r0, r0, r5
 8000610:	42a0      	cmp	r0, r4
 8000612:	d3fa      	bcc.n	800060a <HAL_Delay+0x12>
  {
  }
}
 8000614:	b003      	add	sp, #12
 8000616:	bd30      	pop	{r4, r5, pc}

08000618 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000618:	4a07      	ldr	r2, [pc, #28]	; (8000638 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800061a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800061c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000620:	041b      	lsls	r3, r3, #16
 8000622:	0c1b      	lsrs	r3, r3, #16
 8000624:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000628:	0200      	lsls	r0, r0, #8
 800062a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800062e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000632:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000634:	60d3      	str	r3, [r2, #12]
 8000636:	4770      	bx	lr
 8000638:	e000ed00 	.word	0xe000ed00

0800063c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800063c:	4b17      	ldr	r3, [pc, #92]	; (800069c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	68dc      	ldr	r4, [r3, #12]
 8000642:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000646:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800064a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800064c:	2b04      	cmp	r3, #4
 800064e:	bf28      	it	cs
 8000650:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000652:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000654:	f04f 0501 	mov.w	r5, #1
 8000658:	fa05 f303 	lsl.w	r3, r5, r3
 800065c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000660:	bf8c      	ite	hi
 8000662:	3c03      	subhi	r4, #3
 8000664:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000666:	4019      	ands	r1, r3
 8000668:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800066a:	fa05 f404 	lsl.w	r4, r5, r4
 800066e:	3c01      	subs	r4, #1
 8000670:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000672:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000674:	ea42 0201 	orr.w	r2, r2, r1
 8000678:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800067c:	bfaf      	iteee	ge
 800067e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000682:	f000 000f 	andlt.w	r0, r0, #15
 8000686:	4b06      	ldrlt	r3, [pc, #24]	; (80006a0 <HAL_NVIC_SetPriority+0x64>)
 8000688:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800068a:	bfa5      	ittet	ge
 800068c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000690:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000692:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000694:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	bf00      	nop
 800069c:	e000ed00 	.word	0xe000ed00
 80006a0:	e000ed14 	.word	0xe000ed14

080006a4 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80006a4:	0942      	lsrs	r2, r0, #5
 80006a6:	2301      	movs	r3, #1
 80006a8:	f000 001f 	and.w	r0, r0, #31
 80006ac:	fa03 f000 	lsl.w	r0, r3, r0
 80006b0:	4b01      	ldr	r3, [pc, #4]	; (80006b8 <HAL_NVIC_EnableIRQ+0x14>)
 80006b2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80006b6:	4770      	bx	lr
 80006b8:	e000e100 	.word	0xe000e100

080006bc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006bc:	3801      	subs	r0, #1
 80006be:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006c2:	d20a      	bcs.n	80006da <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006c4:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c6:	4a07      	ldr	r2, [pc, #28]	; (80006e4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006c8:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ca:	21f0      	movs	r1, #240	; 0xf0
 80006cc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006d0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006d2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006d4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80006da:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80006dc:	4770      	bx	lr
 80006de:	bf00      	nop
 80006e0:	e000e010 	.word	0xe000e010
 80006e4:	e000ed00 	.word	0xe000ed00

080006e8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80006e8:	4b04      	ldr	r3, [pc, #16]	; (80006fc <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80006ea:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80006ec:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80006ee:	bf0c      	ite	eq
 80006f0:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80006f4:	f022 0204 	bicne.w	r2, r2, #4
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	4770      	bx	lr
 80006fc:	e000e010 	.word	0xe000e010

08000700 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000700:	4770      	bx	lr

08000702 <HAL_SYSTICK_IRQHandler>:
{
 8000702:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000704:	f7ff fffc 	bl	8000700 <HAL_SYSTICK_Callback>
 8000708:	bd08      	pop	{r3, pc}

0800070a <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800070a:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800070e:	2b02      	cmp	r3, #2
 8000710:	d003      	beq.n	800071a <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000712:	2380      	movs	r3, #128	; 0x80
 8000714:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8000716:	2001      	movs	r0, #1
 8000718:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800071a:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 800071c:	2305      	movs	r3, #5
 800071e:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8000722:	6813      	ldr	r3, [r2, #0]
 8000724:	f023 0301 	bic.w	r3, r3, #1
 8000728:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800072a:	2000      	movs	r0, #0
}
 800072c:	4770      	bx	lr
	...

08000730 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000734:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000736:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000738:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80008e8 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800073c:	4a68      	ldr	r2, [pc, #416]	; (80008e0 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800073e:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 80008ec <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000742:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000744:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000746:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800074a:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 800074c:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000750:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000754:	45b6      	cmp	lr, r6
 8000756:	f040 80ae 	bne.w	80008b6 <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800075a:	684c      	ldr	r4, [r1, #4]
 800075c:	f024 0710 	bic.w	r7, r4, #16
 8000760:	2f02      	cmp	r7, #2
 8000762:	d116      	bne.n	8000792 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8000764:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000768:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800076c:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000770:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000774:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000778:	f04f 0c0f 	mov.w	ip, #15
 800077c:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000780:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000784:	690d      	ldr	r5, [r1, #16]
 8000786:	fa05 f50b 	lsl.w	r5, r5, fp
 800078a:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 800078e:	f8ca 5020 	str.w	r5, [sl, #32]
 8000792:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000796:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000798:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800079c:	fa05 f50a 	lsl.w	r5, r5, sl
 80007a0:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80007a2:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80007a6:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80007aa:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007ae:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80007b0:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007b4:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 80007b6:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007ba:	d811      	bhi.n	80007e0 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 80007bc:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80007be:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 80007c2:	68cf      	ldr	r7, [r1, #12]
 80007c4:	fa07 fc0a 	lsl.w	ip, r7, sl
 80007c8:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 80007cc:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80007ce:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80007d0:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80007d4:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80007d8:	409f      	lsls	r7, r3
 80007da:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80007de:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80007e0:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80007e2:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80007e4:	688f      	ldr	r7, [r1, #8]
 80007e6:	fa07 f70a 	lsl.w	r7, r7, sl
 80007ea:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80007ec:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80007ee:	00e5      	lsls	r5, r4, #3
 80007f0:	d561      	bpl.n	80008b6 <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007f2:	f04f 0b00 	mov.w	fp, #0
 80007f6:	f8cd b00c 	str.w	fp, [sp, #12]
 80007fa:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007fe:	4d39      	ldr	r5, [pc, #228]	; (80008e4 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000800:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000804:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000808:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 800080c:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000810:	9703      	str	r7, [sp, #12]
 8000812:	9f03      	ldr	r7, [sp, #12]
 8000814:	f023 0703 	bic.w	r7, r3, #3
 8000818:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800081c:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000820:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000824:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000828:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800082c:	f04f 0e0f 	mov.w	lr, #15
 8000830:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000834:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000836:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800083a:	d043      	beq.n	80008c4 <HAL_GPIO_Init+0x194>
 800083c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000840:	42a8      	cmp	r0, r5
 8000842:	d041      	beq.n	80008c8 <HAL_GPIO_Init+0x198>
 8000844:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000848:	42a8      	cmp	r0, r5
 800084a:	d03f      	beq.n	80008cc <HAL_GPIO_Init+0x19c>
 800084c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000850:	42a8      	cmp	r0, r5
 8000852:	d03d      	beq.n	80008d0 <HAL_GPIO_Init+0x1a0>
 8000854:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000858:	42a8      	cmp	r0, r5
 800085a:	d03b      	beq.n	80008d4 <HAL_GPIO_Init+0x1a4>
 800085c:	4548      	cmp	r0, r9
 800085e:	d03b      	beq.n	80008d8 <HAL_GPIO_Init+0x1a8>
 8000860:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000864:	42a8      	cmp	r0, r5
 8000866:	d039      	beq.n	80008dc <HAL_GPIO_Init+0x1ac>
 8000868:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800086c:	42a8      	cmp	r0, r5
 800086e:	bf14      	ite	ne
 8000870:	2508      	movne	r5, #8
 8000872:	2507      	moveq	r5, #7
 8000874:	fa05 f50c 	lsl.w	r5, r5, ip
 8000878:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 800087c:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 800087e:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000880:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000882:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000886:	bf0c      	ite	eq
 8000888:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800088a:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 800088c:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 800088e:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000890:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000894:	bf0c      	ite	eq
 8000896:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000898:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 800089a:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800089c:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800089e:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80008a2:	bf0c      	ite	eq
 80008a4:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80008a6:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 80008a8:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 80008aa:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80008ac:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80008ae:	bf54      	ite	pl
 80008b0:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 80008b2:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 80008b4:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80008b6:	3301      	adds	r3, #1
 80008b8:	2b10      	cmp	r3, #16
 80008ba:	f47f af44 	bne.w	8000746 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80008be:	b005      	add	sp, #20
 80008c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80008c4:	465d      	mov	r5, fp
 80008c6:	e7d5      	b.n	8000874 <HAL_GPIO_Init+0x144>
 80008c8:	2501      	movs	r5, #1
 80008ca:	e7d3      	b.n	8000874 <HAL_GPIO_Init+0x144>
 80008cc:	2502      	movs	r5, #2
 80008ce:	e7d1      	b.n	8000874 <HAL_GPIO_Init+0x144>
 80008d0:	2503      	movs	r5, #3
 80008d2:	e7cf      	b.n	8000874 <HAL_GPIO_Init+0x144>
 80008d4:	2504      	movs	r5, #4
 80008d6:	e7cd      	b.n	8000874 <HAL_GPIO_Init+0x144>
 80008d8:	2505      	movs	r5, #5
 80008da:	e7cb      	b.n	8000874 <HAL_GPIO_Init+0x144>
 80008dc:	2506      	movs	r5, #6
 80008de:	e7c9      	b.n	8000874 <HAL_GPIO_Init+0x144>
 80008e0:	40013c00 	.word	0x40013c00
 80008e4:	40020000 	.word	0x40020000
 80008e8:	40023800 	.word	0x40023800
 80008ec:	40021400 	.word	0x40021400

080008f0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80008f0:	b10a      	cbz	r2, 80008f6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80008f2:	6181      	str	r1, [r0, #24]
 80008f4:	4770      	bx	lr
 80008f6:	0409      	lsls	r1, r1, #16
 80008f8:	e7fb      	b.n	80008f2 <HAL_GPIO_WritePin+0x2>

080008fa <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80008fa:	6802      	ldr	r2, [r0, #0]
 80008fc:	6953      	ldr	r3, [r2, #20]
 80008fe:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8000902:	d00d      	beq.n	8000920 <I2C_IsAcknowledgeFailed+0x26>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000904:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8000908:	6153      	str	r3, [r2, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800090a:	2304      	movs	r3, #4
 800090c:	6403      	str	r3, [r0, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State= HAL_I2C_STATE_READY;
 800090e:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 8000910:	2300      	movs	r3, #0
 8000912:	6303      	str	r3, [r0, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000914:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    hi2c->State= HAL_I2C_STATE_READY;
 8000918:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

    return HAL_ERROR;
 800091c:	2001      	movs	r0, #1
 800091e:	4770      	bx	lr
  }
  return HAL_OK;
 8000920:	4618      	mov	r0, r3
}
 8000922:	4770      	bx	lr

08000924 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8000924:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000928:	4604      	mov	r4, r0
 800092a:	4617      	mov	r7, r2
 800092c:	4699      	mov	r9, r3
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800092e:	f3c1 4807 	ubfx	r8, r1, #16, #8
 8000932:	b28e      	uxth	r6, r1
 8000934:	6825      	ldr	r5, [r4, #0]
 8000936:	f1b8 0f01 	cmp.w	r8, #1
 800093a:	bf0c      	ite	eq
 800093c:	696b      	ldreq	r3, [r5, #20]
 800093e:	69ab      	ldrne	r3, [r5, #24]
 8000940:	ea36 0303 	bics.w	r3, r6, r3
 8000944:	bf14      	ite	ne
 8000946:	2001      	movne	r0, #1
 8000948:	2000      	moveq	r0, #0
 800094a:	b908      	cbnz	r0, 8000950 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 800094c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000950:	696b      	ldr	r3, [r5, #20]
 8000952:	055a      	lsls	r2, r3, #21
 8000954:	d512      	bpl.n	800097c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x58>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000956:	682b      	ldr	r3, [r5, #0]
 8000958:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800095c:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800095e:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8000962:	616b      	str	r3, [r5, #20]
      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8000964:	2304      	movs	r3, #4
 8000966:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 8000968:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 800096a:	2300      	movs	r3, #0
 800096c:	6323      	str	r3, [r4, #48]	; 0x30
      __HAL_UNLOCK(hi2c);
 800096e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->State= HAL_I2C_STATE_READY;
 8000972:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 8000976:	2001      	movs	r0, #1
 8000978:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 800097c:	1c7b      	adds	r3, r7, #1
 800097e:	d0d9      	beq.n	8000934 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000980:	b94f      	cbnz	r7, 8000996 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x72>
        hi2c->PreviousState = I2C_STATE_NONE;
 8000982:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8000984:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8000986:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8000988:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 800098c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        return HAL_TIMEOUT;
 8000990:	2003      	movs	r0, #3
 8000992:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000996:	f7ff fe29 	bl	80005ec <HAL_GetTick>
 800099a:	eba0 0009 	sub.w	r0, r0, r9
 800099e:	4287      	cmp	r7, r0
 80009a0:	d2c8      	bcs.n	8000934 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 80009a2:	e7ee      	b.n	8000982 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>

080009a4 <I2C_WaitOnFlagUntilTimeout>:
{
 80009a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80009a8:	9e08      	ldr	r6, [sp, #32]
 80009aa:	4604      	mov	r4, r0
 80009ac:	4690      	mov	r8, r2
 80009ae:	461f      	mov	r7, r3
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 80009b0:	f3c1 4907 	ubfx	r9, r1, #16, #8
 80009b4:	b28d      	uxth	r5, r1
 80009b6:	6823      	ldr	r3, [r4, #0]
 80009b8:	f1b9 0f01 	cmp.w	r9, #1
 80009bc:	bf0c      	ite	eq
 80009be:	695b      	ldreq	r3, [r3, #20]
 80009c0:	699b      	ldrne	r3, [r3, #24]
 80009c2:	ea35 0303 	bics.w	r3, r5, r3
 80009c6:	bf0c      	ite	eq
 80009c8:	2301      	moveq	r3, #1
 80009ca:	2300      	movne	r3, #0
 80009cc:	4543      	cmp	r3, r8
 80009ce:	d002      	beq.n	80009d6 <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 80009d0:	2000      	movs	r0, #0
}
 80009d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 80009d6:	1c7b      	adds	r3, r7, #1
 80009d8:	d0ed      	beq.n	80009b6 <I2C_WaitOnFlagUntilTimeout+0x12>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80009da:	b95f      	cbnz	r7, 80009f4 <I2C_WaitOnFlagUntilTimeout+0x50>
        hi2c->PreviousState = I2C_STATE_NONE;
 80009dc:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 80009de:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 80009e0:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 80009e2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 80009e6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 80009ea:	2003      	movs	r0, #3
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80009ec:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80009f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80009f4:	f7ff fdfa 	bl	80005ec <HAL_GetTick>
 80009f8:	1b80      	subs	r0, r0, r6
 80009fa:	4287      	cmp	r7, r0
 80009fc:	d2db      	bcs.n	80009b6 <I2C_WaitOnFlagUntilTimeout+0x12>
 80009fe:	e7ed      	b.n	80009dc <I2C_WaitOnFlagUntilTimeout+0x38>

08000a00 <I2C_WaitOnTXEFlagUntilTimeout>:
{    
 8000a00:	b570      	push	{r4, r5, r6, lr}
 8000a02:	4604      	mov	r4, r0
 8000a04:	460d      	mov	r5, r1
 8000a06:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000a08:	6823      	ldr	r3, [r4, #0]
 8000a0a:	695b      	ldr	r3, [r3, #20]
 8000a0c:	061b      	lsls	r3, r3, #24
 8000a0e:	d501      	bpl.n	8000a14 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;      
 8000a10:	2000      	movs	r0, #0
 8000a12:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8000a14:	4620      	mov	r0, r4
 8000a16:	f7ff ff70 	bl	80008fa <I2C_IsAcknowledgeFailed>
 8000a1a:	b9a8      	cbnz	r0, 8000a48 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 8000a1c:	1c6a      	adds	r2, r5, #1
 8000a1e:	d0f3      	beq.n	8000a08 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000a20:	b965      	cbnz	r5, 8000a3c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000a22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000a24:	f043 0320 	orr.w	r3, r3, #32
 8000a28:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 8000a2a:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8000a30:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8000a34:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8000a38:	2003      	movs	r0, #3
 8000a3a:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000a3c:	f7ff fdd6 	bl	80005ec <HAL_GetTick>
 8000a40:	1b80      	subs	r0, r0, r6
 8000a42:	4285      	cmp	r5, r0
 8000a44:	d2e0      	bcs.n	8000a08 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
 8000a46:	e7ec      	b.n	8000a22 <I2C_WaitOnTXEFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8000a48:	2001      	movs	r0, #1
}
 8000a4a:	bd70      	pop	{r4, r5, r6, pc}

08000a4c <I2C_RequestMemoryWrite>:
{
 8000a4c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8000a50:	4615      	mov	r5, r2
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8000a52:	6802      	ldr	r2, [r0, #0]
{
 8000a54:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8000a56:	4698      	mov	r8, r3
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8000a58:	6813      	ldr	r3, [r2, #0]
 8000a5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a5e:	6013      	str	r3, [r2, #0]
{
 8000a60:	460f      	mov	r7, r1
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000a62:	9600      	str	r6, [sp, #0]
 8000a64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000a66:	2200      	movs	r2, #0
 8000a68:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 8000a6c:	4604      	mov	r4, r0
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000a6e:	f7ff ff99 	bl	80009a4 <I2C_WaitOnFlagUntilTimeout>
 8000a72:	b968      	cbnz	r0, 8000a90 <I2C_RequestMemoryWrite+0x44>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000a74:	6823      	ldr	r3, [r4, #0]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000a76:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8000a78:	491c      	ldr	r1, [pc, #112]	; (8000aec <I2C_RequestMemoryWrite+0xa0>)
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000a7a:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 8000a7e:	611f      	str	r7, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000a80:	4620      	mov	r0, r4
 8000a82:	4633      	mov	r3, r6
 8000a84:	f7ff ff4e 	bl	8000924 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000a88:	b130      	cbz	r0, 8000a98 <I2C_RequestMemoryWrite+0x4c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000a8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000a8c:	2b04      	cmp	r3, #4
 8000a8e:	d018      	beq.n	8000ac2 <I2C_RequestMemoryWrite+0x76>
      return HAL_TIMEOUT;
 8000a90:	2003      	movs	r0, #3
}
 8000a92:	b004      	add	sp, #16
 8000a94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000a98:	6823      	ldr	r3, [r4, #0]
 8000a9a:	9003      	str	r0, [sp, #12]
 8000a9c:	695a      	ldr	r2, [r3, #20]
 8000a9e:	9203      	str	r2, [sp, #12]
 8000aa0:	699b      	ldr	r3, [r3, #24]
 8000aa2:	9303      	str	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000aa4:	4632      	mov	r2, r6
 8000aa6:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000aa8:	9b03      	ldr	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000aaa:	4620      	mov	r0, r4
 8000aac:	f7ff ffa8 	bl	8000a00 <I2C_WaitOnTXEFlagUntilTimeout>
 8000ab0:	b148      	cbz	r0, 8000ac6 <I2C_RequestMemoryWrite+0x7a>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000ab2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000ab4:	2b04      	cmp	r3, #4
 8000ab6:	d1eb      	bne.n	8000a90 <I2C_RequestMemoryWrite+0x44>
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000ab8:	6822      	ldr	r2, [r4, #0]
 8000aba:	6813      	ldr	r3, [r2, #0]
 8000abc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ac0:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 8000ac2:	2001      	movs	r0, #1
 8000ac4:	e7e5      	b.n	8000a92 <I2C_RequestMemoryWrite+0x46>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8000ac6:	f1b8 0f01 	cmp.w	r8, #1
 8000aca:	6823      	ldr	r3, [r4, #0]
 8000acc:	d102      	bne.n	8000ad4 <I2C_RequestMemoryWrite+0x88>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8000ace:	b2ed      	uxtb	r5, r5
 8000ad0:	611d      	str	r5, [r3, #16]
 8000ad2:	e7de      	b.n	8000a92 <I2C_RequestMemoryWrite+0x46>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8000ad4:	0a2a      	lsrs	r2, r5, #8
 8000ad6:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000ad8:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000ada:	4632      	mov	r2, r6
 8000adc:	4620      	mov	r0, r4
 8000ade:	f7ff ff8f 	bl	8000a00 <I2C_WaitOnTXEFlagUntilTimeout>
 8000ae2:	2800      	cmp	r0, #0
 8000ae4:	d1e5      	bne.n	8000ab2 <I2C_RequestMemoryWrite+0x66>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8000ae6:	6823      	ldr	r3, [r4, #0]
 8000ae8:	e7f1      	b.n	8000ace <I2C_RequestMemoryWrite+0x82>
 8000aea:	bf00      	nop
 8000aec:	00010002 	.word	0x00010002

08000af0 <I2C_RequestMemoryRead>:
{
 8000af0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8000af4:	4698      	mov	r8, r3
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8000af6:	6803      	ldr	r3, [r0, #0]
{
 8000af8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8000afa:	4616      	mov	r6, r2
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8000afc:	681a      	ldr	r2, [r3, #0]
 8000afe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000b02:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8000b04:	681a      	ldr	r2, [r3, #0]
 8000b06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000b0a:	601a      	str	r2, [r3, #0]
{
 8000b0c:	460f      	mov	r7, r1
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000b0e:	9500      	str	r5, [sp, #0]
 8000b10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000b12:	2200      	movs	r2, #0
 8000b14:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 8000b18:	4604      	mov	r4, r0
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000b1a:	f7ff ff43 	bl	80009a4 <I2C_WaitOnFlagUntilTimeout>
 8000b1e:	b980      	cbnz	r0, 8000b42 <I2C_RequestMemoryRead+0x52>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000b20:	6823      	ldr	r3, [r4, #0]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000b22:	492f      	ldr	r1, [pc, #188]	; (8000be0 <I2C_RequestMemoryRead+0xf0>)
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000b24:	b2ff      	uxtb	r7, r7
 8000b26:	f007 02fe 	and.w	r2, r7, #254	; 0xfe
 8000b2a:	611a      	str	r2, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000b2c:	4620      	mov	r0, r4
 8000b2e:	462b      	mov	r3, r5
 8000b30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8000b32:	f7ff fef7 	bl	8000924 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000b36:	b140      	cbz	r0, 8000b4a <I2C_RequestMemoryRead+0x5a>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000b38:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000b3a:	2b04      	cmp	r3, #4
 8000b3c:	d101      	bne.n	8000b42 <I2C_RequestMemoryRead+0x52>
      return HAL_ERROR;
 8000b3e:	2001      	movs	r0, #1
 8000b40:	e000      	b.n	8000b44 <I2C_RequestMemoryRead+0x54>
      return HAL_TIMEOUT;
 8000b42:	2003      	movs	r0, #3
}
 8000b44:	b004      	add	sp, #16
 8000b46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000b4a:	6823      	ldr	r3, [r4, #0]
 8000b4c:	9003      	str	r0, [sp, #12]
 8000b4e:	695a      	ldr	r2, [r3, #20]
 8000b50:	9203      	str	r2, [sp, #12]
 8000b52:	699b      	ldr	r3, [r3, #24]
 8000b54:	9303      	str	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000b56:	462a      	mov	r2, r5
 8000b58:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000b5a:	9b03      	ldr	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000b5c:	4620      	mov	r0, r4
 8000b5e:	f7ff ff4f 	bl	8000a00 <I2C_WaitOnTXEFlagUntilTimeout>
 8000b62:	b140      	cbz	r0, 8000b76 <I2C_RequestMemoryRead+0x86>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000b64:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000b66:	2b04      	cmp	r3, #4
 8000b68:	d1eb      	bne.n	8000b42 <I2C_RequestMemoryRead+0x52>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000b6a:	6822      	ldr	r2, [r4, #0]
 8000b6c:	6813      	ldr	r3, [r2, #0]
 8000b6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b72:	6013      	str	r3, [r2, #0]
 8000b74:	e7e3      	b.n	8000b3e <I2C_RequestMemoryRead+0x4e>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8000b76:	f1b8 0f01 	cmp.w	r8, #1
 8000b7a:	6823      	ldr	r3, [r4, #0]
 8000b7c:	d124      	bne.n	8000bc8 <I2C_RequestMemoryRead+0xd8>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8000b7e:	b2f6      	uxtb	r6, r6
 8000b80:	611e      	str	r6, [r3, #16]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000b82:	462a      	mov	r2, r5
 8000b84:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000b86:	4620      	mov	r0, r4
 8000b88:	f7ff ff3a 	bl	8000a00 <I2C_WaitOnTXEFlagUntilTimeout>
 8000b8c:	4602      	mov	r2, r0
 8000b8e:	2800      	cmp	r0, #0
 8000b90:	d1e8      	bne.n	8000b64 <I2C_RequestMemoryRead+0x74>
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8000b92:	6821      	ldr	r1, [r4, #0]
 8000b94:	680b      	ldr	r3, [r1, #0]
 8000b96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b9a:	600b      	str	r3, [r1, #0]
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000b9c:	4620      	mov	r0, r4
 8000b9e:	9500      	str	r5, [sp, #0]
 8000ba0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000ba2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000ba6:	f7ff fefd 	bl	80009a4 <I2C_WaitOnFlagUntilTimeout>
 8000baa:	2800      	cmp	r0, #0
 8000bac:	d1c9      	bne.n	8000b42 <I2C_RequestMemoryRead+0x52>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8000bae:	6823      	ldr	r3, [r4, #0]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000bb0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8000bb2:	490b      	ldr	r1, [pc, #44]	; (8000be0 <I2C_RequestMemoryRead+0xf0>)
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8000bb4:	f047 0701 	orr.w	r7, r7, #1
 8000bb8:	611f      	str	r7, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000bba:	4620      	mov	r0, r4
 8000bbc:	462b      	mov	r3, r5
 8000bbe:	f7ff feb1 	bl	8000924 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000bc2:	2800      	cmp	r0, #0
 8000bc4:	d1b8      	bne.n	8000b38 <I2C_RequestMemoryRead+0x48>
 8000bc6:	e7bd      	b.n	8000b44 <I2C_RequestMemoryRead+0x54>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8000bc8:	0a32      	lsrs	r2, r6, #8
 8000bca:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000bcc:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000bce:	462a      	mov	r2, r5
 8000bd0:	4620      	mov	r0, r4
 8000bd2:	f7ff ff15 	bl	8000a00 <I2C_WaitOnTXEFlagUntilTimeout>
 8000bd6:	2800      	cmp	r0, #0
 8000bd8:	d1c4      	bne.n	8000b64 <I2C_RequestMemoryRead+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8000bda:	6823      	ldr	r3, [r4, #0]
 8000bdc:	e7cf      	b.n	8000b7e <I2C_RequestMemoryRead+0x8e>
 8000bde:	bf00      	nop
 8000be0:	00010002 	.word	0x00010002

08000be4 <I2C_WaitOnRXNEFlagUntilTimeout>:
{  
 8000be4:	b570      	push	{r4, r5, r6, lr}
 8000be6:	4604      	mov	r4, r0
 8000be8:	460d      	mov	r5, r1
 8000bea:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8000bec:	6820      	ldr	r0, [r4, #0]
 8000bee:	6943      	ldr	r3, [r0, #20]
 8000bf0:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8000bf4:	d001      	beq.n	8000bfa <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 8000bf6:	2000      	movs	r0, #0
}
 8000bf8:	bd70      	pop	{r4, r5, r6, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8000bfa:	6942      	ldr	r2, [r0, #20]
 8000bfc:	06d2      	lsls	r2, r2, #27
 8000bfe:	d50b      	bpl.n	8000c18 <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000c00:	f06f 0210 	mvn.w	r2, #16
 8000c04:	6142      	str	r2, [r0, #20]
      hi2c->State= HAL_I2C_STATE_READY;
 8000c06:	2220      	movs	r2, #32
      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000c08:	6423      	str	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8000c0a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->PreviousState = I2C_STATE_NONE;
 8000c0e:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8000c10:	2001      	movs	r0, #1
      hi2c->State= HAL_I2C_STATE_READY;
 8000c12:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 8000c16:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000c18:	b95d      	cbnz	r5, 8000c32 <I2C_WaitOnRXNEFlagUntilTimeout+0x4e>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000c1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000c1c:	f043 0320 	orr.w	r3, r3, #32
 8000c20:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 8000c22:	2320      	movs	r3, #32
 8000c24:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      __HAL_UNLOCK(hi2c);
 8000c28:	2300      	movs	r3, #0
 8000c2a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8000c2e:	2003      	movs	r0, #3
 8000c30:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000c32:	f7ff fcdb 	bl	80005ec <HAL_GetTick>
 8000c36:	1b80      	subs	r0, r0, r6
 8000c38:	4285      	cmp	r5, r0
 8000c3a:	d2d7      	bcs.n	8000bec <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
 8000c3c:	e7ed      	b.n	8000c1a <I2C_WaitOnRXNEFlagUntilTimeout+0x36>

08000c3e <I2C_WaitOnBTFFlagUntilTimeout>:
{  
 8000c3e:	b570      	push	{r4, r5, r6, lr}
 8000c40:	4604      	mov	r4, r0
 8000c42:	460d      	mov	r5, r1
 8000c44:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8000c46:	6823      	ldr	r3, [r4, #0]
 8000c48:	695b      	ldr	r3, [r3, #20]
 8000c4a:	075b      	lsls	r3, r3, #29
 8000c4c:	d501      	bpl.n	8000c52 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8000c4e:	2000      	movs	r0, #0
 8000c50:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8000c52:	4620      	mov	r0, r4
 8000c54:	f7ff fe51 	bl	80008fa <I2C_IsAcknowledgeFailed>
 8000c58:	b9a8      	cbnz	r0, 8000c86 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 8000c5a:	1c6a      	adds	r2, r5, #1
 8000c5c:	d0f3      	beq.n	8000c46 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000c5e:	b965      	cbnz	r5, 8000c7a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000c60:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000c62:	f043 0320 	orr.w	r3, r3, #32
 8000c66:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 8000c68:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8000c6e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8000c72:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8000c76:	2003      	movs	r0, #3
 8000c78:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000c7a:	f7ff fcb7 	bl	80005ec <HAL_GetTick>
 8000c7e:	1b80      	subs	r0, r0, r6
 8000c80:	4285      	cmp	r5, r0
 8000c82:	d2e0      	bcs.n	8000c46 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
 8000c84:	e7ec      	b.n	8000c60 <I2C_WaitOnBTFFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8000c86:	2001      	movs	r0, #1
}
 8000c88:	bd70      	pop	{r4, r5, r6, pc}
	...

08000c8c <HAL_I2C_Init>:
{
 8000c8c:	b570      	push	{r4, r5, r6, lr}
  if(hi2c == NULL)
 8000c8e:	4604      	mov	r4, r0
 8000c90:	2800      	cmp	r0, #0
 8000c92:	d062      	beq.n	8000d5a <HAL_I2C_Init+0xce>
  if(hi2c->State == HAL_I2C_STATE_RESET)
 8000c94:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000c98:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000c9c:	b91b      	cbnz	r3, 8000ca6 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8000c9e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8000ca2:	f000 ff11 	bl	8001ac8 <HAL_I2C_MspInit>
  __HAL_I2C_DISABLE(hi2c);
 8000ca6:	6822      	ldr	r2, [r4, #0]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000ca8:	4e2d      	ldr	r6, [pc, #180]	; (8000d60 <HAL_I2C_Init+0xd4>)
  freqrange = I2C_FREQRANGE(pclk1);
 8000caa:	4d2e      	ldr	r5, [pc, #184]	; (8000d64 <HAL_I2C_Init+0xd8>)
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000cac:	2324      	movs	r3, #36	; 0x24
 8000cae:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8000cb2:	6813      	ldr	r3, [r2, #0]
 8000cb4:	f023 0301 	bic.w	r3, r3, #1
 8000cb8:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000cba:	f000 fc3f 	bl	800153c <HAL_RCC_GetPCLK1Freq>
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000cbe:	6863      	ldr	r3, [r4, #4]
  hi2c->Instance->CR2 = freqrange;
 8000cc0:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8000cc2:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000cc6:	42b3      	cmp	r3, r6
 8000cc8:	bf84      	itt	hi
 8000cca:	f44f 7196 	movhi.w	r1, #300	; 0x12c
 8000cce:	4369      	mulhi	r1, r5
  hi2c->Instance->CR2 = freqrange;
 8000cd0:	6055      	str	r5, [r2, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000cd2:	bf91      	iteee	ls
 8000cd4:	1c69      	addls	r1, r5, #1
 8000cd6:	f44f 757a 	movhi.w	r5, #1000	; 0x3e8
 8000cda:	fbb1 f1f5 	udivhi	r1, r1, r5
 8000cde:	3101      	addhi	r1, #1
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000ce0:	42b3      	cmp	r3, r6
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000ce2:	6211      	str	r1, [r2, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000ce4:	d821      	bhi.n	8000d2a <HAL_I2C_Init+0x9e>
 8000ce6:	005b      	lsls	r3, r3, #1
 8000ce8:	fbb0 f0f3 	udiv	r0, r0, r3
 8000cec:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8000cf0:	2b03      	cmp	r3, #3
 8000cf2:	bf98      	it	ls
 8000cf4:	2004      	movls	r0, #4
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000cf6:	6a21      	ldr	r1, [r4, #32]
 8000cf8:	69e3      	ldr	r3, [r4, #28]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000cfa:	61d0      	str	r0, [r2, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000cfc:	430b      	orrs	r3, r1
 8000cfe:	6013      	str	r3, [r2, #0]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8000d00:	68e1      	ldr	r1, [r4, #12]
 8000d02:	6923      	ldr	r3, [r4, #16]
 8000d04:	430b      	orrs	r3, r1
 8000d06:	6093      	str	r3, [r2, #8]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8000d08:	69a1      	ldr	r1, [r4, #24]
 8000d0a:	6963      	ldr	r3, [r4, #20]
 8000d0c:	430b      	orrs	r3, r1
 8000d0e:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8000d10:	6813      	ldr	r3, [r2, #0]
 8000d12:	f043 0301 	orr.w	r3, r3, #1
 8000d16:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000d18:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8000d1a:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000d1c:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000d1e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000d22:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000d24:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8000d28:	bd70      	pop	{r4, r5, r6, pc}
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000d2a:	68a1      	ldr	r1, [r4, #8]
 8000d2c:	b949      	cbnz	r1, 8000d42 <HAL_I2C_Init+0xb6>
 8000d2e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000d32:	fbb0 f0f3 	udiv	r0, r0, r3
 8000d36:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8000d3a:	b163      	cbz	r3, 8000d56 <HAL_I2C_Init+0xca>
 8000d3c:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8000d40:	e7d9      	b.n	8000cf6 <HAL_I2C_Init+0x6a>
 8000d42:	2119      	movs	r1, #25
 8000d44:	434b      	muls	r3, r1
 8000d46:	fbb0 f0f3 	udiv	r0, r0, r3
 8000d4a:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8000d4e:	b113      	cbz	r3, 8000d56 <HAL_I2C_Init+0xca>
 8000d50:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 8000d54:	e7cf      	b.n	8000cf6 <HAL_I2C_Init+0x6a>
 8000d56:	2001      	movs	r0, #1
 8000d58:	e7cd      	b.n	8000cf6 <HAL_I2C_Init+0x6a>
    return HAL_ERROR;
 8000d5a:	2001      	movs	r0, #1
}
 8000d5c:	bd70      	pop	{r4, r5, r6, pc}
 8000d5e:	bf00      	nop
 8000d60:	000186a0 	.word	0x000186a0
 8000d64:	000f4240 	.word	0x000f4240

08000d68 <HAL_I2C_Mem_Write>:
{
 8000d68:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8000d6c:	4604      	mov	r4, r0
 8000d6e:	469a      	mov	sl, r3
 8000d70:	4688      	mov	r8, r1
 8000d72:	4691      	mov	r9, r2
 8000d74:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  tickstart = HAL_GetTick();
 8000d76:	f7ff fc39 	bl	80005ec <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8000d7a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8000d7e:	2b20      	cmp	r3, #32
  tickstart = HAL_GetTick();
 8000d80:	4605      	mov	r5, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8000d82:	d003      	beq.n	8000d8c <HAL_I2C_Mem_Write+0x24>
    return HAL_BUSY;
 8000d84:	2002      	movs	r0, #2
}
 8000d86:	b002      	add	sp, #8
 8000d88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000d8c:	9000      	str	r0, [sp, #0]
 8000d8e:	2319      	movs	r3, #25
 8000d90:	2201      	movs	r2, #1
 8000d92:	493e      	ldr	r1, [pc, #248]	; (8000e8c <HAL_I2C_Mem_Write+0x124>)
 8000d94:	4620      	mov	r0, r4
 8000d96:	f7ff fe05 	bl	80009a4 <I2C_WaitOnFlagUntilTimeout>
 8000d9a:	2800      	cmp	r0, #0
 8000d9c:	d1f2      	bne.n	8000d84 <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 8000d9e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8000da2:	2b01      	cmp	r3, #1
 8000da4:	d0ee      	beq.n	8000d84 <HAL_I2C_Mem_Write+0x1c>
 8000da6:	2301      	movs	r3, #1
 8000da8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000dac:	6823      	ldr	r3, [r4, #0]
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8000db2:	bf5e      	ittt	pl
 8000db4:	681a      	ldrpl	r2, [r3, #0]
 8000db6:	f042 0201 	orrpl.w	r2, r2, #1
 8000dba:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000dc2:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000dc4:	2321      	movs	r3, #33	; 0x21
 8000dc6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000dca:	2340      	movs	r3, #64	; 0x40
 8000dcc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->pBuffPtr    = pData;
 8000dd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000dd2:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000dd4:	2700      	movs	r7, #0
    hi2c->XferCount   = Size;
 8000dd6:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000dda:	6427      	str	r7, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8000ddc:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000dde:	4b2c      	ldr	r3, [pc, #176]	; (8000e90 <HAL_I2C_Mem_Write+0x128>)
 8000de0:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8000de2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000de4:	8523      	strh	r3, [r4, #40]	; 0x28
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000de6:	9501      	str	r5, [sp, #4]
 8000de8:	9600      	str	r6, [sp, #0]
 8000dea:	4653      	mov	r3, sl
 8000dec:	464a      	mov	r2, r9
 8000dee:	4641      	mov	r1, r8
 8000df0:	4620      	mov	r0, r4
 8000df2:	f7ff fe2b 	bl	8000a4c <I2C_RequestMemoryWrite>
 8000df6:	2800      	cmp	r0, #0
 8000df8:	d02a      	beq.n	8000e50 <HAL_I2C_Mem_Write+0xe8>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000dfa:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8000dfc:	f884 703c 	strb.w	r7, [r4, #60]	; 0x3c
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000e00:	2b04      	cmp	r3, #4
 8000e02:	d107      	bne.n	8000e14 <HAL_I2C_Mem_Write+0xac>
        return HAL_ERROR;
 8000e04:	2001      	movs	r0, #1
 8000e06:	e7be      	b.n	8000d86 <HAL_I2C_Mem_Write+0x1e>
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000e08:	f7ff fdfa 	bl	8000a00 <I2C_WaitOnTXEFlagUntilTimeout>
 8000e0c:	b120      	cbz	r0, 8000e18 <HAL_I2C_Mem_Write+0xb0>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000e0e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000e10:	2b04      	cmp	r3, #4
 8000e12:	d034      	beq.n	8000e7e <HAL_I2C_Mem_Write+0x116>
          return HAL_TIMEOUT;
 8000e14:	2003      	movs	r0, #3
 8000e16:	e7b6      	b.n	8000d86 <HAL_I2C_Mem_Write+0x1e>
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8000e18:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000e1a:	6827      	ldr	r7, [r4, #0]
      hi2c->XferSize--;
 8000e1c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8000e1e:	1c4b      	adds	r3, r1, #1
 8000e20:	6263      	str	r3, [r4, #36]	; 0x24
 8000e22:	780b      	ldrb	r3, [r1, #0]
 8000e24:	613b      	str	r3, [r7, #16]
      hi2c->XferCount--;
 8000e26:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000e28:	3b01      	subs	r3, #1
 8000e2a:	b29b      	uxth	r3, r3
 8000e2c:	8563      	strh	r3, [r4, #42]	; 0x2a
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000e2e:	697b      	ldr	r3, [r7, #20]
      hi2c->XferSize--;
 8000e30:	1e50      	subs	r0, r2, #1
 8000e32:	b280      	uxth	r0, r0
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000e34:	075b      	lsls	r3, r3, #29
      hi2c->XferSize--;
 8000e36:	8520      	strh	r0, [r4, #40]	; 0x28
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000e38:	d50a      	bpl.n	8000e50 <HAL_I2C_Mem_Write+0xe8>
 8000e3a:	b148      	cbz	r0, 8000e50 <HAL_I2C_Mem_Write+0xe8>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8000e3c:	1c8b      	adds	r3, r1, #2
 8000e3e:	6263      	str	r3, [r4, #36]	; 0x24
 8000e40:	784b      	ldrb	r3, [r1, #1]
 8000e42:	613b      	str	r3, [r7, #16]
        hi2c->XferCount--;
 8000e44:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000e46:	3b01      	subs	r3, #1
        hi2c->XferSize--;
 8000e48:	3a02      	subs	r2, #2
        hi2c->XferCount--;
 8000e4a:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8000e4c:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8000e4e:	8563      	strh	r3, [r4, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 8000e50:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000e52:	462a      	mov	r2, r5
 8000e54:	4631      	mov	r1, r6
 8000e56:	4620      	mov	r0, r4
    while(hi2c->XferSize > 0U)
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d1d5      	bne.n	8000e08 <HAL_I2C_Mem_Write+0xa0>
    if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000e5c:	f7ff feef 	bl	8000c3e <I2C_WaitOnBTFFlagUntilTimeout>
 8000e60:	2800      	cmp	r0, #0
 8000e62:	d1d4      	bne.n	8000e0e <HAL_I2C_Mem_Write+0xa6>
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000e64:	6822      	ldr	r2, [r4, #0]
 8000e66:	6813      	ldr	r3, [r2, #0]
 8000e68:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e6c:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8000e6e:	2320      	movs	r3, #32
 8000e70:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8000e74:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e78:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 8000e7c:	e783      	b.n	8000d86 <HAL_I2C_Mem_Write+0x1e>
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000e7e:	6822      	ldr	r2, [r4, #0]
 8000e80:	6813      	ldr	r3, [r2, #0]
 8000e82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e86:	6013      	str	r3, [r2, #0]
 8000e88:	e7bc      	b.n	8000e04 <HAL_I2C_Mem_Write+0x9c>
 8000e8a:	bf00      	nop
 8000e8c:	00100002 	.word	0x00100002
 8000e90:	ffff0000 	.word	0xffff0000

08000e94 <HAL_I2C_Mem_Read>:
{
 8000e94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e98:	4604      	mov	r4, r0
 8000e9a:	b086      	sub	sp, #24
 8000e9c:	469a      	mov	sl, r3
 8000e9e:	460d      	mov	r5, r1
 8000ea0:	4691      	mov	r9, r2
 8000ea2:	9f10      	ldr	r7, [sp, #64]	; 0x40
  tickstart = HAL_GetTick();
 8000ea4:	f7ff fba2 	bl	80005ec <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8000ea8:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8000eac:	2b20      	cmp	r3, #32
  tickstart = HAL_GetTick();
 8000eae:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8000eb0:	d004      	beq.n	8000ebc <HAL_I2C_Mem_Read+0x28>
    return HAL_BUSY;
 8000eb2:	2502      	movs	r5, #2
}
 8000eb4:	4628      	mov	r0, r5
 8000eb6:	b006      	add	sp, #24
 8000eb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000ebc:	9000      	str	r0, [sp, #0]
 8000ebe:	2319      	movs	r3, #25
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	4979      	ldr	r1, [pc, #484]	; (80010a8 <HAL_I2C_Mem_Read+0x214>)
 8000ec4:	4620      	mov	r0, r4
 8000ec6:	f7ff fd6d 	bl	80009a4 <I2C_WaitOnFlagUntilTimeout>
 8000eca:	2800      	cmp	r0, #0
 8000ecc:	d1f1      	bne.n	8000eb2 <HAL_I2C_Mem_Read+0x1e>
    __HAL_LOCK(hi2c);
 8000ece:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8000ed2:	2b01      	cmp	r3, #1
 8000ed4:	d0ed      	beq.n	8000eb2 <HAL_I2C_Mem_Read+0x1e>
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000edc:	6823      	ldr	r3, [r4, #0]
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8000ee2:	bf5e      	ittt	pl
 8000ee4:	681a      	ldrpl	r2, [r3, #0]
 8000ee6:	f042 0201 	orrpl.w	r2, r2, #1
 8000eea:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000ef2:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8000ef4:	2322      	movs	r3, #34	; 0x22
 8000ef6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000efa:	2340      	movs	r3, #64	; 0x40
 8000efc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->pBuffPtr    = pData;
 8000f00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8000f02:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f04:	f04f 0800 	mov.w	r8, #0
    hi2c->XferCount   = Size;
 8000f08:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f0c:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8000f10:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000f12:	4b66      	ldr	r3, [pc, #408]	; (80010ac <HAL_I2C_Mem_Read+0x218>)
 8000f14:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8000f16:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000f18:	8523      	strh	r3, [r4, #40]	; 0x28
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000f1a:	4629      	mov	r1, r5
 8000f1c:	9601      	str	r6, [sp, #4]
 8000f1e:	9700      	str	r7, [sp, #0]
 8000f20:	4653      	mov	r3, sl
 8000f22:	464a      	mov	r2, r9
 8000f24:	4620      	mov	r0, r4
 8000f26:	f7ff fde3 	bl	8000af0 <I2C_RequestMemoryRead>
 8000f2a:	4605      	mov	r5, r0
 8000f2c:	b130      	cbz	r0, 8000f3c <HAL_I2C_Mem_Read+0xa8>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000f2e:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8000f30:	f884 803c 	strb.w	r8, [r4, #60]	; 0x3c
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000f34:	2b04      	cmp	r3, #4
 8000f36:	d13a      	bne.n	8000fae <HAL_I2C_Mem_Read+0x11a>
              return HAL_ERROR;
 8000f38:	2501      	movs	r5, #1
 8000f3a:	e7bb      	b.n	8000eb4 <HAL_I2C_Mem_Read+0x20>
    if(hi2c->XferSize == 0U)
 8000f3c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8000f3e:	6823      	ldr	r3, [r4, #0]
 8000f40:	b992      	cbnz	r2, 8000f68 <HAL_I2C_Mem_Read+0xd4>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000f42:	9002      	str	r0, [sp, #8]
 8000f44:	695a      	ldr	r2, [r3, #20]
 8000f46:	9202      	str	r2, [sp, #8]
 8000f48:	699a      	ldr	r2, [r3, #24]
 8000f4a:	9202      	str	r2, [sp, #8]
 8000f4c:	9a02      	ldr	r2, [sp, #8]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f54:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8000f56:	2320      	movs	r3, #32
 8000f58:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8000f62:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8000f66:	e7a5      	b.n	8000eb4 <HAL_I2C_Mem_Read+0x20>
    else if(hi2c->XferSize == 1U)
 8000f68:	2a01      	cmp	r2, #1
 8000f6a:	d122      	bne.n	8000fb2 <HAL_I2C_Mem_Read+0x11e>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000f72:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000f74:	9003      	str	r0, [sp, #12]
 8000f76:	695a      	ldr	r2, [r3, #20]
 8000f78:	9203      	str	r2, [sp, #12]
 8000f7a:	699a      	ldr	r2, [r3, #24]
 8000f7c:	9203      	str	r2, [sp, #12]
 8000f7e:	9a03      	ldr	r2, [sp, #12]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f86:	601a      	str	r2, [r3, #0]
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8000f88:	f8df 8124 	ldr.w	r8, [pc, #292]	; 80010b0 <HAL_I2C_Mem_Read+0x21c>
    while(hi2c->XferSize > 0U)
 8000f8c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d0e1      	beq.n	8000f56 <HAL_I2C_Mem_Read+0xc2>
      if(hi2c->XferSize <= 3U)
 8000f92:	2b03      	cmp	r3, #3
 8000f94:	d86b      	bhi.n	800106e <HAL_I2C_Mem_Read+0x1da>
        if(hi2c->XferSize== 1U)
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d123      	bne.n	8000fe2 <HAL_I2C_Mem_Read+0x14e>
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8000f9a:	4632      	mov	r2, r6
 8000f9c:	4639      	mov	r1, r7
 8000f9e:	4620      	mov	r0, r4
 8000fa0:	f7ff fe20 	bl	8000be4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8000fa4:	2800      	cmp	r0, #0
 8000fa6:	d039      	beq.n	800101c <HAL_I2C_Mem_Read+0x188>
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8000fa8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000faa:	2b20      	cmp	r3, #32
 8000fac:	d1c4      	bne.n	8000f38 <HAL_I2C_Mem_Read+0xa4>
              return HAL_TIMEOUT;
 8000fae:	2503      	movs	r5, #3
 8000fb0:	e780      	b.n	8000eb4 <HAL_I2C_Mem_Read+0x20>
    else if(hi2c->XferSize == 2U)
 8000fb2:	2a02      	cmp	r2, #2
 8000fb4:	d10e      	bne.n	8000fd4 <HAL_I2C_Mem_Read+0x140>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000fbc:	601a      	str	r2, [r3, #0]
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000fc4:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000fc6:	9004      	str	r0, [sp, #16]
 8000fc8:	695a      	ldr	r2, [r3, #20]
 8000fca:	9204      	str	r2, [sp, #16]
 8000fcc:	699b      	ldr	r3, [r3, #24]
 8000fce:	9304      	str	r3, [sp, #16]
 8000fd0:	9b04      	ldr	r3, [sp, #16]
 8000fd2:	e7d9      	b.n	8000f88 <HAL_I2C_Mem_Read+0xf4>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000fd4:	9005      	str	r0, [sp, #20]
 8000fd6:	695a      	ldr	r2, [r3, #20]
 8000fd8:	9205      	str	r2, [sp, #20]
 8000fda:	699b      	ldr	r3, [r3, #24]
 8000fdc:	9305      	str	r3, [sp, #20]
 8000fde:	9b05      	ldr	r3, [sp, #20]
 8000fe0:	e7d2      	b.n	8000f88 <HAL_I2C_Mem_Read+0xf4>
        else if(hi2c->XferSize == 2U)
 8000fe2:	2b02      	cmp	r3, #2
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8000fe4:	9600      	str	r6, [sp, #0]
 8000fe6:	463b      	mov	r3, r7
 8000fe8:	f04f 0200 	mov.w	r2, #0
 8000fec:	4641      	mov	r1, r8
 8000fee:	4620      	mov	r0, r4
        else if(hi2c->XferSize == 2U)
 8000ff0:	d122      	bne.n	8001038 <HAL_I2C_Mem_Read+0x1a4>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8000ff2:	f7ff fcd7 	bl	80009a4 <I2C_WaitOnFlagUntilTimeout>
 8000ff6:	2800      	cmp	r0, #0
 8000ff8:	d1d9      	bne.n	8000fae <HAL_I2C_Mem_Read+0x11a>
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000ffa:	6823      	ldr	r3, [r4, #0]
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001002:	601a      	str	r2, [r3, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001004:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001006:	691b      	ldr	r3, [r3, #16]
 8001008:	1c51      	adds	r1, r2, #1
 800100a:	6261      	str	r1, [r4, #36]	; 0x24
 800100c:	7013      	strb	r3, [r2, #0]
          hi2c->XferSize--;
 800100e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001010:	3b01      	subs	r3, #1
 8001012:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001014:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001016:	3b01      	subs	r3, #1
 8001018:	b29b      	uxth	r3, r3
 800101a:	8563      	strh	r3, [r4, #42]	; 0x2a
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800101c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800101e:	1c5a      	adds	r2, r3, #1
 8001020:	6262      	str	r2, [r4, #36]	; 0x24
 8001022:	6822      	ldr	r2, [r4, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001024:	6912      	ldr	r2, [r2, #16]
 8001026:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001028:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800102a:	3b01      	subs	r3, #1
 800102c:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800102e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001030:	3b01      	subs	r3, #1
 8001032:	b29b      	uxth	r3, r3
 8001034:	8563      	strh	r3, [r4, #42]	; 0x2a
 8001036:	e7a9      	b.n	8000f8c <HAL_I2C_Mem_Read+0xf8>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001038:	f7ff fcb4 	bl	80009a4 <I2C_WaitOnFlagUntilTimeout>
 800103c:	4602      	mov	r2, r0
 800103e:	2800      	cmp	r0, #0
 8001040:	d1b5      	bne.n	8000fae <HAL_I2C_Mem_Read+0x11a>
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001042:	6823      	ldr	r3, [r4, #0]
 8001044:	6819      	ldr	r1, [r3, #0]
 8001046:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800104a:	6019      	str	r1, [r3, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800104c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800104e:	691b      	ldr	r3, [r3, #16]
 8001050:	1c48      	adds	r0, r1, #1
 8001052:	6260      	str	r0, [r4, #36]	; 0x24
 8001054:	700b      	strb	r3, [r1, #0]
          hi2c->XferSize--;
 8001056:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001058:	9600      	str	r6, [sp, #0]
          hi2c->XferSize--;
 800105a:	3b01      	subs	r3, #1
 800105c:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800105e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001060:	3b01      	subs	r3, #1
 8001062:	b29b      	uxth	r3, r3
 8001064:	8563      	strh	r3, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001066:	4641      	mov	r1, r8
 8001068:	463b      	mov	r3, r7
 800106a:	4620      	mov	r0, r4
 800106c:	e7c1      	b.n	8000ff2 <HAL_I2C_Mem_Read+0x15e>
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800106e:	4632      	mov	r2, r6
 8001070:	4639      	mov	r1, r7
 8001072:	4620      	mov	r0, r4
 8001074:	f7ff fdb6 	bl	8000be4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001078:	2800      	cmp	r0, #0
 800107a:	d195      	bne.n	8000fa8 <HAL_I2C_Mem_Read+0x114>
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800107c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800107e:	1c5a      	adds	r2, r3, #1
 8001080:	6262      	str	r2, [r4, #36]	; 0x24
 8001082:	6822      	ldr	r2, [r4, #0]
 8001084:	6912      	ldr	r2, [r2, #16]
 8001086:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 8001088:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800108a:	6822      	ldr	r2, [r4, #0]
        hi2c->XferSize--;
 800108c:	3b01      	subs	r3, #1
 800108e:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8001090:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001092:	3b01      	subs	r3, #1
 8001094:	b29b      	uxth	r3, r3
 8001096:	8563      	strh	r3, [r4, #42]	; 0x2a
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001098:	6953      	ldr	r3, [r2, #20]
 800109a:	075b      	lsls	r3, r3, #29
 800109c:	f57f af76 	bpl.w	8000f8c <HAL_I2C_Mem_Read+0xf8>
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80010a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80010a2:	1c59      	adds	r1, r3, #1
 80010a4:	6261      	str	r1, [r4, #36]	; 0x24
 80010a6:	e7bd      	b.n	8001024 <HAL_I2C_Mem_Read+0x190>
 80010a8:	00100002 	.word	0x00100002
 80010ac:	ffff0000 	.word	0xffff0000
 80010b0:	00010004 	.word	0x00010004

080010b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010b6:	4604      	mov	r4, r0
 80010b8:	b910      	cbnz	r0, 80010c0 <HAL_RCC_OscConfig+0xc>
  {
    return HAL_ERROR;
 80010ba:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 80010bc:	b003      	add	sp, #12
 80010be:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010c0:	6803      	ldr	r3, [r0, #0]
 80010c2:	07d8      	lsls	r0, r3, #31
 80010c4:	d43b      	bmi.n	800113e <HAL_RCC_OscConfig+0x8a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010c6:	6823      	ldr	r3, [r4, #0]
 80010c8:	0799      	lsls	r1, r3, #30
 80010ca:	f100 8084 	bmi.w	80011d6 <HAL_RCC_OscConfig+0x122>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010ce:	6823      	ldr	r3, [r4, #0]
 80010d0:	071e      	lsls	r6, r3, #28
 80010d2:	f100 80c6 	bmi.w	8001262 <HAL_RCC_OscConfig+0x1ae>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010d6:	6823      	ldr	r3, [r4, #0]
 80010d8:	075d      	lsls	r5, r3, #29
 80010da:	d52a      	bpl.n	8001132 <HAL_RCC_OscConfig+0x7e>
    __HAL_RCC_PWR_CLK_ENABLE();
 80010dc:	2300      	movs	r3, #0
 80010de:	9301      	str	r3, [sp, #4]
 80010e0:	4baa      	ldr	r3, [pc, #680]	; (800138c <HAL_RCC_OscConfig+0x2d8>)
    PWR->CR |= PWR_CR_DBP;
 80010e2:	4dab      	ldr	r5, [pc, #684]	; (8001390 <HAL_RCC_OscConfig+0x2dc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80010e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010e6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80010ea:	641a      	str	r2, [r3, #64]	; 0x40
 80010ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010f2:	9301      	str	r3, [sp, #4]
 80010f4:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 80010f6:	682b      	ldr	r3, [r5, #0]
 80010f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010fc:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 80010fe:	f7ff fa75 	bl	80005ec <HAL_GetTick>
 8001102:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001104:	682b      	ldr	r3, [r5, #0]
 8001106:	05da      	lsls	r2, r3, #23
 8001108:	f140 80cd 	bpl.w	80012a6 <HAL_RCC_OscConfig+0x1f2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800110c:	68a3      	ldr	r3, [r4, #8]
 800110e:	4d9f      	ldr	r5, [pc, #636]	; (800138c <HAL_RCC_OscConfig+0x2d8>)
 8001110:	2b01      	cmp	r3, #1
 8001112:	f040 80cf 	bne.w	80012b4 <HAL_RCC_OscConfig+0x200>
 8001116:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001118:	f043 0301 	orr.w	r3, r3, #1
 800111c:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800111e:	f7ff fa65 	bl	80005ec <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001122:	4d9a      	ldr	r5, [pc, #616]	; (800138c <HAL_RCC_OscConfig+0x2d8>)
      tickstart = HAL_GetTick();
 8001124:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001126:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800112a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800112c:	079b      	lsls	r3, r3, #30
 800112e:	f140 80e2 	bpl.w	80012f6 <HAL_RCC_OscConfig+0x242>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001132:	69a2      	ldr	r2, [r4, #24]
 8001134:	2a00      	cmp	r2, #0
 8001136:	f040 80e5 	bne.w	8001304 <HAL_RCC_OscConfig+0x250>
  return HAL_OK;
 800113a:	2000      	movs	r0, #0
 800113c:	e7be      	b.n	80010bc <HAL_RCC_OscConfig+0x8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800113e:	4b93      	ldr	r3, [pc, #588]	; (800138c <HAL_RCC_OscConfig+0x2d8>)
 8001140:	689a      	ldr	r2, [r3, #8]
 8001142:	f002 020c 	and.w	r2, r2, #12
 8001146:	2a04      	cmp	r2, #4
 8001148:	d007      	beq.n	800115a <HAL_RCC_OscConfig+0xa6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800114a:	689a      	ldr	r2, [r3, #8]
 800114c:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001150:	2a08      	cmp	r2, #8
 8001152:	d10a      	bne.n	800116a <HAL_RCC_OscConfig+0xb6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	025a      	lsls	r2, r3, #9
 8001158:	d507      	bpl.n	800116a <HAL_RCC_OscConfig+0xb6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800115a:	4b8c      	ldr	r3, [pc, #560]	; (800138c <HAL_RCC_OscConfig+0x2d8>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	039b      	lsls	r3, r3, #14
 8001160:	d5b1      	bpl.n	80010c6 <HAL_RCC_OscConfig+0x12>
 8001162:	6863      	ldr	r3, [r4, #4]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d1ae      	bne.n	80010c6 <HAL_RCC_OscConfig+0x12>
 8001168:	e7a7      	b.n	80010ba <HAL_RCC_OscConfig+0x6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800116a:	6863      	ldr	r3, [r4, #4]
 800116c:	4d87      	ldr	r5, [pc, #540]	; (800138c <HAL_RCC_OscConfig+0x2d8>)
 800116e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001172:	d111      	bne.n	8001198 <HAL_RCC_OscConfig+0xe4>
 8001174:	682b      	ldr	r3, [r5, #0]
 8001176:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800117a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800117c:	f7ff fa36 	bl	80005ec <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001180:	4d82      	ldr	r5, [pc, #520]	; (800138c <HAL_RCC_OscConfig+0x2d8>)
        tickstart = HAL_GetTick();
 8001182:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001184:	682b      	ldr	r3, [r5, #0]
 8001186:	039f      	lsls	r7, r3, #14
 8001188:	d49d      	bmi.n	80010c6 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800118a:	f7ff fa2f 	bl	80005ec <HAL_GetTick>
 800118e:	1b80      	subs	r0, r0, r6
 8001190:	2864      	cmp	r0, #100	; 0x64
 8001192:	d9f7      	bls.n	8001184 <HAL_RCC_OscConfig+0xd0>
            return HAL_TIMEOUT;
 8001194:	2003      	movs	r0, #3
 8001196:	e791      	b.n	80010bc <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001198:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800119c:	d104      	bne.n	80011a8 <HAL_RCC_OscConfig+0xf4>
 800119e:	682b      	ldr	r3, [r5, #0]
 80011a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011a4:	602b      	str	r3, [r5, #0]
 80011a6:	e7e5      	b.n	8001174 <HAL_RCC_OscConfig+0xc0>
 80011a8:	682a      	ldr	r2, [r5, #0]
 80011aa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80011ae:	602a      	str	r2, [r5, #0]
 80011b0:	682a      	ldr	r2, [r5, #0]
 80011b2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80011b6:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d1df      	bne.n	800117c <HAL_RCC_OscConfig+0xc8>
        tickstart = HAL_GetTick();
 80011bc:	f7ff fa16 	bl	80005ec <HAL_GetTick>
 80011c0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011c2:	682b      	ldr	r3, [r5, #0]
 80011c4:	0398      	lsls	r0, r3, #14
 80011c6:	f57f af7e 	bpl.w	80010c6 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011ca:	f7ff fa0f 	bl	80005ec <HAL_GetTick>
 80011ce:	1b80      	subs	r0, r0, r6
 80011d0:	2864      	cmp	r0, #100	; 0x64
 80011d2:	d9f6      	bls.n	80011c2 <HAL_RCC_OscConfig+0x10e>
 80011d4:	e7de      	b.n	8001194 <HAL_RCC_OscConfig+0xe0>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011d6:	4b6d      	ldr	r3, [pc, #436]	; (800138c <HAL_RCC_OscConfig+0x2d8>)
 80011d8:	689a      	ldr	r2, [r3, #8]
 80011da:	f012 0f0c 	tst.w	r2, #12
 80011de:	d007      	beq.n	80011f0 <HAL_RCC_OscConfig+0x13c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011e0:	689a      	ldr	r2, [r3, #8]
 80011e2:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011e6:	2a08      	cmp	r2, #8
 80011e8:	d112      	bne.n	8001210 <HAL_RCC_OscConfig+0x15c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	0259      	lsls	r1, r3, #9
 80011ee:	d40f      	bmi.n	8001210 <HAL_RCC_OscConfig+0x15c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011f0:	4b66      	ldr	r3, [pc, #408]	; (800138c <HAL_RCC_OscConfig+0x2d8>)
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	0792      	lsls	r2, r2, #30
 80011f6:	d503      	bpl.n	8001200 <HAL_RCC_OscConfig+0x14c>
 80011f8:	68e2      	ldr	r2, [r4, #12]
 80011fa:	2a01      	cmp	r2, #1
 80011fc:	f47f af5d 	bne.w	80010ba <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	6921      	ldr	r1, [r4, #16]
 8001204:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001208:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800120c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800120e:	e75e      	b.n	80010ce <HAL_RCC_OscConfig+0x1a>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001210:	68e2      	ldr	r2, [r4, #12]
 8001212:	4b60      	ldr	r3, [pc, #384]	; (8001394 <HAL_RCC_OscConfig+0x2e0>)
 8001214:	b1b2      	cbz	r2, 8001244 <HAL_RCC_OscConfig+0x190>
        __HAL_RCC_HSI_ENABLE();
 8001216:	2201      	movs	r2, #1
 8001218:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800121a:	f7ff f9e7 	bl	80005ec <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800121e:	4d5b      	ldr	r5, [pc, #364]	; (800138c <HAL_RCC_OscConfig+0x2d8>)
        tickstart = HAL_GetTick();
 8001220:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001222:	682b      	ldr	r3, [r5, #0]
 8001224:	079b      	lsls	r3, r3, #30
 8001226:	d507      	bpl.n	8001238 <HAL_RCC_OscConfig+0x184>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001228:	682b      	ldr	r3, [r5, #0]
 800122a:	6922      	ldr	r2, [r4, #16]
 800122c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001230:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001234:	602b      	str	r3, [r5, #0]
 8001236:	e74a      	b.n	80010ce <HAL_RCC_OscConfig+0x1a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001238:	f7ff f9d8 	bl	80005ec <HAL_GetTick>
 800123c:	1b80      	subs	r0, r0, r6
 800123e:	2802      	cmp	r0, #2
 8001240:	d9ef      	bls.n	8001222 <HAL_RCC_OscConfig+0x16e>
 8001242:	e7a7      	b.n	8001194 <HAL_RCC_OscConfig+0xe0>
        __HAL_RCC_HSI_DISABLE();
 8001244:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001246:	f7ff f9d1 	bl	80005ec <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800124a:	4d50      	ldr	r5, [pc, #320]	; (800138c <HAL_RCC_OscConfig+0x2d8>)
        tickstart = HAL_GetTick();
 800124c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800124e:	682b      	ldr	r3, [r5, #0]
 8001250:	079f      	lsls	r7, r3, #30
 8001252:	f57f af3c 	bpl.w	80010ce <HAL_RCC_OscConfig+0x1a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001256:	f7ff f9c9 	bl	80005ec <HAL_GetTick>
 800125a:	1b80      	subs	r0, r0, r6
 800125c:	2802      	cmp	r0, #2
 800125e:	d9f6      	bls.n	800124e <HAL_RCC_OscConfig+0x19a>
 8001260:	e798      	b.n	8001194 <HAL_RCC_OscConfig+0xe0>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001262:	6962      	ldr	r2, [r4, #20]
 8001264:	4b4c      	ldr	r3, [pc, #304]	; (8001398 <HAL_RCC_OscConfig+0x2e4>)
 8001266:	b17a      	cbz	r2, 8001288 <HAL_RCC_OscConfig+0x1d4>
      __HAL_RCC_LSI_ENABLE();
 8001268:	2201      	movs	r2, #1
 800126a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800126c:	f7ff f9be 	bl	80005ec <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001270:	4d46      	ldr	r5, [pc, #280]	; (800138c <HAL_RCC_OscConfig+0x2d8>)
      tickstart = HAL_GetTick();
 8001272:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001274:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001276:	0798      	lsls	r0, r3, #30
 8001278:	f53f af2d 	bmi.w	80010d6 <HAL_RCC_OscConfig+0x22>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800127c:	f7ff f9b6 	bl	80005ec <HAL_GetTick>
 8001280:	1b80      	subs	r0, r0, r6
 8001282:	2802      	cmp	r0, #2
 8001284:	d9f6      	bls.n	8001274 <HAL_RCC_OscConfig+0x1c0>
 8001286:	e785      	b.n	8001194 <HAL_RCC_OscConfig+0xe0>
      __HAL_RCC_LSI_DISABLE();
 8001288:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800128a:	f7ff f9af 	bl	80005ec <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800128e:	4d3f      	ldr	r5, [pc, #252]	; (800138c <HAL_RCC_OscConfig+0x2d8>)
      tickstart = HAL_GetTick();
 8001290:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001292:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001294:	0799      	lsls	r1, r3, #30
 8001296:	f57f af1e 	bpl.w	80010d6 <HAL_RCC_OscConfig+0x22>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800129a:	f7ff f9a7 	bl	80005ec <HAL_GetTick>
 800129e:	1b80      	subs	r0, r0, r6
 80012a0:	2802      	cmp	r0, #2
 80012a2:	d9f6      	bls.n	8001292 <HAL_RCC_OscConfig+0x1de>
 80012a4:	e776      	b.n	8001194 <HAL_RCC_OscConfig+0xe0>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80012a6:	f7ff f9a1 	bl	80005ec <HAL_GetTick>
 80012aa:	1b80      	subs	r0, r0, r6
 80012ac:	2802      	cmp	r0, #2
 80012ae:	f67f af29 	bls.w	8001104 <HAL_RCC_OscConfig+0x50>
 80012b2:	e76f      	b.n	8001194 <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012b4:	2b05      	cmp	r3, #5
 80012b6:	d104      	bne.n	80012c2 <HAL_RCC_OscConfig+0x20e>
 80012b8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80012ba:	f043 0304 	orr.w	r3, r3, #4
 80012be:	672b      	str	r3, [r5, #112]	; 0x70
 80012c0:	e729      	b.n	8001116 <HAL_RCC_OscConfig+0x62>
 80012c2:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80012c4:	f022 0201 	bic.w	r2, r2, #1
 80012c8:	672a      	str	r2, [r5, #112]	; 0x70
 80012ca:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80012cc:	f022 0204 	bic.w	r2, r2, #4
 80012d0:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	f47f af23 	bne.w	800111e <HAL_RCC_OscConfig+0x6a>
      tickstart = HAL_GetTick();
 80012d8:	f7ff f988 	bl	80005ec <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012dc:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80012e0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012e2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80012e4:	0798      	lsls	r0, r3, #30
 80012e6:	f57f af24 	bpl.w	8001132 <HAL_RCC_OscConfig+0x7e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012ea:	f7ff f97f 	bl	80005ec <HAL_GetTick>
 80012ee:	1b80      	subs	r0, r0, r6
 80012f0:	42b8      	cmp	r0, r7
 80012f2:	d9f6      	bls.n	80012e2 <HAL_RCC_OscConfig+0x22e>
 80012f4:	e74e      	b.n	8001194 <HAL_RCC_OscConfig+0xe0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012f6:	f7ff f979 	bl	80005ec <HAL_GetTick>
 80012fa:	1b80      	subs	r0, r0, r6
 80012fc:	42b8      	cmp	r0, r7
 80012fe:	f67f af14 	bls.w	800112a <HAL_RCC_OscConfig+0x76>
 8001302:	e747      	b.n	8001194 <HAL_RCC_OscConfig+0xe0>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001304:	4d21      	ldr	r5, [pc, #132]	; (800138c <HAL_RCC_OscConfig+0x2d8>)
 8001306:	68ab      	ldr	r3, [r5, #8]
 8001308:	f003 030c 	and.w	r3, r3, #12
 800130c:	2b08      	cmp	r3, #8
 800130e:	f43f aed4 	beq.w	80010ba <HAL_RCC_OscConfig+0x6>
 8001312:	4e22      	ldr	r6, [pc, #136]	; (800139c <HAL_RCC_OscConfig+0x2e8>)
 8001314:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001316:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001318:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800131a:	d12a      	bne.n	8001372 <HAL_RCC_OscConfig+0x2be>
        tickstart = HAL_GetTick();
 800131c:	f7ff f966 	bl	80005ec <HAL_GetTick>
 8001320:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001322:	682b      	ldr	r3, [r5, #0]
 8001324:	0199      	lsls	r1, r3, #6
 8001326:	d41e      	bmi.n	8001366 <HAL_RCC_OscConfig+0x2b2>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001328:	6a22      	ldr	r2, [r4, #32]
 800132a:	69e3      	ldr	r3, [r4, #28]
 800132c:	4313      	orrs	r3, r2
 800132e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001330:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001334:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001336:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800133a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800133c:	4c13      	ldr	r4, [pc, #76]	; (800138c <HAL_RCC_OscConfig+0x2d8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800133e:	0852      	lsrs	r2, r2, #1
 8001340:	3a01      	subs	r2, #1
 8001342:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001346:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001348:	2301      	movs	r3, #1
 800134a:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800134c:	f7ff f94e 	bl	80005ec <HAL_GetTick>
 8001350:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001352:	6823      	ldr	r3, [r4, #0]
 8001354:	019a      	lsls	r2, r3, #6
 8001356:	f53f aef0 	bmi.w	800113a <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800135a:	f7ff f947 	bl	80005ec <HAL_GetTick>
 800135e:	1b40      	subs	r0, r0, r5
 8001360:	2802      	cmp	r0, #2
 8001362:	d9f6      	bls.n	8001352 <HAL_RCC_OscConfig+0x29e>
 8001364:	e716      	b.n	8001194 <HAL_RCC_OscConfig+0xe0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001366:	f7ff f941 	bl	80005ec <HAL_GetTick>
 800136a:	1bc0      	subs	r0, r0, r7
 800136c:	2802      	cmp	r0, #2
 800136e:	d9d8      	bls.n	8001322 <HAL_RCC_OscConfig+0x26e>
 8001370:	e710      	b.n	8001194 <HAL_RCC_OscConfig+0xe0>
        tickstart = HAL_GetTick();
 8001372:	f7ff f93b 	bl	80005ec <HAL_GetTick>
 8001376:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001378:	682b      	ldr	r3, [r5, #0]
 800137a:	019b      	lsls	r3, r3, #6
 800137c:	f57f aedd 	bpl.w	800113a <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001380:	f7ff f934 	bl	80005ec <HAL_GetTick>
 8001384:	1b00      	subs	r0, r0, r4
 8001386:	2802      	cmp	r0, #2
 8001388:	d9f6      	bls.n	8001378 <HAL_RCC_OscConfig+0x2c4>
 800138a:	e703      	b.n	8001194 <HAL_RCC_OscConfig+0xe0>
 800138c:	40023800 	.word	0x40023800
 8001390:	40007000 	.word	0x40007000
 8001394:	42470000 	.word	0x42470000
 8001398:	42470e80 	.word	0x42470e80
 800139c:	42470060 	.word	0x42470060

080013a0 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80013a0:	4913      	ldr	r1, [pc, #76]	; (80013f0 <HAL_RCC_GetSysClockFreq+0x50>)
{
 80013a2:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80013a4:	688b      	ldr	r3, [r1, #8]
 80013a6:	f003 030c 	and.w	r3, r3, #12
 80013aa:	2b04      	cmp	r3, #4
 80013ac:	d003      	beq.n	80013b6 <HAL_RCC_GetSysClockFreq+0x16>
 80013ae:	2b08      	cmp	r3, #8
 80013b0:	d003      	beq.n	80013ba <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80013b2:	4810      	ldr	r0, [pc, #64]	; (80013f4 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80013b4:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 80013b6:	4810      	ldr	r0, [pc, #64]	; (80013f8 <HAL_RCC_GetSysClockFreq+0x58>)
 80013b8:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80013ba:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80013bc:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013be:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80013c0:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013c4:	bf14      	ite	ne
 80013c6:	480c      	ldrne	r0, [pc, #48]	; (80013f8 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013c8:	480a      	ldreq	r0, [pc, #40]	; (80013f4 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013ca:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80013ce:	bf18      	it	ne
 80013d0:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80013d2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013d6:	fba1 0100 	umull	r0, r1, r1, r0
 80013da:	f7fe ff49 	bl	8000270 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80013de:	4b04      	ldr	r3, [pc, #16]	; (80013f0 <HAL_RCC_GetSysClockFreq+0x50>)
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80013e6:	3301      	adds	r3, #1
 80013e8:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 80013ea:	fbb0 f0f3 	udiv	r0, r0, r3
 80013ee:	bd08      	pop	{r3, pc}
 80013f0:	40023800 	.word	0x40023800
 80013f4:	00f42400 	.word	0x00f42400
 80013f8:	017d7840 	.word	0x017d7840

080013fc <HAL_RCC_ClockConfig>:
{
 80013fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001400:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001402:	4604      	mov	r4, r0
 8001404:	b910      	cbnz	r0, 800140c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001406:	2001      	movs	r0, #1
 8001408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800140c:	4b44      	ldr	r3, [pc, #272]	; (8001520 <HAL_RCC_ClockConfig+0x124>)
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	f002 020f 	and.w	r2, r2, #15
 8001414:	428a      	cmp	r2, r1
 8001416:	d328      	bcc.n	800146a <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001418:	6821      	ldr	r1, [r4, #0]
 800141a:	078f      	lsls	r7, r1, #30
 800141c:	d42d      	bmi.n	800147a <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800141e:	07c8      	lsls	r0, r1, #31
 8001420:	d440      	bmi.n	80014a4 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001422:	4b3f      	ldr	r3, [pc, #252]	; (8001520 <HAL_RCC_ClockConfig+0x124>)
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	f002 020f 	and.w	r2, r2, #15
 800142a:	4295      	cmp	r5, r2
 800142c:	d366      	bcc.n	80014fc <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800142e:	6822      	ldr	r2, [r4, #0]
 8001430:	0751      	lsls	r1, r2, #29
 8001432:	d46c      	bmi.n	800150e <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001434:	0713      	lsls	r3, r2, #28
 8001436:	d507      	bpl.n	8001448 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001438:	4a3a      	ldr	r2, [pc, #232]	; (8001524 <HAL_RCC_ClockConfig+0x128>)
 800143a:	6921      	ldr	r1, [r4, #16]
 800143c:	6893      	ldr	r3, [r2, #8]
 800143e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001442:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001446:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001448:	f7ff ffaa 	bl	80013a0 <HAL_RCC_GetSysClockFreq>
 800144c:	4b35      	ldr	r3, [pc, #212]	; (8001524 <HAL_RCC_ClockConfig+0x128>)
 800144e:	4a36      	ldr	r2, [pc, #216]	; (8001528 <HAL_RCC_ClockConfig+0x12c>)
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001456:	5cd3      	ldrb	r3, [r2, r3]
 8001458:	40d8      	lsrs	r0, r3
 800145a:	4b34      	ldr	r3, [pc, #208]	; (800152c <HAL_RCC_ClockConfig+0x130>)
 800145c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800145e:	2000      	movs	r0, #0
 8001460:	f7ff f88e 	bl	8000580 <HAL_InitTick>
  return HAL_OK;
 8001464:	2000      	movs	r0, #0
 8001466:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800146a:	b2ca      	uxtb	r2, r1
 800146c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f003 030f 	and.w	r3, r3, #15
 8001474:	4299      	cmp	r1, r3
 8001476:	d1c6      	bne.n	8001406 <HAL_RCC_ClockConfig+0xa>
 8001478:	e7ce      	b.n	8001418 <HAL_RCC_ClockConfig+0x1c>
 800147a:	4b2a      	ldr	r3, [pc, #168]	; (8001524 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800147c:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001480:	bf1e      	ittt	ne
 8001482:	689a      	ldrne	r2, [r3, #8]
 8001484:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8001488:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800148a:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800148c:	bf42      	ittt	mi
 800148e:	689a      	ldrmi	r2, [r3, #8]
 8001490:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8001494:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001496:	689a      	ldr	r2, [r3, #8]
 8001498:	68a0      	ldr	r0, [r4, #8]
 800149a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800149e:	4302      	orrs	r2, r0
 80014a0:	609a      	str	r2, [r3, #8]
 80014a2:	e7bc      	b.n	800141e <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014a4:	6862      	ldr	r2, [r4, #4]
 80014a6:	4b1f      	ldr	r3, [pc, #124]	; (8001524 <HAL_RCC_ClockConfig+0x128>)
 80014a8:	2a01      	cmp	r2, #1
 80014aa:	d11d      	bne.n	80014e8 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014b2:	d0a8      	beq.n	8001406 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014b4:	4e1b      	ldr	r6, [pc, #108]	; (8001524 <HAL_RCC_ClockConfig+0x128>)
 80014b6:	68b3      	ldr	r3, [r6, #8]
 80014b8:	f023 0303 	bic.w	r3, r3, #3
 80014bc:	4313      	orrs	r3, r2
 80014be:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80014c0:	f7ff f894 	bl	80005ec <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014c4:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80014c8:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014ca:	68b3      	ldr	r3, [r6, #8]
 80014cc:	6862      	ldr	r2, [r4, #4]
 80014ce:	f003 030c 	and.w	r3, r3, #12
 80014d2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80014d6:	d0a4      	beq.n	8001422 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014d8:	f7ff f888 	bl	80005ec <HAL_GetTick>
 80014dc:	1bc0      	subs	r0, r0, r7
 80014de:	4540      	cmp	r0, r8
 80014e0:	d9f3      	bls.n	80014ca <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 80014e2:	2003      	movs	r0, #3
}
 80014e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014e8:	1e91      	subs	r1, r2, #2
 80014ea:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014ec:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014ee:	d802      	bhi.n	80014f6 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014f0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80014f4:	e7dd      	b.n	80014b2 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014f6:	f013 0f02 	tst.w	r3, #2
 80014fa:	e7da      	b.n	80014b2 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014fc:	b2ea      	uxtb	r2, r5
 80014fe:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 030f 	and.w	r3, r3, #15
 8001506:	429d      	cmp	r5, r3
 8001508:	f47f af7d 	bne.w	8001406 <HAL_RCC_ClockConfig+0xa>
 800150c:	e78f      	b.n	800142e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800150e:	4905      	ldr	r1, [pc, #20]	; (8001524 <HAL_RCC_ClockConfig+0x128>)
 8001510:	68e0      	ldr	r0, [r4, #12]
 8001512:	688b      	ldr	r3, [r1, #8]
 8001514:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001518:	4303      	orrs	r3, r0
 800151a:	608b      	str	r3, [r1, #8]
 800151c:	e78a      	b.n	8001434 <HAL_RCC_ClockConfig+0x38>
 800151e:	bf00      	nop
 8001520:	40023c00 	.word	0x40023c00
 8001524:	40023800 	.word	0x40023800
 8001528:	080052f5 	.word	0x080052f5
 800152c:	20000000 	.word	0x20000000

08001530 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001530:	4b01      	ldr	r3, [pc, #4]	; (8001538 <HAL_RCC_GetHCLKFreq+0x8>)
 8001532:	6818      	ldr	r0, [r3, #0]
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	20000000 	.word	0x20000000

0800153c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800153c:	4b04      	ldr	r3, [pc, #16]	; (8001550 <HAL_RCC_GetPCLK1Freq+0x14>)
 800153e:	4a05      	ldr	r2, [pc, #20]	; (8001554 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001546:	5cd3      	ldrb	r3, [r2, r3]
 8001548:	4a03      	ldr	r2, [pc, #12]	; (8001558 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800154a:	6810      	ldr	r0, [r2, #0]
}
 800154c:	40d8      	lsrs	r0, r3
 800154e:	4770      	bx	lr
 8001550:	40023800 	.word	0x40023800
 8001554:	08005305 	.word	0x08005305
 8001558:	20000000 	.word	0x20000000

0800155c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800155c:	4b04      	ldr	r3, [pc, #16]	; (8001570 <HAL_RCC_GetPCLK2Freq+0x14>)
 800155e:	4a05      	ldr	r2, [pc, #20]	; (8001574 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001566:	5cd3      	ldrb	r3, [r2, r3]
 8001568:	4a03      	ldr	r2, [pc, #12]	; (8001578 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800156a:	6810      	ldr	r0, [r2, #0]
}
 800156c:	40d8      	lsrs	r0, r3
 800156e:	4770      	bx	lr
 8001570:	40023800 	.word	0x40023800
 8001574:	08005305 	.word	0x08005305
 8001578:	20000000 	.word	0x20000000

0800157c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800157c:	6803      	ldr	r3, [r0, #0]
 800157e:	68da      	ldr	r2, [r3, #12]
 8001580:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001584:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001586:	695a      	ldr	r2, [r3, #20]
 8001588:	f022 0201 	bic.w	r2, r2, #1
 800158c:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800158e:	2320      	movs	r3, #32
 8001590:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8001594:	4770      	bx	lr
	...

08001598 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 800159c:	6806      	ldr	r6, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 800159e:	68c2      	ldr	r2, [r0, #12]
  tmpreg = huart->Instance->CR2;
 80015a0:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80015a2:	69c1      	ldr	r1, [r0, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80015a4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 80015a8:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 80015aa:	6133      	str	r3, [r6, #16]
{
 80015ac:	4604      	mov	r4, r0
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80015ae:	6883      	ldr	r3, [r0, #8]
 80015b0:	6900      	ldr	r0, [r0, #16]
  tmpreg = huart->Instance->CR1;
 80015b2:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80015b4:	4303      	orrs	r3, r0
 80015b6:	6960      	ldr	r0, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80015b8:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80015bc:	4303      	orrs	r3, r0
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80015be:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80015c2:	430b      	orrs	r3, r1
 80015c4:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 80015c6:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 80015c8:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 80015ca:	69a2      	ldr	r2, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 80015cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 80015d0:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80015d2:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 80015d6:	6173      	str	r3, [r6, #20]
 80015d8:	4b7a      	ldr	r3, [pc, #488]	; (80017c4 <UART_SetConfig+0x22c>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80015da:	d17c      	bne.n	80016d6 <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80015dc:	429e      	cmp	r6, r3
 80015de:	d003      	beq.n	80015e8 <UART_SetConfig+0x50>
 80015e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80015e4:	429e      	cmp	r6, r3
 80015e6:	d144      	bne.n	8001672 <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80015e8:	f7ff ffb8 	bl	800155c <HAL_RCC_GetPCLK2Freq>
 80015ec:	2519      	movs	r5, #25
 80015ee:	fb05 f300 	mul.w	r3, r5, r0
 80015f2:	6860      	ldr	r0, [r4, #4]
 80015f4:	f04f 0964 	mov.w	r9, #100	; 0x64
 80015f8:	0040      	lsls	r0, r0, #1
 80015fa:	fbb3 f3f0 	udiv	r3, r3, r0
 80015fe:	fbb3 f3f9 	udiv	r3, r3, r9
 8001602:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001606:	f7ff ffa9 	bl	800155c <HAL_RCC_GetPCLK2Freq>
 800160a:	6863      	ldr	r3, [r4, #4]
 800160c:	4368      	muls	r0, r5
 800160e:	005b      	lsls	r3, r3, #1
 8001610:	fbb0 f7f3 	udiv	r7, r0, r3
 8001614:	f7ff ffa2 	bl	800155c <HAL_RCC_GetPCLK2Freq>
 8001618:	6863      	ldr	r3, [r4, #4]
 800161a:	4368      	muls	r0, r5
 800161c:	005b      	lsls	r3, r3, #1
 800161e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001622:	fbb3 f3f9 	udiv	r3, r3, r9
 8001626:	fb09 7313 	mls	r3, r9, r3, r7
 800162a:	00db      	lsls	r3, r3, #3
 800162c:	3332      	adds	r3, #50	; 0x32
 800162e:	fbb3 f3f9 	udiv	r3, r3, r9
 8001632:	005b      	lsls	r3, r3, #1
 8001634:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8001638:	f7ff ff90 	bl	800155c <HAL_RCC_GetPCLK2Freq>
 800163c:	6862      	ldr	r2, [r4, #4]
 800163e:	4368      	muls	r0, r5
 8001640:	0052      	lsls	r2, r2, #1
 8001642:	fbb0 faf2 	udiv	sl, r0, r2
 8001646:	f7ff ff89 	bl	800155c <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800164a:	6863      	ldr	r3, [r4, #4]
 800164c:	4368      	muls	r0, r5
 800164e:	005b      	lsls	r3, r3, #1
 8001650:	fbb0 f3f3 	udiv	r3, r0, r3
 8001654:	fbb3 f3f9 	udiv	r3, r3, r9
 8001658:	fb09 a313 	mls	r3, r9, r3, sl
 800165c:	00db      	lsls	r3, r3, #3
 800165e:	3332      	adds	r3, #50	; 0x32
 8001660:	fbb3 f3f9 	udiv	r3, r3, r9
 8001664:	f003 0307 	and.w	r3, r3, #7
 8001668:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800166a:	443b      	add	r3, r7
 800166c:	60b3      	str	r3, [r6, #8]
 800166e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001672:	f7ff ff63 	bl	800153c <HAL_RCC_GetPCLK1Freq>
 8001676:	2519      	movs	r5, #25
 8001678:	fb05 f300 	mul.w	r3, r5, r0
 800167c:	6860      	ldr	r0, [r4, #4]
 800167e:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001682:	0040      	lsls	r0, r0, #1
 8001684:	fbb3 f3f0 	udiv	r3, r3, r0
 8001688:	fbb3 f3f9 	udiv	r3, r3, r9
 800168c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001690:	f7ff ff54 	bl	800153c <HAL_RCC_GetPCLK1Freq>
 8001694:	6863      	ldr	r3, [r4, #4]
 8001696:	4368      	muls	r0, r5
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	fbb0 f7f3 	udiv	r7, r0, r3
 800169e:	f7ff ff4d 	bl	800153c <HAL_RCC_GetPCLK1Freq>
 80016a2:	6863      	ldr	r3, [r4, #4]
 80016a4:	4368      	muls	r0, r5
 80016a6:	005b      	lsls	r3, r3, #1
 80016a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80016ac:	fbb3 f3f9 	udiv	r3, r3, r9
 80016b0:	fb09 7313 	mls	r3, r9, r3, r7
 80016b4:	00db      	lsls	r3, r3, #3
 80016b6:	3332      	adds	r3, #50	; 0x32
 80016b8:	fbb3 f3f9 	udiv	r3, r3, r9
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 80016c2:	f7ff ff3b 	bl	800153c <HAL_RCC_GetPCLK1Freq>
 80016c6:	6862      	ldr	r2, [r4, #4]
 80016c8:	4368      	muls	r0, r5
 80016ca:	0052      	lsls	r2, r2, #1
 80016cc:	fbb0 faf2 	udiv	sl, r0, r2
 80016d0:	f7ff ff34 	bl	800153c <HAL_RCC_GetPCLK1Freq>
 80016d4:	e7b9      	b.n	800164a <UART_SetConfig+0xb2>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80016d6:	429e      	cmp	r6, r3
 80016d8:	d002      	beq.n	80016e0 <UART_SetConfig+0x148>
 80016da:	4b3b      	ldr	r3, [pc, #236]	; (80017c8 <UART_SetConfig+0x230>)
 80016dc:	429e      	cmp	r6, r3
 80016de:	d140      	bne.n	8001762 <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80016e0:	f7ff ff3c 	bl	800155c <HAL_RCC_GetPCLK2Freq>
 80016e4:	6867      	ldr	r7, [r4, #4]
 80016e6:	2519      	movs	r5, #25
 80016e8:	f04f 0964 	mov.w	r9, #100	; 0x64
 80016ec:	fb05 f300 	mul.w	r3, r5, r0
 80016f0:	00bf      	lsls	r7, r7, #2
 80016f2:	fbb3 f3f7 	udiv	r3, r3, r7
 80016f6:	fbb3 f3f9 	udiv	r3, r3, r9
 80016fa:	011f      	lsls	r7, r3, #4
 80016fc:	f7ff ff2e 	bl	800155c <HAL_RCC_GetPCLK2Freq>
 8001700:	6863      	ldr	r3, [r4, #4]
 8001702:	4368      	muls	r0, r5
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	fbb0 f8f3 	udiv	r8, r0, r3
 800170a:	f7ff ff27 	bl	800155c <HAL_RCC_GetPCLK2Freq>
 800170e:	6863      	ldr	r3, [r4, #4]
 8001710:	4368      	muls	r0, r5
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	fbb0 f3f3 	udiv	r3, r0, r3
 8001718:	fbb3 f3f9 	udiv	r3, r3, r9
 800171c:	fb09 8313 	mls	r3, r9, r3, r8
 8001720:	011b      	lsls	r3, r3, #4
 8001722:	3332      	adds	r3, #50	; 0x32
 8001724:	fbb3 f3f9 	udiv	r3, r3, r9
 8001728:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 800172c:	f7ff ff16 	bl	800155c <HAL_RCC_GetPCLK2Freq>
 8001730:	6862      	ldr	r2, [r4, #4]
 8001732:	4368      	muls	r0, r5
 8001734:	0092      	lsls	r2, r2, #2
 8001736:	fbb0 faf2 	udiv	sl, r0, r2
 800173a:	f7ff ff0f 	bl	800155c <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800173e:	6863      	ldr	r3, [r4, #4]
 8001740:	4368      	muls	r0, r5
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	fbb0 f3f3 	udiv	r3, r0, r3
 8001748:	fbb3 f3f9 	udiv	r3, r3, r9
 800174c:	fb09 a313 	mls	r3, r9, r3, sl
 8001750:	011b      	lsls	r3, r3, #4
 8001752:	3332      	adds	r3, #50	; 0x32
 8001754:	fbb3 f3f9 	udiv	r3, r3, r9
 8001758:	f003 030f 	and.w	r3, r3, #15
 800175c:	ea43 0308 	orr.w	r3, r3, r8
 8001760:	e783      	b.n	800166a <UART_SetConfig+0xd2>
 8001762:	f7ff feeb 	bl	800153c <HAL_RCC_GetPCLK1Freq>
 8001766:	6867      	ldr	r7, [r4, #4]
 8001768:	2519      	movs	r5, #25
 800176a:	f04f 0964 	mov.w	r9, #100	; 0x64
 800176e:	fb05 f300 	mul.w	r3, r5, r0
 8001772:	00bf      	lsls	r7, r7, #2
 8001774:	fbb3 f3f7 	udiv	r3, r3, r7
 8001778:	fbb3 f3f9 	udiv	r3, r3, r9
 800177c:	011f      	lsls	r7, r3, #4
 800177e:	f7ff fedd 	bl	800153c <HAL_RCC_GetPCLK1Freq>
 8001782:	6863      	ldr	r3, [r4, #4]
 8001784:	4368      	muls	r0, r5
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	fbb0 f8f3 	udiv	r8, r0, r3
 800178c:	f7ff fed6 	bl	800153c <HAL_RCC_GetPCLK1Freq>
 8001790:	6863      	ldr	r3, [r4, #4]
 8001792:	4368      	muls	r0, r5
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	fbb0 f3f3 	udiv	r3, r0, r3
 800179a:	fbb3 f3f9 	udiv	r3, r3, r9
 800179e:	fb09 8313 	mls	r3, r9, r3, r8
 80017a2:	011b      	lsls	r3, r3, #4
 80017a4:	3332      	adds	r3, #50	; 0x32
 80017a6:	fbb3 f3f9 	udiv	r3, r3, r9
 80017aa:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 80017ae:	f7ff fec5 	bl	800153c <HAL_RCC_GetPCLK1Freq>
 80017b2:	6862      	ldr	r2, [r4, #4]
 80017b4:	4368      	muls	r0, r5
 80017b6:	0092      	lsls	r2, r2, #2
 80017b8:	fbb0 faf2 	udiv	sl, r0, r2
 80017bc:	f7ff febe 	bl	800153c <HAL_RCC_GetPCLK1Freq>
 80017c0:	e7bd      	b.n	800173e <UART_SetConfig+0x1a6>
 80017c2:	bf00      	nop
 80017c4:	40011000 	.word	0x40011000
 80017c8:	40011400 	.word	0x40011400

080017cc <HAL_UART_Init>:
{
 80017cc:	b510      	push	{r4, lr}
  if(huart == NULL)
 80017ce:	4604      	mov	r4, r0
 80017d0:	b340      	cbz	r0, 8001824 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 80017d2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80017d6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80017da:	b91b      	cbnz	r3, 80017e4 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80017dc:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80017e0:	f000 fb0a 	bl	8001df8 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80017e4:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80017e6:	2324      	movs	r3, #36	; 0x24
 80017e8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80017ec:	68d3      	ldr	r3, [r2, #12]
 80017ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80017f2:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80017f4:	4620      	mov	r0, r4
 80017f6:	f7ff fecf 	bl	8001598 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80017fa:	6823      	ldr	r3, [r4, #0]
 80017fc:	691a      	ldr	r2, [r3, #16]
 80017fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001802:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001804:	695a      	ldr	r2, [r3, #20]
 8001806:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800180a:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800180c:	68da      	ldr	r2, [r3, #12]
 800180e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001812:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001814:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8001816:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001818:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800181a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800181e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8001822:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001824:	2001      	movs	r0, #1
}
 8001826:	bd10      	pop	{r4, pc}

08001828 <HAL_UART_TxCpltCallback>:
 8001828:	4770      	bx	lr

0800182a <HAL_UART_RxCpltCallback>:
 800182a:	4770      	bx	lr

0800182c <UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 800182c:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8001830:	2b22      	cmp	r3, #34	; 0x22
{
 8001832:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8001834:	d132      	bne.n	800189c <UART_Receive_IT+0x70>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001836:	6883      	ldr	r3, [r0, #8]
 8001838:	6901      	ldr	r1, [r0, #16]
 800183a:	6802      	ldr	r2, [r0, #0]
 800183c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001840:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001842:	d11f      	bne.n	8001884 <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001844:	6852      	ldr	r2, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001846:	b9c9      	cbnz	r1, 800187c <UART_Receive_IT+0x50>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001848:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800184c:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8001850:	6283      	str	r3, [r0, #40]	; 0x28
    if(--huart->RxXferCount == 0U)
 8001852:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8001854:	3c01      	subs	r4, #1
 8001856:	b2a4      	uxth	r4, r4
 8001858:	85c4      	strh	r4, [r0, #46]	; 0x2e
 800185a:	b96c      	cbnz	r4, 8001878 <UART_Receive_IT+0x4c>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800185c:	6803      	ldr	r3, [r0, #0]
 800185e:	68da      	ldr	r2, [r3, #12]
 8001860:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001864:	60da      	str	r2, [r3, #12]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001866:	695a      	ldr	r2, [r3, #20]
 8001868:	f022 0201 	bic.w	r2, r2, #1
 800186c:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 800186e:	2320      	movs	r3, #32
 8001870:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8001874:	f7ff ffd9 	bl	800182a <HAL_UART_RxCpltCallback>
    if(--huart->RxXferCount == 0U)
 8001878:	2000      	movs	r0, #0
}
 800187a:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800187c:	b2d2      	uxtb	r2, r2
 800187e:	f823 2b01 	strh.w	r2, [r3], #1
 8001882:	e7e5      	b.n	8001850 <UART_Receive_IT+0x24>
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001884:	b921      	cbnz	r1, 8001890 <UART_Receive_IT+0x64>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001886:	1c59      	adds	r1, r3, #1
 8001888:	6852      	ldr	r2, [r2, #4]
 800188a:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800188c:	701a      	strb	r2, [r3, #0]
 800188e:	e7e0      	b.n	8001852 <UART_Receive_IT+0x26>
 8001890:	6852      	ldr	r2, [r2, #4]
 8001892:	1c59      	adds	r1, r3, #1
 8001894:	6281      	str	r1, [r0, #40]	; 0x28
 8001896:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800189a:	e7f7      	b.n	800188c <UART_Receive_IT+0x60>
    return HAL_BUSY;
 800189c:	2002      	movs	r0, #2
 800189e:	bd10      	pop	{r4, pc}

080018a0 <HAL_UART_ErrorCallback>:
 80018a0:	4770      	bx	lr
	...

080018a4 <HAL_UART_IRQHandler>:
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80018a4:	6803      	ldr	r3, [r0, #0]
 80018a6:	681a      	ldr	r2, [r3, #0]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80018a8:	68d9      	ldr	r1, [r3, #12]
{
 80018aa:	b570      	push	{r4, r5, r6, lr}
  if(errorflags == RESET)
 80018ac:	0716      	lsls	r6, r2, #28
{
 80018ae:	4604      	mov	r4, r0
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80018b0:	695d      	ldr	r5, [r3, #20]
  if(errorflags == RESET)
 80018b2:	d107      	bne.n	80018c4 <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80018b4:	0696      	lsls	r6, r2, #26
 80018b6:	d55a      	bpl.n	800196e <HAL_UART_IRQHandler+0xca>
 80018b8:	068d      	lsls	r5, r1, #26
 80018ba:	d558      	bpl.n	800196e <HAL_UART_IRQHandler+0xca>
}
 80018bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 80018c0:	f7ff bfb4 	b.w	800182c <UART_Receive_IT>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80018c4:	f015 0501 	ands.w	r5, r5, #1
 80018c8:	d102      	bne.n	80018d0 <HAL_UART_IRQHandler+0x2c>
 80018ca:	f411 7f90 	tst.w	r1, #288	; 0x120
 80018ce:	d04e      	beq.n	800196e <HAL_UART_IRQHandler+0xca>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80018d0:	07d3      	lsls	r3, r2, #31
 80018d2:	d505      	bpl.n	80018e0 <HAL_UART_IRQHandler+0x3c>
 80018d4:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80018d6:	bf42      	ittt	mi
 80018d8:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 80018da:	f043 0301 	orrmi.w	r3, r3, #1
 80018de:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80018e0:	0750      	lsls	r0, r2, #29
 80018e2:	d504      	bpl.n	80018ee <HAL_UART_IRQHandler+0x4a>
 80018e4:	b11d      	cbz	r5, 80018ee <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80018e6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80018e8:	f043 0302 	orr.w	r3, r3, #2
 80018ec:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80018ee:	0793      	lsls	r3, r2, #30
 80018f0:	d504      	bpl.n	80018fc <HAL_UART_IRQHandler+0x58>
 80018f2:	b11d      	cbz	r5, 80018fc <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80018f4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80018f6:	f043 0304 	orr.w	r3, r3, #4
 80018fa:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80018fc:	0716      	lsls	r6, r2, #28
 80018fe:	d504      	bpl.n	800190a <HAL_UART_IRQHandler+0x66>
 8001900:	b11d      	cbz	r5, 800190a <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001902:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001904:	f043 0308 	orr.w	r3, r3, #8
 8001908:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 800190a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800190c:	2b00      	cmp	r3, #0
 800190e:	d066      	beq.n	80019de <HAL_UART_IRQHandler+0x13a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001910:	0695      	lsls	r5, r2, #26
 8001912:	d504      	bpl.n	800191e <HAL_UART_IRQHandler+0x7a>
 8001914:	0688      	lsls	r0, r1, #26
 8001916:	d502      	bpl.n	800191e <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 8001918:	4620      	mov	r0, r4
 800191a:	f7ff ff87 	bl	800182c <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800191e:	6823      	ldr	r3, [r4, #0]
 8001920:	695d      	ldr	r5, [r3, #20]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001922:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001924:	0711      	lsls	r1, r2, #28
        UART_EndRxTransfer(huart);
 8001926:	4620      	mov	r0, r4
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001928:	d402      	bmi.n	8001930 <HAL_UART_IRQHandler+0x8c>
 800192a:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 800192e:	d01a      	beq.n	8001966 <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 8001930:	f7ff fe24 	bl	800157c <UART_EndRxTransfer>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001934:	6823      	ldr	r3, [r4, #0]
 8001936:	695a      	ldr	r2, [r3, #20]
 8001938:	0652      	lsls	r2, r2, #25
 800193a:	d510      	bpl.n	800195e <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800193c:	695a      	ldr	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 800193e:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001940:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001944:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8001946:	b150      	cbz	r0, 800195e <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001948:	4b25      	ldr	r3, [pc, #148]	; (80019e0 <HAL_UART_IRQHandler+0x13c>)
 800194a:	6503      	str	r3, [r0, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800194c:	f7fe fedd 	bl	800070a <HAL_DMA_Abort_IT>
 8001950:	2800      	cmp	r0, #0
 8001952:	d044      	beq.n	80019de <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001954:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8001956:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800195a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800195c:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 800195e:	4620      	mov	r0, r4
 8001960:	f7ff ff9e 	bl	80018a0 <HAL_UART_ErrorCallback>
 8001964:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8001966:	f7ff ff9b 	bl	80018a0 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800196a:	63e5      	str	r5, [r4, #60]	; 0x3c
 800196c:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800196e:	0616      	lsls	r6, r2, #24
 8001970:	d527      	bpl.n	80019c2 <HAL_UART_IRQHandler+0x11e>
 8001972:	060d      	lsls	r5, r1, #24
 8001974:	d525      	bpl.n	80019c2 <HAL_UART_IRQHandler+0x11e>
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8001976:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 800197a:	2a21      	cmp	r2, #33	; 0x21
 800197c:	d12f      	bne.n	80019de <HAL_UART_IRQHandler+0x13a>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800197e:	68a2      	ldr	r2, [r4, #8]
 8001980:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001984:	6a22      	ldr	r2, [r4, #32]
 8001986:	d117      	bne.n	80019b8 <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001988:	8811      	ldrh	r1, [r2, #0]
 800198a:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800198e:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001990:	6921      	ldr	r1, [r4, #16]
 8001992:	b979      	cbnz	r1, 80019b4 <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 8001994:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 8001996:	6222      	str	r2, [r4, #32]
    if(--huart->TxXferCount == 0U)
 8001998:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 800199a:	3a01      	subs	r2, #1
 800199c:	b292      	uxth	r2, r2
 800199e:	84e2      	strh	r2, [r4, #38]	; 0x26
 80019a0:	b9ea      	cbnz	r2, 80019de <HAL_UART_IRQHandler+0x13a>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80019a2:	68da      	ldr	r2, [r3, #12]
 80019a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019a8:	60da      	str	r2, [r3, #12]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80019aa:	68da      	ldr	r2, [r3, #12]
 80019ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80019b0:	60da      	str	r2, [r3, #12]
 80019b2:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 80019b4:	3201      	adds	r2, #1
 80019b6:	e7ee      	b.n	8001996 <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80019b8:	1c51      	adds	r1, r2, #1
 80019ba:	6221      	str	r1, [r4, #32]
 80019bc:	7812      	ldrb	r2, [r2, #0]
 80019be:	605a      	str	r2, [r3, #4]
 80019c0:	e7ea      	b.n	8001998 <HAL_UART_IRQHandler+0xf4>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80019c2:	0650      	lsls	r0, r2, #25
 80019c4:	d50b      	bpl.n	80019de <HAL_UART_IRQHandler+0x13a>
 80019c6:	064a      	lsls	r2, r1, #25
 80019c8:	d509      	bpl.n	80019de <HAL_UART_IRQHandler+0x13a>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80019ca:	68da      	ldr	r2, [r3, #12]
 80019cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80019d0:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80019d2:	2320      	movs	r3, #32
 80019d4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 80019d8:	4620      	mov	r0, r4
 80019da:	f7ff ff25 	bl	8001828 <HAL_UART_TxCpltCallback>
 80019de:	bd70      	pop	{r4, r5, r6, pc}
 80019e0:	080019e5 	.word	0x080019e5

080019e4 <UART_DMAAbortOnError>:
{
 80019e4:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80019e6:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 80019e8:	2300      	movs	r3, #0
 80019ea:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0U;
 80019ec:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80019ee:	f7ff ff57 	bl	80018a0 <HAL_UART_ErrorCallback>
 80019f2:	bd08      	pop	{r3, pc}

080019f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80019f4:	b530      	push	{r4, r5, lr}
 80019f6:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019f8:	4b1f      	ldr	r3, [pc, #124]	; (8001a78 <MX_GPIO_Init+0x84>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, I2C1_RST_Pin, GPIO_PIN_SET);
 80019fa:	4d20      	ldr	r5, [pc, #128]	; (8001a7c <MX_GPIO_Init+0x88>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019fc:	2400      	movs	r4, #0
 80019fe:	9400      	str	r4, [sp, #0]
 8001a00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a02:	f042 0202 	orr.w	r2, r2, #2
 8001a06:	631a      	str	r2, [r3, #48]	; 0x30
 8001a08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a0a:	f002 0202 	and.w	r2, r2, #2
 8001a0e:	9200      	str	r2, [sp, #0]
 8001a10:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a12:	9401      	str	r4, [sp, #4]
 8001a14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a16:	f042 0220 	orr.w	r2, r2, #32
 8001a1a:	631a      	str	r2, [r3, #48]	; 0x30
 8001a1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a1e:	f002 0220 	and.w	r2, r2, #32
 8001a22:	9201      	str	r2, [sp, #4]
 8001a24:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a26:	9402      	str	r4, [sp, #8]
 8001a28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a2a:	f042 0201 	orr.w	r2, r2, #1
 8001a2e:	631a      	str	r2, [r3, #48]	; 0x30
 8001a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, I2C1_RST_Pin, GPIO_PIN_SET);
 8001a38:	4628      	mov	r0, r5
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	2140      	movs	r1, #64	; 0x40
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a3e:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, I2C1_RST_Pin, GPIO_PIN_SET);
 8001a40:	f7fe ff56 	bl	80008f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_USR_GPIO_Port, LED_USR_Pin, GPIO_PIN_RESET);
 8001a44:	4622      	mov	r2, r4
 8001a46:	4628      	mov	r0, r5
 8001a48:	2120      	movs	r1, #32
 8001a4a:	f7fe ff51 	bl	80008f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT0_Pin;
 8001a4e:	f44f 7380 	mov.w	r3, #256	; 0x100
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BOOT0_GPIO_Port, &GPIO_InitStruct);
 8001a52:	a903      	add	r1, sp, #12
 8001a54:	480a      	ldr	r0, [pc, #40]	; (8001a80 <MX_GPIO_Init+0x8c>)
  GPIO_InitStruct.Pin = BOOT0_Pin;
 8001a56:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a58:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5a:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(BOOT0_GPIO_Port, &GPIO_InitStruct);
 8001a5c:	f7fe fe68 	bl	8000730 <HAL_GPIO_Init>


  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2C1_INT_Pin;
 8001a60:	2380      	movs	r3, #128	; 0x80
 8001a62:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(I2C1_INT_GPIO_Port, &GPIO_InitStruct);
 8001a64:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a66:	4b07      	ldr	r3, [pc, #28]	; (8001a84 <MX_GPIO_Init+0x90>)
 8001a68:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(I2C1_INT_GPIO_Port, &GPIO_InitStruct);
 8001a6a:	4628      	mov	r0, r5
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6c:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(I2C1_INT_GPIO_Port, &GPIO_InitStruct);
 8001a6e:	f7fe fe5f 	bl	8000730 <HAL_GPIO_Init>

}
 8001a72:	b009      	add	sp, #36	; 0x24
 8001a74:	bd30      	pop	{r4, r5, pc}
 8001a76:	bf00      	nop
 8001a78:	40023800 	.word	0x40023800
 8001a7c:	40020000 	.word	0x40020000
 8001a80:	40020400 	.word	0x40020400
 8001a84:	10110000 	.word	0x10110000

08001a88 <MX_I2C1_Init>:

/* I2C1 init function */
void MX_I2C1_Init(void)
{

  hi2c1.Instance = I2C1;
 8001a88:	480c      	ldr	r0, [pc, #48]	; (8001abc <MX_I2C1_Init+0x34>)
{
 8001a8a:	b508      	push	{r3, lr}
  hi2c1.Instance = I2C1;
 8001a8c:	4b0c      	ldr	r3, [pc, #48]	; (8001ac0 <MX_I2C1_Init+0x38>)
 8001a8e:	6003      	str	r3, [r0, #0]
  hi2c1.Init.OwnAddress1 = 0x29;
 8001a90:	2329      	movs	r3, #41	; 0x29
 8001a92:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a94:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a98:	6103      	str	r3, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0xFE;
 8001a9a:	22fe      	movs	r2, #254	; 0xfe
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0xFE;
 8001aa0:	6182      	str	r2, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001aa2:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001aa4:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001aa6:	f7ff f8f1 	bl	8000c8c <HAL_I2C_Init>
 8001aaa:	b128      	cbz	r0, 8001ab8 <MX_I2C1_Init+0x30>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001aac:	214a      	movs	r1, #74	; 0x4a
 8001aae:	4805      	ldr	r0, [pc, #20]	; (8001ac4 <MX_I2C1_Init+0x3c>)
  }

}
 8001ab0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8001ab4:	f000 b914 	b.w	8001ce0 <_Error_Handler>
 8001ab8:	bd08      	pop	{r3, pc}
 8001aba:	bf00      	nop
 8001abc:	20000350 	.word	0x20000350
 8001ac0:	40005400 	.word	0x40005400
 8001ac4:	080051fc 	.word	0x080051fc

08001ac8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001ac8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

	  GPIO_InitTypeDef GPIO_InitStruct;
	  if(i2cHandle->Instance==I2C1)
 8001aca:	6802      	ldr	r2, [r0, #0]
 8001acc:	4b10      	ldr	r3, [pc, #64]	; (8001b10 <HAL_I2C_MspInit+0x48>)
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d11a      	bne.n	8001b08 <HAL_I2C_MspInit+0x40>

	    /**I2C1 GPIO Configuration
	    PB6     ------> I2C1_SCL
	    PB7     ------> I2C1_SDA
	    */
	    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ad2:	23c0      	movs	r3, #192	; 0xc0
 8001ad4:	9301      	str	r3, [sp, #4]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ad6:	2312      	movs	r3, #18
 8001ad8:	9302      	str	r3, [sp, #8]
	    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ada:	2301      	movs	r3, #1
 8001adc:	9303      	str	r3, [sp, #12]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	9304      	str	r3, [sp, #16]
	    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ae2:	2304      	movs	r3, #4
	    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ae4:	eb0d 0103 	add.w	r1, sp, r3
 8001ae8:	480a      	ldr	r0, [pc, #40]	; (8001b14 <HAL_I2C_MspInit+0x4c>)
	    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001aea:	9305      	str	r3, [sp, #20]
	    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aec:	f7fe fe20 	bl	8000730 <HAL_GPIO_Init>

	    /* I2C1 clock enable */
	    __HAL_RCC_I2C1_CLK_ENABLE();
 8001af0:	2300      	movs	r3, #0
 8001af2:	9300      	str	r3, [sp, #0]
 8001af4:	4b08      	ldr	r3, [pc, #32]	; (8001b18 <HAL_I2C_MspInit+0x50>)
 8001af6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001af8:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001afc:	641a      	str	r2, [r3, #64]	; 0x40
 8001afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b04:	9300      	str	r3, [sp, #0]
 8001b06:	9b00      	ldr	r3, [sp, #0]
	  /* USER CODE BEGIN I2C1_MspInit 1 */

	  /* USER CODE END I2C1_MspInit 1 */
	  }
}
 8001b08:	b007      	add	sp, #28
 8001b0a:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b0e:	bf00      	nop
 8001b10:	40005400 	.word	0x40005400
 8001b14:	40020400 	.word	0x40020400
 8001b18:	40023800 	.word	0x40023800

08001b1c <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8001b1c:	b510      	push	{r4, lr}
 8001b1e:	b094      	sub	sp, #80	; 0x50
	  RCC_OscInitTypeDef RCC_OscInitStruct;
	  RCC_ClkInitTypeDef RCC_ClkInitStruct;

	    /**Configure the main internal regulator output voltage
	    */
	  __HAL_RCC_PWR_CLK_ENABLE();
 8001b20:	2300      	movs	r3, #0
 8001b22:	4a21      	ldr	r2, [pc, #132]	; (8001ba8 <SystemClock_Config+0x8c>)
 8001b24:	9301      	str	r3, [sp, #4]
 8001b26:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8001b28:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8001b2c:	6411      	str	r1, [r2, #64]	; 0x40
 8001b2e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001b30:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8001b34:	9201      	str	r2, [sp, #4]
 8001b36:	9a01      	ldr	r2, [sp, #4]

	  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b38:	4a1c      	ldr	r2, [pc, #112]	; (8001bac <SystemClock_Config+0x90>)
 8001b3a:	9302      	str	r3, [sp, #8]
 8001b3c:	6811      	ldr	r1, [r2, #0]
 8001b3e:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8001b42:	6011      	str	r1, [r2, #0]
 8001b44:	6812      	ldr	r2, [r2, #0]
	    /**Initializes the CPU, AHB and APB busses clocks
	    */
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
	  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
	  RCC_OscInitStruct.HSICalibrationValue = 16;
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001b46:	930e      	str	r3, [sp, #56]	; 0x38
	  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b48:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001b4c:	9202      	str	r2, [sp, #8]
 8001b4e:	9a02      	ldr	r2, [sp, #8]
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b50:	2202      	movs	r2, #2
 8001b52:	9208      	str	r2, [sp, #32]
	  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b54:	2201      	movs	r2, #1
 8001b56:	920b      	str	r2, [sp, #44]	; 0x2c
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b58:	a808      	add	r0, sp, #32
	  RCC_OscInitStruct.HSICalibrationValue = 16;
 8001b5a:	2210      	movs	r2, #16
 8001b5c:	920c      	str	r2, [sp, #48]	; 0x30
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b5e:	f7ff faa9 	bl	80010b4 <HAL_RCC_OscConfig>
 8001b62:	4601      	mov	r1, r0
 8001b64:	b100      	cbz	r0, 8001b68 <SystemClock_Config+0x4c>
 8001b66:	e7fe      	b.n	8001b66 <SystemClock_Config+0x4a>
	    _Error_Handler(__FILE__, __LINE__);
	  }

	    /**Initializes the CPU, AHB and APB busses clocks
	    */
	  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b68:	230f      	movs	r3, #15
	                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001b6a:	9004      	str	r0, [sp, #16]
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b6c:	9005      	str	r0, [sp, #20]
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b6e:	9006      	str	r0, [sp, #24]
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b70:	9007      	str	r0, [sp, #28]

	  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001b72:	a803      	add	r0, sp, #12
	  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b74:	9303      	str	r3, [sp, #12]
	  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001b76:	f7ff fc41 	bl	80013fc <HAL_RCC_ClockConfig>
 8001b7a:	4604      	mov	r4, r0
 8001b7c:	b100      	cbz	r0, 8001b80 <SystemClock_Config+0x64>
 8001b7e:	e7fe      	b.n	8001b7e <SystemClock_Config+0x62>
	    _Error_Handler(__FILE__, __LINE__);
	  }

	    /**Configure the Systick interrupt time
	    */
	  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001b80:	f7ff fcd6 	bl	8001530 <HAL_RCC_GetHCLKFreq>
 8001b84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b88:	fbb0 f0f3 	udiv	r0, r0, r3
 8001b8c:	f7fe fd96 	bl	80006bc <HAL_SYSTICK_Config>

	    /**Configure the Systick
	    */
	  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001b90:	2004      	movs	r0, #4
 8001b92:	f7fe fda9 	bl	80006e8 <HAL_SYSTICK_CLKSourceConfig>

	  /* SysTick_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001b96:	4622      	mov	r2, r4
 8001b98:	4621      	mov	r1, r4
 8001b9a:	f04f 30ff 	mov.w	r0, #4294967295
 8001b9e:	f7fe fd4d 	bl	800063c <HAL_NVIC_SetPriority>
}
 8001ba2:	b014      	add	sp, #80	; 0x50
 8001ba4:	bd10      	pop	{r4, pc}
 8001ba6:	bf00      	nop
 8001ba8:	40023800 	.word	0x40023800
 8001bac:	40007000 	.word	0x40007000

08001bb0 <main>:
{
 8001bb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001bb4:	b0e2      	sub	sp, #392	; 0x188
  HAL_Init();
 8001bb6:	f7fe fcf7 	bl	80005a8 <HAL_Init>
  SystemClock_Config();
 8001bba:	f7ff ffaf 	bl	8001b1c <SystemClock_Config>
  MX_GPIO_Init();
 8001bbe:	f7ff ff19 	bl	80019f4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001bc2:	f7ff ff61 	bl	8001a88 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001bc6:	f000 f8f7 	bl	8001db8 <MX_USART2_UART_Init>
  dev.addr = 0x52;
 8001bca:	2352      	movs	r3, #82	; 0x52
 8001bcc:	f88d 3184 	strb.w	r3, [sp, #388]	; 0x184
  VL53L0X_Error status = VL53L0X_i2c_init();
 8001bd0:	f002 faf2 	bl	80041b8 <VL53L0X_i2c_init>
  status = VL53L0X_DataInit(&dev);
 8001bd4:	a80a      	add	r0, sp, #40	; 0x28
 8001bd6:	f000 fb0b 	bl	80021f0 <VL53L0X_DataInit>
  if (status != VL53L0X_ERROR_NONE) {
 8001bda:	2800      	cmp	r0, #0
 8001bdc:	d038      	beq.n	8001c50 <main+0xa0>
      printf("data init failed");
 8001bde:	4836      	ldr	r0, [pc, #216]	; (8001cb8 <main+0x108>)
 8001be0:	f002 fbc2 	bl	8004368 <iprintf>
      sensor_error = true;
 8001be4:	2401      	movs	r4, #1
  status = VL53L0X_StaticInit(&dev);
 8001be6:	a80a      	add	r0, sp, #40	; 0x28
 8001be8:	f000 fe38 	bl	800285c <VL53L0X_StaticInit>
  if (status != VL53L0X_ERROR_NONE) {
 8001bec:	b118      	cbz	r0, 8001bf6 <main+0x46>
      printf("static init failed");
 8001bee:	4833      	ldr	r0, [pc, #204]	; (8001cbc <main+0x10c>)
 8001bf0:	f002 fbba 	bl	8004368 <iprintf>
      sensor_error = true;
 8001bf4:	2401      	movs	r4, #1
  status = VL53L0X_PerformRefCalibration(&dev, &vhv_settings, &phase_cal);
 8001bf6:	f10d 0205 	add.w	r2, sp, #5
 8001bfa:	a901      	add	r1, sp, #4
 8001bfc:	a80a      	add	r0, sp, #40	; 0x28
 8001bfe:	f000 fbc1 	bl	8002384 <VL53L0X_PerformRefCalibration>
  if (status != VL53L0X_ERROR_NONE) {
 8001c02:	b118      	cbz	r0, 8001c0c <main+0x5c>
      printf("reference calibration failed");
 8001c04:	482e      	ldr	r0, [pc, #184]	; (8001cc0 <main+0x110>)
 8001c06:	f002 fbaf 	bl	8004368 <iprintf>
      sensor_error = true;
 8001c0a:	2401      	movs	r4, #1
  status = VL53L0X_PerformRefSpadManagement(&dev,
 8001c0c:	f10d 0206 	add.w	r2, sp, #6
 8001c10:	a902      	add	r1, sp, #8
 8001c12:	a80a      	add	r0, sp, #40	; 0x28
 8001c14:	f000 ff27 	bl	8002a66 <VL53L0X_PerformRefSpadManagement>
  if (status != VL53L0X_ERROR_NONE) {
 8001c18:	b118      	cbz	r0, 8001c22 <main+0x72>
	  printf("spad management failed");
 8001c1a:	482a      	ldr	r0, [pc, #168]	; (8001cc4 <main+0x114>)
 8001c1c:	f002 fba4 	bl	8004368 <iprintf>
      sensor_error = true;
 8001c20:	2401      	movs	r4, #1
  status = VL53L0X_SetDeviceMode(&dev, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING);
 8001c22:	2101      	movs	r1, #1
 8001c24:	a80a      	add	r0, sp, #40	; 0x28
 8001c26:	f000 f91f 	bl	8001e68 <VL53L0X_SetDeviceMode>
  if (status != VL53L0X_ERROR_NONE) {
 8001c2a:	b118      	cbz	r0, 8001c34 <main+0x84>
	  printf("set device mode failed");
 8001c2c:	4826      	ldr	r0, [pc, #152]	; (8001cc8 <main+0x118>)
 8001c2e:	f002 fb9b 	bl	8004368 <iprintf>
      sensor_error = true;
 8001c32:	2401      	movs	r4, #1
  status = VL53L0X_StartMeasurement(&dev);
 8001c34:	a80a      	add	r0, sp, #40	; 0x28
 8001c36:	f000 fca5 	bl	8002584 <VL53L0X_StartMeasurement>
  if (status != VL53L0X_ERROR_NONE) {
 8001c3a:	b158      	cbz	r0, 8001c54 <main+0xa4>
	  printf("start measurement failed");
 8001c3c:	4823      	ldr	r0, [pc, #140]	; (8001ccc <main+0x11c>)
 8001c3e:	f002 fb93 	bl	8004368 <iprintf>
      HAL_GPIO_WritePin(LED_USR_GPIO_Port, LED_USR_Pin, 0);
 8001c42:	2200      	movs	r2, #0
 8001c44:	2120      	movs	r1, #32
 8001c46:	4822      	ldr	r0, [pc, #136]	; (8001cd0 <main+0x120>)
 8001c48:	f7fe fe52 	bl	80008f0 <HAL_GPIO_WritePin>
 8001c4c:	2401      	movs	r4, #1
 8001c4e:	e003      	b.n	8001c58 <main+0xa8>
  bool sensor_error = false;
 8001c50:	4604      	mov	r4, r0
 8001c52:	e7c8      	b.n	8001be6 <main+0x36>
  if (sensor_error) {
 8001c54:	2c00      	cmp	r4, #0
 8001c56:	d1f4      	bne.n	8001c42 <main+0x92>
          printf("in loop measurement %d \n", data.RangeMilliMeter);
 8001c58:	4e1e      	ldr	r6, [pc, #120]	; (8001cd4 <main+0x124>)
        	  printf("getting measurement data failed");
 8001c5a:	4f1f      	ldr	r7, [pc, #124]	; (8001cd8 <main+0x128>)
    	  printf("getting measurement data ready flag failed");
 8001c5c:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8001cdc <main+0x12c>
      if (sensor_error) {
 8001c60:	b124      	cbz	r4, 8001c6c <main+0xbc>
          HAL_Delay(1000);
 8001c62:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c66:	f7fe fcc7 	bl	80005f8 <HAL_Delay>
 8001c6a:	e7f9      	b.n	8001c60 <main+0xb0>
      status = VL53L0X_GetMeasurementDataReady(&dev, &new_data_ready);
 8001c6c:	f10d 0107 	add.w	r1, sp, #7
 8001c70:	a80a      	add	r0, sp, #40	; 0x28
      uint8_t new_data_ready = 0;
 8001c72:	f88d 4007 	strb.w	r4, [sp, #7]
      status = VL53L0X_GetMeasurementDataReady(&dev, &new_data_ready);
 8001c76:	f000 fed8 	bl	8002a2a <VL53L0X_GetMeasurementDataReady>
      if (status != VL53L0X_ERROR_NONE) {
 8001c7a:	b110      	cbz	r0, 8001c82 <main+0xd2>
    	  printf("getting measurement data ready flag failed");
 8001c7c:	4640      	mov	r0, r8
 8001c7e:	f002 fb73 	bl	8004368 <iprintf>
      if (new_data_ready) {
 8001c82:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001c86:	b193      	cbz	r3, 8001cae <main+0xfe>
          status = VL53L0X_GetRangingMeasurementData(&dev, &data);
 8001c88:	a903      	add	r1, sp, #12
 8001c8a:	a80a      	add	r0, sp, #40	; 0x28
 8001c8c:	f000 fb7d 	bl	800238a <VL53L0X_GetRangingMeasurementData>
          if (status != VL53L0X_ERROR_NONE)
 8001c90:	4605      	mov	r5, r0
 8001c92:	b110      	cbz	r0, 8001c9a <main+0xea>
        	  printf("getting measurement data failed");
 8001c94:	4638      	mov	r0, r7
 8001c96:	f002 fb67 	bl	8004368 <iprintf>
          printf("in loop measurement %d \n", data.RangeMilliMeter);
 8001c9a:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8001c9e:	4630      	mov	r0, r6
 8001ca0:	f002 fb62 	bl	8004368 <iprintf>
          if (status == VL53L0X_ERROR_NONE)
 8001ca4:	b91d      	cbnz	r5, 8001cae <main+0xfe>
              status = VL53L0X_ClearInterruptMask(&dev, VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY);
 8001ca6:	2104      	movs	r1, #4
 8001ca8:	a80a      	add	r0, sp, #40	; 0x28
 8001caa:	f000 fce9 	bl	8002680 <VL53L0X_ClearInterruptMask>
      HAL_Delay(1000 / MEASUREMENT_RATE_HZ);
 8001cae:	2021      	movs	r0, #33	; 0x21
 8001cb0:	f7fe fca2 	bl	80005f8 <HAL_Delay>
 8001cb4:	e7da      	b.n	8001c6c <main+0xbc>
 8001cb6:	bf00      	nop
 8001cb8:	08005209 	.word	0x08005209
 8001cbc:	0800521a 	.word	0x0800521a
 8001cc0:	0800522d 	.word	0x0800522d
 8001cc4:	0800524a 	.word	0x0800524a
 8001cc8:	08005261 	.word	0x08005261
 8001ccc:	08005278 	.word	0x08005278
 8001cd0:	40020000 	.word	0x40020000
 8001cd4:	080052dc 	.word	0x080052dc
 8001cd8:	080052bc 	.word	0x080052bc
 8001cdc:	08005291 	.word	0x08005291

08001ce0 <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 8001ce0:	e7fe      	b.n	8001ce0 <_Error_Handler>

08001ce2 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ce2:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ce4:	2003      	movs	r0, #3
 8001ce6:	f7fe fc97 	bl	8000618 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001cea:	2200      	movs	r2, #0
 8001cec:	4611      	mov	r1, r2
 8001cee:	f06f 000b 	mvn.w	r0, #11
 8001cf2:	f7fe fca3 	bl	800063c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	4611      	mov	r1, r2
 8001cfa:	f06f 000a 	mvn.w	r0, #10
 8001cfe:	f7fe fc9d 	bl	800063c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001d02:	2200      	movs	r2, #0
 8001d04:	4611      	mov	r1, r2
 8001d06:	f06f 0009 	mvn.w	r0, #9
 8001d0a:	f7fe fc97 	bl	800063c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001d0e:	2200      	movs	r2, #0
 8001d10:	4611      	mov	r1, r2
 8001d12:	f06f 0004 	mvn.w	r0, #4
 8001d16:	f7fe fc91 	bl	800063c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	4611      	mov	r1, r2
 8001d1e:	f06f 0003 	mvn.w	r0, #3
 8001d22:	f7fe fc8b 	bl	800063c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001d26:	2200      	movs	r2, #0
 8001d28:	4611      	mov	r1, r2
 8001d2a:	f06f 0001 	mvn.w	r0, #1
 8001d2e:	f7fe fc85 	bl	800063c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001d32:	2200      	movs	r2, #0
 8001d34:	4611      	mov	r1, r2
 8001d36:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001d3e:	f7fe bc7d 	b.w	800063c <HAL_NVIC_SetPriority>

08001d42 <NMI_Handler>:
 8001d42:	4770      	bx	lr

08001d44 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8001d44:	e7fe      	b.n	8001d44 <HardFault_Handler>

08001d46 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8001d46:	e7fe      	b.n	8001d46 <MemManage_Handler>

08001d48 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8001d48:	e7fe      	b.n	8001d48 <BusFault_Handler>

08001d4a <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8001d4a:	e7fe      	b.n	8001d4a <UsageFault_Handler>

08001d4c <SVC_Handler>:
 8001d4c:	4770      	bx	lr

08001d4e <DebugMon_Handler>:
 8001d4e:	4770      	bx	lr

08001d50 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8001d50:	4770      	bx	lr

08001d52 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001d52:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d54:	f7fe fc42 	bl	80005dc <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d58:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8001d5c:	f7fe bcd1 	b.w	8000702 <HAL_SYSTICK_IRQHandler>

08001d60 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d60:	4801      	ldr	r0, [pc, #4]	; (8001d68 <USART2_IRQHandler+0x8>)
 8001d62:	f7ff bd9f 	b.w	80018a4 <HAL_UART_IRQHandler>
 8001d66:	bf00      	nop
 8001d68:	200003a4 	.word	0x200003a4

08001d6c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d6c:	490f      	ldr	r1, [pc, #60]	; (8001dac <SystemInit+0x40>)
 8001d6e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001d72:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001d7a:	4b0d      	ldr	r3, [pc, #52]	; (8001db0 <SystemInit+0x44>)
 8001d7c:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001d7e:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8001d80:	f042 0201 	orr.w	r2, r2, #1
 8001d84:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8001d86:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001d8e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001d92:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001d94:	4a07      	ldr	r2, [pc, #28]	; (8001db4 <SystemInit+0x48>)
 8001d96:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001d9e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001da0:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001da2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001da6:	608b      	str	r3, [r1, #8]
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	e000ed00 	.word	0xe000ed00
 8001db0:	40023800 	.word	0x40023800
 8001db4:	24003010 	.word	0x24003010

08001db8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001db8:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
 8001dba:	480c      	ldr	r0, [pc, #48]	; (8001dec <MX_USART2_UART_Init+0x34>)
  huart2.Init.BaudRate = 115200;
 8001dbc:	4b0c      	ldr	r3, [pc, #48]	; (8001df0 <MX_USART2_UART_Init+0x38>)
 8001dbe:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 8001dc2:	e880 4008 	stmia.w	r0, {r3, lr}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001dc6:	220c      	movs	r2, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001dcc:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001dce:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001dd0:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dd2:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dd4:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001dd6:	f7ff fcf9 	bl	80017cc <HAL_UART_Init>
 8001dda:	b128      	cbz	r0, 8001de8 <MX_USART2_UART_Init+0x30>
    {
      _Error_Handler(__FILE__, __LINE__);
 8001ddc:	214c      	movs	r1, #76	; 0x4c
 8001dde:	4805      	ldr	r0, [pc, #20]	; (8001df4 <MX_USART2_UART_Init+0x3c>)
    }
}
 8001de0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      _Error_Handler(__FILE__, __LINE__);
 8001de4:	f7ff bf7c 	b.w	8001ce0 <_Error_Handler>
 8001de8:	bd08      	pop	{r3, pc}
 8001dea:	bf00      	nop
 8001dec:	200003a4 	.word	0x200003a4
 8001df0:	40004400 	.word	0x40004400
 8001df4:	0800530d 	.word	0x0800530d

08001df8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001df8:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART2)
 8001dfa:	6802      	ldr	r2, [r0, #0]
 8001dfc:	4b18      	ldr	r3, [pc, #96]	; (8001e60 <HAL_UART_MspInit+0x68>)
 8001dfe:	429a      	cmp	r2, r3
{
 8001e00:	b086      	sub	sp, #24
  if(uartHandle->Instance==USART2)
 8001e02:	d12a      	bne.n	8001e5a <HAL_UART_MspInit+0x62>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e04:	2500      	movs	r5, #0
 8001e06:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8001e0a:	9500      	str	r5, [sp, #0]
 8001e0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e0e:	4815      	ldr	r0, [pc, #84]	; (8001e64 <HAL_UART_MspInit+0x6c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e10:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001e14:	641a      	str	r2, [r3, #64]	; 0x40
 8001e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e18:	9503      	str	r5, [sp, #12]
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001e1e:	2402      	movs	r4, #2
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e20:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e22:	2607      	movs	r6, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e24:	a901      	add	r1, sp, #4
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e26:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001e28:	9401      	str	r4, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e2a:	9402      	str	r4, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e2c:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e2e:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e30:	f7fe fc7e 	bl	8000730 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001e34:	230c      	movs	r3, #12
 8001e36:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e38:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e3a:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e3c:	4809      	ldr	r0, [pc, #36]	; (8001e64 <HAL_UART_MspInit+0x6c>)
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e3e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e40:	9402      	str	r4, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e42:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e44:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e46:	f7fe fc73 	bl	8000730 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001e4a:	2026      	movs	r0, #38	; 0x26
 8001e4c:	462a      	mov	r2, r5
 8001e4e:	4629      	mov	r1, r5
 8001e50:	f7fe fbf4 	bl	800063c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001e54:	2026      	movs	r0, #38	; 0x26
 8001e56:	f7fe fc25 	bl	80006a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001e5a:	b006      	add	sp, #24
 8001e5c:	bd70      	pop	{r4, r5, r6, pc}
 8001e5e:	bf00      	nop
 8001e60:	40004400 	.word	0x40004400
 8001e64:	40020000 	.word	0x40020000

08001e68 <VL53L0X_SetDeviceMode>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 8001e68:	2915      	cmp	r1, #21
 8001e6a:	d807      	bhi.n	8001e7c <VL53L0X_SetDeviceMode+0x14>
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	4b05      	ldr	r3, [pc, #20]	; (8001e84 <VL53L0X_SetDeviceMode+0x1c>)
 8001e70:	408a      	lsls	r2, r1
 8001e72:	4013      	ands	r3, r2
 8001e74:	b113      	cbz	r3, 8001e7c <VL53L0X_SetDeviceMode+0x14>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 8001e76:	7401      	strb	r1, [r0, #16]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001e78:	2000      	movs	r0, #0
		break;
 8001e7a:	4770      	bx	lr
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8001e7c:	f06f 0007 	mvn.w	r0, #7
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	0030000b 	.word	0x0030000b

08001e88 <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 8001e88:	b510      	push	{r4, lr}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8001e8a:	460a      	mov	r2, r1
{
 8001e8c:	460c      	mov	r4, r1
	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8001e8e:	2109      	movs	r1, #9
 8001e90:	f002 f9e0 	bl	8004254 <VL53L0X_RdByte>

	if (Status == VL53L0X_ERROR_NONE)
 8001e94:	b918      	cbnz	r0, 8001e9e <VL53L0X_GetFractionEnable+0x16>
		*pEnabled = (*pEnabled & 1);
 8001e96:	7823      	ldrb	r3, [r4, #0]
 8001e98:	f003 0301 	and.w	r3, r3, #1
 8001e9c:	7023      	strb	r3, [r4, #0]

	LOG_FUNCTION_END(Status);
	return Status;
}
 8001e9e:	bd10      	pop	{r4, pc}

08001ea0 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 8001ea0:	f001 bdad 	b.w	80039fe <VL53L0X_set_measurement_timing_budget_micro_seconds>

08001ea4 <VL53L0X_GetVcselPulsePeriod>:
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8001ea4:	f001 bd92 	b.w	80039cc <VL53L0X_get_vcsel_pulse_period>

08001ea8 <VL53L0X_SetSequenceStepEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 8001ea8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001eaa:	4617      	mov	r7, r2
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t SequenceConfig = 0;
 8001eac:	aa02      	add	r2, sp, #8
 8001eae:	2300      	movs	r3, #0
{
 8001eb0:	460c      	mov	r4, r1
	uint8_t SequenceConfig = 0;
 8001eb2:	f802 3d01 	strb.w	r3, [r2, #-1]!
	uint8_t SequenceConfigNew = 0;
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8001eb6:	2101      	movs	r1, #1
{
 8001eb8:	4606      	mov	r6, r0
	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8001eba:	f002 f9cb 	bl	8004254 <VL53L0X_RdByte>
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;

	if (Status == VL53L0X_ERROR_NONE) {
 8001ebe:	4605      	mov	r5, r0
 8001ec0:	b9d8      	cbnz	r0, 8001efa <VL53L0X_SetSequenceStepEnable+0x52>
		if (SequenceStepEnabled == 1) {
 8001ec2:	2f01      	cmp	r7, #1
	SequenceConfigNew = SequenceConfig;
 8001ec4:	f89d 3007 	ldrb.w	r3, [sp, #7]
		if (SequenceStepEnabled == 1) {
 8001ec8:	d126      	bne.n	8001f18 <VL53L0X_SetSequenceStepEnable+0x70>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 8001eca:	2c04      	cmp	r4, #4
 8001ecc:	d83a      	bhi.n	8001f44 <VL53L0X_SetSequenceStepEnable+0x9c>
 8001ece:	e8df f004 	tbb	[pc, r4]
 8001ed2:	1703      	.short	0x1703
 8001ed4:	1d1a      	.short	0x1d1a
 8001ed6:	20          	.byte	0x20
 8001ed7:	00          	.byte	0x00
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8001ed8:	f043 0410 	orr.w	r4, r3, #16
				Status = VL53L0X_ERROR_INVALID_PARAMS;
			}
		}
	}

	if (SequenceConfigNew != SequenceConfig) {
 8001edc:	42a3      	cmp	r3, r4
 8001ede:	d00c      	beq.n	8001efa <VL53L0X_SetSequenceStepEnable+0x52>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
			Status = VL53L0X_WrByte(Dev,
 8001ee0:	4622      	mov	r2, r4
 8001ee2:	2101      	movs	r1, #1
 8001ee4:	4630      	mov	r0, r6
 8001ee6:	f002 f979 	bl	80041dc <VL53L0X_WrByte>
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 8001eea:	4605      	mov	r5, r0
 8001eec:	b928      	cbnz	r0, 8001efa <VL53L0X_SetSequenceStepEnable+0x52>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 8001eee:	f886 4130 	strb.w	r4, [r6, #304]	; 0x130
		if (Status == VL53L0X_ERROR_NONE) {
			VL53L0X_GETPARAMETERFIELD(Dev,
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8001ef2:	6971      	ldr	r1, [r6, #20]
 8001ef4:	4630      	mov	r0, r6
 8001ef6:	f7ff ffd3 	bl	8001ea0 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
	}

	LOG_FUNCTION_END(Status);

	return Status;
}
 8001efa:	4628      	mov	r0, r5
 8001efc:	b003      	add	sp, #12
 8001efe:	bdf0      	pop	{r4, r5, r6, r7, pc}
				SequenceConfigNew |= 0x28;
 8001f00:	f043 0428 	orr.w	r4, r3, #40	; 0x28
				break;
 8001f04:	e7ea      	b.n	8001edc <VL53L0X_SetSequenceStepEnable+0x34>
				SequenceConfigNew |= 0x04;
 8001f06:	f043 0404 	orr.w	r4, r3, #4
				break;
 8001f0a:	e7e7      	b.n	8001edc <VL53L0X_SetSequenceStepEnable+0x34>
				SequenceConfigNew |= 0x40;
 8001f0c:	f043 0440 	orr.w	r4, r3, #64	; 0x40
				break;
 8001f10:	e7e4      	b.n	8001edc <VL53L0X_SetSequenceStepEnable+0x34>
				SequenceConfigNew |= 0x80;
 8001f12:	f043 0480 	orr.w	r4, r3, #128	; 0x80
				break;
 8001f16:	e7e1      	b.n	8001edc <VL53L0X_SetSequenceStepEnable+0x34>
			switch (SequenceStepId) {
 8001f18:	2c04      	cmp	r4, #4
 8001f1a:	d813      	bhi.n	8001f44 <VL53L0X_SetSequenceStepEnable+0x9c>
 8001f1c:	e8df f004 	tbb	[pc, r4]
 8001f20:	0c090603 	.word	0x0c090603
 8001f24:	0f          	.byte	0x0f
 8001f25:	00          	.byte	0x00
				SequenceConfigNew &= 0xef;
 8001f26:	f003 04ef 	and.w	r4, r3, #239	; 0xef
				break;
 8001f2a:	e7d7      	b.n	8001edc <VL53L0X_SetSequenceStepEnable+0x34>
				SequenceConfigNew &= 0xd7;
 8001f2c:	f003 04d7 	and.w	r4, r3, #215	; 0xd7
				break;
 8001f30:	e7d4      	b.n	8001edc <VL53L0X_SetSequenceStepEnable+0x34>
				SequenceConfigNew &= 0xfb;
 8001f32:	f003 04fb 	and.w	r4, r3, #251	; 0xfb
				break;
 8001f36:	e7d1      	b.n	8001edc <VL53L0X_SetSequenceStepEnable+0x34>
				SequenceConfigNew &= 0xbf;
 8001f38:	f003 04bf 	and.w	r4, r3, #191	; 0xbf
				break;
 8001f3c:	e7ce      	b.n	8001edc <VL53L0X_SetSequenceStepEnable+0x34>
				SequenceConfigNew &= 0x7f;
 8001f3e:	f003 047f 	and.w	r4, r3, #127	; 0x7f
				break;
 8001f42:	e7cb      	b.n	8001edc <VL53L0X_SetSequenceStepEnable+0x34>
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8001f44:	f06f 0503 	mvn.w	r5, #3
 8001f48:	e7d7      	b.n	8001efa <VL53L0X_SetSequenceStepEnable+0x52>

08001f4a <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 8001f4a:	b513      	push	{r0, r1, r4, lr}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t SequenceConfig = 0;
 8001f4c:	aa02      	add	r2, sp, #8
 8001f4e:	2300      	movs	r3, #0
{
 8001f50:	460c      	mov	r4, r1
	uint8_t SequenceConfig = 0;
 8001f52:	f802 3d01 	strb.w	r3, [r2, #-1]!
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8001f56:	2101      	movs	r1, #1
 8001f58:	f002 f97c 	bl	8004254 <VL53L0X_RdByte>
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8001f5c:	b978      	cbnz	r0, 8001f7e <VL53L0X_GetSequenceStepEnables+0x34>
		Status = sequence_step_enabled(Dev,
 8001f5e:	f89d 3007 	ldrb.w	r3, [sp, #7]
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8001f62:	f3c3 1200 	ubfx	r2, r3, #4, #1
 8001f66:	7022      	strb	r2, [r4, #0]
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 8001f68:	f3c3 02c0 	ubfx	r2, r3, #3, #1
 8001f6c:	70a2      	strb	r2, [r4, #2]
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8001f6e:	f3c3 0280 	ubfx	r2, r3, #2, #1
 8001f72:	7062      	strb	r2, [r4, #1]
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 8001f74:	f3c3 1280 	ubfx	r2, r3, #6, #1
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8001f78:	09db      	lsrs	r3, r3, #7
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 8001f7a:	70e2      	strb	r2, [r4, #3]
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8001f7c:	7123      	strb	r3, [r4, #4]
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8001f7e:	b002      	add	sp, #8
 8001f80:	bd10      	pop	{r4, pc}

08001f82 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8001f82:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001f84:	460d      	mov	r5, r1
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 8001f86:	f10d 0202 	add.w	r2, sp, #2
 8001f8a:	21f8      	movs	r1, #248	; 0xf8
{
 8001f8c:	4604      	mov	r4, r0
	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 8001f8e:	f002 f972 	bl	8004276 <VL53L0X_RdWord>
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8001f92:	b970      	cbnz	r0, 8001fb2 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x30>
		Status = VL53L0X_RdDWord(Dev,
 8001f94:	aa01      	add	r2, sp, #4
 8001f96:	2104      	movs	r1, #4
 8001f98:	4620      	mov	r0, r4
 8001f9a:	f002 f97e 	bl	800429a <VL53L0X_RdDWord>
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8001f9e:	b940      	cbnz	r0, 8001fb2 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x30>
		if (osc_calibrate_val != 0) {
 8001fa0:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8001fa4:	b11a      	cbz	r2, 8001fae <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x2c>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 8001fa6:	9b01      	ldr	r3, [sp, #4]
 8001fa8:	fbb3 f3f2 	udiv	r3, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 8001fac:	602b      	str	r3, [r5, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 8001fae:	682b      	ldr	r3, [r5, #0]
 8001fb0:	61a3      	str	r3, [r4, #24]
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8001fb2:	b003      	add	sp, #12
 8001fb4:	bd30      	pop	{r4, r5, pc}

08001fb6 <VL53L0X_GetXTalkCompensationEnable>:
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 8001fb6:	7f03      	ldrb	r3, [r0, #28]
	*pXTalkCompensationEnable = Temp8;
 8001fb8:	700b      	strb	r3, [r1, #0]

	LOG_FUNCTION_END(Status);
	return Status;
}
 8001fba:	2000      	movs	r0, #0
 8001fbc:	4770      	bx	lr

08001fbe <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 8001fbe:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001fc0:	460d      	mov	r5, r1
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 8001fc2:	f10d 0206 	add.w	r2, sp, #6
 8001fc6:	2120      	movs	r1, #32
{
 8001fc8:	4604      	mov	r4, r0
	Status = VL53L0X_RdWord(Dev,
 8001fca:	f002 f954 	bl	8004276 <VL53L0X_RdWord>
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 8001fce:	b928      	cbnz	r0, 8001fdc <VL53L0X_GetXTalkCompensationRateMegaCps+0x1e>
		if (Value == 0) {
 8001fd0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001fd4:	b923      	cbnz	r3, 8001fe0 <VL53L0X_GetXTalkCompensationRateMegaCps+0x22>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8001fd6:	6a23      	ldr	r3, [r4, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8001fd8:	602b      	str	r3, [r5, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8001fda:	7720      	strb	r0, [r4, #28]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8001fdc:	b003      	add	sp, #12
 8001fde:	bd30      	pop	{r4, r5, pc}
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8001fe0:	00db      	lsls	r3, r3, #3
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8001fe2:	602b      	str	r3, [r5, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8001fe4:	6223      	str	r3, [r4, #32]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	7723      	strb	r3, [r4, #28]
 8001fea:	e7f7      	b.n	8001fdc <VL53L0X_GetXTalkCompensationRateMegaCps+0x1e>

08001fec <VL53L0X_SetLimitCheckEnable>:
	uint8_t LimitCheckDisable = 0;
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8001fec:	2905      	cmp	r1, #5
{
 8001fee:	b570      	push	{r4, r5, r6, lr}
 8001ff0:	4604      	mov	r4, r0
 8001ff2:	460d      	mov	r5, r1
 8001ff4:	4616      	mov	r6, r2
	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8001ff6:	d832      	bhi.n	800205e <VL53L0X_SetLimitCheckEnable+0x72>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
	} else {
		if (LimitCheckEnable == 0) {
 8001ff8:	b3a2      	cbz	r2, 8002064 <VL53L0X_SetLimitCheckEnable+0x78>
			TempFix1616 = 0;
			LimitCheckEnableInt = 0;
			LimitCheckDisable = 1;

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8001ffa:	eb00 0381 	add.w	r3, r0, r1, lsl #2
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 8001ffe:	2101      	movs	r1, #1
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8002000:	6b5a      	ldr	r2, [r3, #52]	; 0x34
			LimitCheckDisable = 0;
 8002002:	2300      	movs	r3, #0
		}

		switch (LimitCheckId) {
 8002004:	1e68      	subs	r0, r5, #1
 8002006:	2804      	cmp	r0, #4
 8002008:	d804      	bhi.n	8002014 <VL53L0X_SetLimitCheckEnable+0x28>
 800200a:	e8df f000 	tbb	[pc, r0]
 800200e:	140b      	.short	0x140b
 8002010:	1a17      	.short	0x1a17
 8002012:	21          	.byte	0x21
 8002013:	00          	.byte	0x00

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8002014:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
 8002018:	442c      	add	r4, r5
		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
		if (LimitCheckEnable == 0) {
 800201a:	b9e6      	cbnz	r6, 8002056 <VL53L0X_SetLimitCheckEnable+0x6a>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800201c:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8002020:	2000      	movs	r0, #0
 8002022:	bd70      	pop	{r4, r5, r6, pc}
			Status = VL53L0X_WrWord(Dev,
 8002024:	f3c2 224f 	ubfx	r2, r2, #9, #16
 8002028:	2144      	movs	r1, #68	; 0x44
 800202a:	4620      	mov	r0, r4
 800202c:	f002 f8e3 	bl	80041f6 <VL53L0X_WrWord>
	if (Status == VL53L0X_ERROR_NONE) {
 8002030:	2800      	cmp	r0, #0
 8002032:	d0f1      	beq.n	8002018 <VL53L0X_SetLimitCheckEnable+0x2c>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8002034:	bd70      	pop	{r4, r5, r6, pc}
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8002036:	f884 102a 	strb.w	r1, [r4, #42]	; 0x2a
			break;
 800203a:	e7ed      	b.n	8002018 <VL53L0X_SetLimitCheckEnable+0x2c>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800203c:	f884 102b 	strb.w	r1, [r4, #43]	; 0x2b
			break;
 8002040:	e7ea      	b.n	8002018 <VL53L0X_SetLimitCheckEnable+0x2c>
			Status = VL53L0X_UpdateByte(Dev,
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	22fe      	movs	r2, #254	; 0xfe
			Status = VL53L0X_UpdateByte(Dev,
 8002046:	2160      	movs	r1, #96	; 0x60
 8002048:	4620      	mov	r0, r4
 800204a:	f002 f8e4 	bl	8004216 <VL53L0X_UpdateByte>
			break;
 800204e:	e7ef      	b.n	8002030 <VL53L0X_SetLimitCheckEnable+0x44>
			Status = VL53L0X_UpdateByte(Dev,
 8002050:	011b      	lsls	r3, r3, #4
 8002052:	22ef      	movs	r2, #239	; 0xef
 8002054:	e7f7      	b.n	8002046 <VL53L0X_SetLimitCheckEnable+0x5a>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8002056:	2301      	movs	r3, #1
 8002058:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 800205c:	e7e0      	b.n	8002020 <VL53L0X_SetLimitCheckEnable+0x34>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800205e:	f06f 0003 	mvn.w	r0, #3
	return Status;
 8002062:	bd70      	pop	{r4, r5, r6, pc}
			LimitCheckEnableInt = 0;
 8002064:	4611      	mov	r1, r2
			LimitCheckDisable = 1;
 8002066:	2301      	movs	r3, #1
 8002068:	e7cc      	b.n	8002004 <VL53L0X_SetLimitCheckEnable+0x18>

0800206a <VL53L0X_GetLimitCheckEnable>:
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800206a:	2905      	cmp	r1, #5
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800206c:	bf8c      	ite	hi
 800206e:	f06f 0003 	mvnhi.w	r0, #3
		*pLimitCheckEnable = 0;
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8002072:	1840      	addls	r0, r0, r1
 8002074:	f04f 0300 	mov.w	r3, #0
 8002078:	bf97      	itett	ls
 800207a:	f890 1028 	ldrbls.w	r1, [r0, #40]	; 0x28
		*pLimitCheckEnable = 0;
 800207e:	7013      	strbhi	r3, [r2, #0]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8002080:	7011      	strbls	r1, [r2, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002082:	4618      	movls	r0, r3
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8002084:	4770      	bx	lr

08002086 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8002086:	b570      	push	{r4, r5, r6, lr}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 8002088:	1843      	adds	r3, r0, r1
{
 800208a:	4604      	mov	r4, r0
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 800208c:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
{
 8002090:	460e      	mov	r6, r1
 8002092:	4615      	mov	r5, r2
	if (Temp8 == 0) { /* disabled write only internal value */
 8002094:	b918      	cbnz	r0, 800209e <VL53L0X_SetLimitCheckValue+0x18>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8002096:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 800209a:	6362      	str	r2, [r4, #52]	; 0x34
 800209c:	bd70      	pop	{r4, r5, r6, pc}
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 800209e:	2905      	cmp	r1, #5
 80020a0:	d81b      	bhi.n	80020da <VL53L0X_SetLimitCheckValue+0x54>
 80020a2:	e8df f001 	tbb	[pc, r1]
 80020a6:	0903      	.short	0x0903
 80020a8:	16161412 	.word	0x16161412

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80020ac:	6362      	str	r2, [r4, #52]	; 0x34
			Status = VL53L0X_ERROR_INVALID_PARAMS;

		}

		if (Status == VL53L0X_ERROR_NONE) {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80020ae:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 80020b2:	2000      	movs	r0, #0
 80020b4:	6365      	str	r5, [r4, #52]	; 0x34
 80020b6:	bd70      	pop	{r4, r5, r6, pc}
			Status = VL53L0X_WrWord(Dev,
 80020b8:	f3c2 224f 	ubfx	r2, r2, #9, #16
 80020bc:	2144      	movs	r1, #68	; 0x44
			Status = VL53L0X_WrWord(Dev,
 80020be:	4620      	mov	r0, r4
 80020c0:	f002 f899 	bl	80041f6 <VL53L0X_WrWord>
		if (Status == VL53L0X_ERROR_NONE) {
 80020c4:	2800      	cmp	r0, #0
 80020c6:	d0f2      	beq.n	80020ae <VL53L0X_SetLimitCheckValue+0x28>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 80020c8:	bd70      	pop	{r4, r5, r6, pc}
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80020ca:	63e2      	str	r2, [r4, #60]	; 0x3c
			break;
 80020cc:	e7ef      	b.n	80020ae <VL53L0X_SetLimitCheckValue+0x28>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80020ce:	6422      	str	r2, [r4, #64]	; 0x40
			break;
 80020d0:	e7ed      	b.n	80020ae <VL53L0X_SetLimitCheckValue+0x28>
			Status = VL53L0X_WrWord(Dev,
 80020d2:	f3c2 224f 	ubfx	r2, r2, #9, #16
 80020d6:	2164      	movs	r1, #100	; 0x64
 80020d8:	e7f1      	b.n	80020be <VL53L0X_SetLimitCheckValue+0x38>
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80020da:	f06f 0003 	mvn.w	r0, #3
 80020de:	e7f3      	b.n	80020c8 <VL53L0X_SetLimitCheckValue+0x42>

080020e0 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 80020e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80020e2:	4604      	mov	r4, r0
 80020e4:	4615      	mov	r5, r2
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 80020e6:	2905      	cmp	r1, #5
 80020e8:	d82c      	bhi.n	8002144 <VL53L0X_GetLimitCheckValue+0x64>
 80020ea:	e8df f001 	tbb	[pc, r1]
 80020ee:	0703      	.short	0x0703
 80020f0:	1b1b1917 	.word	0x1b1b1917

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80020f4:	6b43      	ldr	r3, [r0, #52]	; 0x34
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 80020f6:	602b      	str	r3, [r5, #0]
 80020f8:	2000      	movs	r0, #0
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80020fa:	e021      	b.n	8002140 <VL53L0X_GetLimitCheckValue+0x60>
		Status = VL53L0X_RdWord(Dev,
 80020fc:	f10d 0206 	add.w	r2, sp, #6
 8002100:	2144      	movs	r1, #68	; 0x44
 8002102:	f002 f8b8 	bl	8004276 <VL53L0X_RdWord>
		if (Status == VL53L0X_ERROR_NONE)
 8002106:	b9d8      	cbnz	r0, 8002140 <VL53L0X_GetLimitCheckValue+0x60>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8002108:	f8bd 2006 	ldrh.w	r2, [sp, #6]
			if (TempFix1616 == 0) {
 800210c:	0253      	lsls	r3, r2, #9
 800210e:	b19a      	cbz	r2, 8002138 <VL53L0X_GetLimitCheckValue+0x58>
				*pLimitCheckValue = TempFix1616;
 8002110:	602b      	str	r3, [r5, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8002112:	63a3      	str	r3, [r4, #56]	; 0x38
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8002114:	2301      	movs	r3, #1
 8002116:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
 800211a:	e011      	b.n	8002140 <VL53L0X_GetLimitCheckValue+0x60>
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800211c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
		break;
 800211e:	e7ea      	b.n	80020f6 <VL53L0X_GetLimitCheckValue+0x16>
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8002120:	6c03      	ldr	r3, [r0, #64]	; 0x40
		break;
 8002122:	e7e8      	b.n	80020f6 <VL53L0X_GetLimitCheckValue+0x16>
		Status = VL53L0X_RdWord(Dev,
 8002124:	f10d 0206 	add.w	r2, sp, #6
 8002128:	2164      	movs	r1, #100	; 0x64
 800212a:	f002 f8a4 	bl	8004276 <VL53L0X_RdWord>
		if (Status == VL53L0X_ERROR_NONE)
 800212e:	b938      	cbnz	r0, 8002140 <VL53L0X_GetLimitCheckValue+0x60>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8002130:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8002134:	025b      	lsls	r3, r3, #9
 8002136:	e7de      	b.n	80020f6 <VL53L0X_GetLimitCheckValue+0x16>
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8002138:	6ba3      	ldr	r3, [r4, #56]	; 0x38
				*pLimitCheckValue = TempFix1616;
 800213a:	602b      	str	r3, [r5, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800213c:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29

}
 8002140:	b003      	add	sp, #12
 8002142:	bd30      	pop	{r4, r5, pc}
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8002144:	f06f 0003 	mvn.w	r0, #3
 8002148:	e7fa      	b.n	8002140 <VL53L0X_GetLimitCheckValue+0x60>

0800214a <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 800214a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800214c:	460c      	mov	r4, r1
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 800214e:	f10d 0207 	add.w	r2, sp, #7
 8002152:	2101      	movs	r1, #1
{
 8002154:	4605      	mov	r5, r0
	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8002156:	f002 f87d 	bl	8004254 <VL53L0X_RdByte>
	if (Status == VL53L0X_ERROR_NONE) {
 800215a:	b958      	cbnz	r0, 8002174 <VL53L0X_GetWrapAroundCheckEnable+0x2a>
		PALDevDataSet(Dev, SequenceConfig, data);
 800215c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002160:	f885 3130 	strb.w	r3, [r5, #304]	; 0x130
		if (data & (0x01 << 7))
 8002164:	061b      	lsls	r3, r3, #24
			*pWrapAroundCheckEnable = 0x01;
 8002166:	bf46      	itte	mi
 8002168:	2301      	movmi	r3, #1
 800216a:	7023      	strbmi	r3, [r4, #0]
		else
			*pWrapAroundCheckEnable = 0x00;
 800216c:	7020      	strbpl	r0, [r4, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 800216e:	7823      	ldrb	r3, [r4, #0]
 8002170:	f885 304c 	strb.w	r3, [r5, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8002174:	b003      	add	sp, #12
 8002176:	bd30      	pop	{r4, r5, pc}

08002178 <VL53L0X_GetDeviceParameters>:
{
 8002178:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 800217c:	7c03      	ldrb	r3, [r0, #16]
{
 800217e:	460c      	mov	r4, r1
	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8002180:	f801 3b08 	strb.w	r3, [r1], #8
{
 8002184:	4605      	mov	r5, r0
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8002186:	f7ff fefc 	bl	8001f82 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
	if (Status == VL53L0X_ERROR_NONE)
 800218a:	bb40      	cbnz	r0, 80021de <VL53L0X_GetDeviceParameters+0x66>
		pDeviceParameters->XTalkCompensationEnable = 0;
 800218c:	7320      	strb	r0, [r4, #12]
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 800218e:	f104 0110 	add.w	r1, r4, #16
 8002192:	4628      	mov	r0, r5
 8002194:	f7ff ff13 	bl	8001fbe <VL53L0X_GetXTalkCompensationRateMegaCps>
	if (Status == VL53L0X_ERROR_NONE)
 8002198:	bb08      	cbnz	r0, 80021de <VL53L0X_GetDeviceParameters+0x66>
	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 800219a:	f104 0114 	add.w	r1, r4, #20
 800219e:	4628      	mov	r0, r5
 80021a0:	f000 fc63 	bl	8002a6a <VL53L0X_get_offset_calibration_data_micro_meter>
	if (Status == VL53L0X_ERROR_NONE) {
 80021a4:	b9d8      	cbnz	r0, 80021de <VL53L0X_GetDeviceParameters+0x66>
 80021a6:	f104 0724 	add.w	r7, r4, #36	; 0x24
 80021aa:	f105 0928 	add.w	r9, r5, #40	; 0x28
 80021ae:	f104 0818 	add.w	r8, r4, #24
 80021b2:	4606      	mov	r6, r0
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 80021b4:	463a      	mov	r2, r7
 80021b6:	b2b1      	uxth	r1, r6
 80021b8:	4628      	mov	r0, r5
 80021ba:	f7ff ff91 	bl	80020e0 <VL53L0X_GetLimitCheckValue>
			if (Status == VL53L0X_ERROR_NONE) {
 80021be:	b970      	cbnz	r0, 80021de <VL53L0X_GetDeviceParameters+0x66>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80021c0:	3601      	adds	r6, #1
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80021c2:	f819 3b01 	ldrb.w	r3, [r9], #1
		*pLimitCheckEnable = Temp8;
 80021c6:	f808 3b01 	strb.w	r3, [r8], #1
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80021ca:	2e06      	cmp	r6, #6
 80021cc:	f107 0704 	add.w	r7, r7, #4
 80021d0:	d1f0      	bne.n	80021b4 <VL53L0X_GetDeviceParameters+0x3c>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 80021d2:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 80021d6:	4628      	mov	r0, r5
 80021d8:	f7ff ffb7 	bl	800214a <VL53L0X_GetWrapAroundCheckEnable>
	if (Status == VL53L0X_ERROR_NONE) {
 80021dc:	b108      	cbz	r0, 80021e2 <VL53L0X_GetDeviceParameters+0x6a>
}
 80021de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 80021e2:	1d21      	adds	r1, r4, #4
 80021e4:	4628      	mov	r0, r5
}
 80021e6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 80021ea:	f001 bc69 	b.w	8003ac0 <VL53L0X_get_measurement_timing_budget_micro_seconds>
	...

080021f0 <VL53L0X_DataInit>:
{
 80021f0:	b5f0      	push	{r4, r5, r6, r7, lr}
	Status = VL53L0X_UpdateByte(Dev,
 80021f2:	22fe      	movs	r2, #254	; 0xfe
{
 80021f4:	b093      	sub	sp, #76	; 0x4c
	Status = VL53L0X_UpdateByte(Dev,
 80021f6:	2301      	movs	r3, #1
 80021f8:	2189      	movs	r1, #137	; 0x89
{
 80021fa:	4605      	mov	r5, r0
	Status = VL53L0X_UpdateByte(Dev,
 80021fc:	f002 f80b 	bl	8004216 <VL53L0X_UpdateByte>
	if (Status == VL53L0X_ERROR_NONE)
 8002200:	4602      	mov	r2, r0
 8002202:	b918      	cbnz	r0, 800220c <VL53L0X_DataInit+0x1c>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8002204:	2188      	movs	r1, #136	; 0x88
 8002206:	4628      	mov	r0, r5
 8002208:	f001 ffe8 	bl	80041dc <VL53L0X_WrByte>
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 800220c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002210:	f8a5 2152 	strh.w	r2, [r5, #338]	; 0x152
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8002214:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002218:	f8a5 2154 	strh.w	r2, [r5, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 800221c:	4a57      	ldr	r2, [pc, #348]	; (800237c <VL53L0X_DataInit+0x18c>)
 800221e:	f8c5 2158 	str.w	r2, [r5, #344]	; 0x158
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8002222:	2300      	movs	r3, #0
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8002224:	4a56      	ldr	r2, [pc, #344]	; (8002380 <VL53L0X_DataInit+0x190>)
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8002226:	f885 30f0 	strb.w	r3, [r5, #240]	; 0xf0
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 800222a:	f8c5 20d4 	str.w	r2, [r5, #212]	; 0xd4
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 800222e:	622b      	str	r3, [r5, #32]
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8002230:	a902      	add	r1, sp, #8
 8002232:	4628      	mov	r0, r5
 8002234:	f7ff ffa0 	bl	8002178 <VL53L0X_GetDeviceParameters>
	if (Status == VL53L0X_ERROR_NONE) {
 8002238:	4604      	mov	r4, r0
 800223a:	b980      	cbnz	r0, 800225e <VL53L0X_DataInit+0x6e>
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 800223c:	f88d 0008 	strb.w	r0, [sp, #8]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8002240:	f88d 0009 	strb.w	r0, [sp, #9]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8002244:	ae02      	add	r6, sp, #8
 8002246:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002248:	f105 0710 	add.w	r7, r5, #16
 800224c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800224e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002250:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8002252:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002254:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8002256:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800225a:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 800225e:	2364      	movs	r3, #100	; 0x64
 8002260:	f8a5 3134 	strh.w	r3, [r5, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8002264:	f44f 7361 	mov.w	r3, #900	; 0x384
 8002268:	f8a5 3136 	strh.w	r3, [r5, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 800226c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8002270:	2601      	movs	r6, #1
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8002272:	f8a5 3138 	strh.w	r3, [r5, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8002276:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800227a:	f8a5 313c 	strh.w	r3, [r5, #316]	; 0x13c
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800227e:	4632      	mov	r2, r6
 8002280:	2180      	movs	r1, #128	; 0x80
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8002282:	f885 6150 	strb.w	r6, [r5, #336]	; 0x150
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8002286:	4628      	mov	r0, r5
 8002288:	f001 ffa8 	bl	80041dc <VL53L0X_WrByte>
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800228c:	4632      	mov	r2, r6
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800228e:	4607      	mov	r7, r0
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8002290:	21ff      	movs	r1, #255	; 0xff
 8002292:	4628      	mov	r0, r5
 8002294:	f001 ffa2 	bl	80041dc <VL53L0X_WrByte>
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8002298:	2200      	movs	r2, #0
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800229a:	4338      	orrs	r0, r7
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800229c:	4611      	mov	r1, r2
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800229e:	4304      	orrs	r4, r0
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80022a0:	4628      	mov	r0, r5
 80022a2:	f001 ff9b 	bl	80041dc <VL53L0X_WrByte>
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80022a6:	b264      	sxtb	r4, r4
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80022a8:	4304      	orrs	r4, r0
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 80022aa:	f10d 0207 	add.w	r2, sp, #7
 80022ae:	2191      	movs	r1, #145	; 0x91
 80022b0:	4628      	mov	r0, r5
 80022b2:	f001 ffcf 	bl	8004254 <VL53L0X_RdByte>
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80022b6:	b264      	sxtb	r4, r4
	PALDevDataSet(Dev, StopVariable, StopVariable);
 80022b8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80022bc:	f885 313a 	strb.w	r3, [r5, #314]	; 0x13a
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 80022c0:	4304      	orrs	r4, r0
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 80022c2:	4632      	mov	r2, r6
 80022c4:	2100      	movs	r1, #0
 80022c6:	4628      	mov	r0, r5
 80022c8:	f001 ff88 	bl	80041dc <VL53L0X_WrByte>
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 80022cc:	b264      	sxtb	r4, r4
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 80022ce:	4304      	orrs	r4, r0
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80022d0:	2200      	movs	r2, #0
 80022d2:	21ff      	movs	r1, #255	; 0xff
 80022d4:	4628      	mov	r0, r5
 80022d6:	f001 ff81 	bl	80041dc <VL53L0X_WrByte>
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 80022da:	b264      	sxtb	r4, r4
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80022dc:	4304      	orrs	r4, r0
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 80022de:	2200      	movs	r2, #0
 80022e0:	2180      	movs	r1, #128	; 0x80
 80022e2:	4628      	mov	r0, r5
 80022e4:	f001 ff7a 	bl	80041dc <VL53L0X_WrByte>
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80022e8:	b264      	sxtb	r4, r4
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 80022ea:	4320      	orrs	r0, r4
 80022ec:	b240      	sxtb	r0, r0
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80022ee:	2400      	movs	r4, #0
		if (Status == VL53L0X_ERROR_NONE)
 80022f0:	2800      	cmp	r0, #0
 80022f2:	d141      	bne.n	8002378 <VL53L0X_DataInit+0x188>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 80022f4:	b2a1      	uxth	r1, r4
 80022f6:	2201      	movs	r2, #1
 80022f8:	4628      	mov	r0, r5
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80022fa:	3401      	adds	r4, #1
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 80022fc:	f7ff fe76 	bl	8001fec <VL53L0X_SetLimitCheckEnable>
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8002300:	2c06      	cmp	r4, #6
 8002302:	d1f5      	bne.n	80022f0 <VL53L0X_DataInit+0x100>
	if (Status == VL53L0X_ERROR_NONE)
 8002304:	bbc0      	cbnz	r0, 8002378 <VL53L0X_DataInit+0x188>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8002306:	f885 002a 	strb.w	r0, [r5, #42]	; 0x2a
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800230a:	f885 002b 	strb.w	r0, [r5, #43]	; 0x2b
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800230e:	4602      	mov	r2, r0
 8002310:	2104      	movs	r1, #4
 8002312:	4628      	mov	r0, r5
 8002314:	f7ff fe6a 	bl	8001fec <VL53L0X_SetLimitCheckEnable>
	if (Status == VL53L0X_ERROR_NONE)
 8002318:	bb70      	cbnz	r0, 8002378 <VL53L0X_DataInit+0x188>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800231a:	4602      	mov	r2, r0
 800231c:	2105      	movs	r1, #5
 800231e:	4628      	mov	r0, r5
 8002320:	f7ff fe64 	bl	8001fec <VL53L0X_SetLimitCheckEnable>
	if (Status == VL53L0X_ERROR_NONE) {
 8002324:	bb40      	cbnz	r0, 8002378 <VL53L0X_DataInit+0x188>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8002326:	4601      	mov	r1, r0
 8002328:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 800232c:	4628      	mov	r0, r5
 800232e:	f7ff feaa 	bl	8002086 <VL53L0X_SetLimitCheckValue>
	if (Status == VL53L0X_ERROR_NONE) {
 8002332:	bb08      	cbnz	r0, 8002378 <VL53L0X_DataInit+0x188>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8002334:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002338:	2101      	movs	r1, #1
 800233a:	4628      	mov	r0, r5
 800233c:	f7ff fea3 	bl	8002086 <VL53L0X_SetLimitCheckValue>
	if (Status == VL53L0X_ERROR_NONE) {
 8002340:	b9d0      	cbnz	r0, 8002378 <VL53L0X_DataInit+0x188>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8002342:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8002346:	2102      	movs	r1, #2
 8002348:	4628      	mov	r0, r5
 800234a:	f7ff fe9c 	bl	8002086 <VL53L0X_SetLimitCheckValue>
	if (Status == VL53L0X_ERROR_NONE) {
 800234e:	b998      	cbnz	r0, 8002378 <VL53L0X_DataInit+0x188>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8002350:	4602      	mov	r2, r0
 8002352:	2103      	movs	r1, #3
 8002354:	4628      	mov	r0, r5
 8002356:	f7ff fe96 	bl	8002086 <VL53L0X_SetLimitCheckValue>
	if (Status == VL53L0X_ERROR_NONE) {
 800235a:	b968      	cbnz	r0, 8002378 <VL53L0X_DataInit+0x188>
		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 800235c:	22ff      	movs	r2, #255	; 0xff
 800235e:	f885 2130 	strb.w	r2, [r5, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8002362:	2101      	movs	r1, #1
 8002364:	4628      	mov	r0, r5
 8002366:	f001 ff39 	bl	80041dc <VL53L0X_WrByte>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 800236a:	2301      	movs	r3, #1
 800236c:	f885 3132 	strb.w	r3, [r5, #306]	; 0x132
	if (Status == VL53L0X_ERROR_NONE)
 8002370:	b910      	cbnz	r0, 8002378 <VL53L0X_DataInit+0x188>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8002372:	2300      	movs	r3, #0
 8002374:	f885 3115 	strb.w	r3, [r5, #277]	; 0x115
}
 8002378:	b013      	add	sp, #76	; 0x4c
 800237a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800237c:	00016b85 	.word	0x00016b85
 8002380:	000970a4 	.word	0x000970a4

08002384 <VL53L0X_PerformRefCalibration>:
	uint8_t *pPhaseCal)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8002384:	2301      	movs	r3, #1
 8002386:	f000 bd92 	b.w	8002eae <VL53L0X_perform_ref_calibration>

0800238a <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800238a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800238e:	b08e      	sub	sp, #56	; 0x38
 8002390:	460c      	mov	r4, r1
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8002392:	230c      	movs	r3, #12
 8002394:	aa04      	add	r2, sp, #16
 8002396:	2114      	movs	r1, #20
{
 8002398:	4606      	mov	r6, r0
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 800239a:	f001 ff17 	bl	80041cc <VL53L0X_ReadMulti>
 800239e:	4686      	mov	lr, r0

	if (Status == VL53L0X_ERROR_NONE) {
 80023a0:	2800      	cmp	r0, #0
 80023a2:	d175      	bne.n	8002490 <VL53L0X_GetRangingMeasurementData+0x106>
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 80023a4:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80023a8:	f89d 2017 	ldrb.w	r2, [sp, #23]
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 80023ac:	f89d 1018 	ldrb.w	r1, [sp, #24]
		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 80023b0:	f89d 501a 	ldrb.w	r5, [sp, #26]
 80023b4:	f89d 701b 	ldrb.w	r7, [sp, #27]
		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 80023b8:	75a0      	strb	r0, [r4, #22]
		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 80023ba:	eb02 2203 	add.w	r2, r2, r3, lsl #8
		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 80023be:	f89d 3019 	ldrb.w	r3, [sp, #25]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 80023c2:	6020      	str	r0, [r4, #0]
		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 80023c4:	eb03 2301 	add.w	r3, r3, r1, lsl #8
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	025b      	lsls	r3, r3, #9
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 80023cc:	6123      	str	r3, [r4, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 80023ce:	f89d 1012 	ldrb.w	r1, [sp, #18]
 80023d2:	f89d 3013 	ldrb.w	r3, [sp, #19]
		pRangingMeasurementData->MeasurementTimeUsec = 0;
 80023d6:	6060      	str	r0, [r4, #4]
		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 80023d8:	eb07 2705 	add.w	r7, r7, r5, lsl #8
		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 80023dc:	eb03 2301 	add.w	r3, r3, r1, lsl #8
		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 80023e0:	b292      	uxth	r2, r2
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 80023e2:	f8b6 5152 	ldrh.w	r5, [r6, #338]	; 0x152
		DeviceRangeStatus = localBuffer[0];
 80023e6:	f89d 1010 	ldrb.w	r1, [sp, #16]
		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 80023ea:	0252      	lsls	r2, r2, #9
		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 80023ec:	b29b      	uxth	r3, r3
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 80023ee:	60e2      	str	r2, [r4, #12]
		pRangingMeasurementData->EffectiveSpadRtnCount =
 80023f0:	82a3      	strh	r3, [r4, #20]

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 80023f2:	f5b5 7f7a 	cmp.w	r5, #1000	; 0x3e8
		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 80023f6:	b2bf      	uxth	r7, r7
		RangeFractionalEnable = PALDevDataGet(Dev,
 80023f8:	f896 e131 	ldrb.w	lr, [r6, #305]	; 0x131
		if (LinearityCorrectiveGain != 1000) {
 80023fc:	d00c      	beq.n	8002418 <VL53L0X_GetRangingMeasurementData+0x8e>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 80023fe:	fb07 f005 	mul.w	r0, r7, r5
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 8002402:	7f37      	ldrb	r7, [r6, #28]
				* tmpuint16 + 500) / 1000);
 8002404:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8002408:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
 800240c:	fb90 f0f5 	sdiv	r0, r0, r5
			VL53L0X_GETPARAMETERFIELD(Dev,
 8002410:	6a35      	ldr	r5, [r6, #32]
			if (XTalkCompensationEnable) {
 8002412:	2f00      	cmp	r7, #0
 8002414:	d140      	bne.n	8002498 <VL53L0X_GetRangingMeasurementData+0x10e>
						XtalkRangeMilliMeter = 8888;
					else
						XtalkRangeMilliMeter = 8888
							<< 2;
				} else {
					XtalkRangeMilliMeter =
 8002416:	b287      	uxth	r7, r0
				tmpuint16 = XtalkRangeMilliMeter;
			}

		}

		if (RangeFractionalEnable) {
 8002418:	f1be 0f00 	cmp.w	lr, #0
 800241c:	d046      	beq.n	80024ac <VL53L0X_GetRangingMeasurementData+0x122>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 800241e:	08b8      	lsrs	r0, r7, #2
			pRangingMeasurementData->RangeMilliMeter =
 8002420:	8120      	strh	r0, [r4, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 8002422:	01b8      	lsls	r0, r7, #6
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
			pRangingMeasurementData->RangeFractionalPart = 0;
 8002424:	75e0      	strb	r0, [r4, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 8002426:	f10d 000f 	add.w	r0, sp, #15
 800242a:	9001      	str	r0, [sp, #4]
 800242c:	9400      	str	r4, [sp, #0]
 800242e:	4630      	mov	r0, r6
 8002430:	f001 fd96 	bl	8003f60 <VL53L0X_get_pal_range_status>
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 8002434:	4686      	mov	lr, r0
 8002436:	bb58      	cbnz	r0, 8002490 <VL53L0X_GetRangingMeasurementData+0x106>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 8002438:	f89d c00f 	ldrb.w	ip, [sp, #15]
 800243c:	f884 c018 	strb.w	ip, [r4, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8002440:	f106 0550 	add.w	r5, r6, #80	; 0x50
 8002444:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002446:	af07      	add	r7, sp, #28
 8002448:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800244a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 800244e:	f8b4 a008 	ldrh.w	sl, [r4, #8]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 8002452:	7de3      	ldrb	r3, [r4, #23]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 8002454:	f8b4 900a 	ldrh.w	r9, [r4, #10]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 8002458:	f8b4 8014 	ldrh.w	r8, [r4, #20]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 800245c:	f8ad a024 	strh.w	sl, [sp, #36]	; 0x24
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8002460:	e887 0007 	stmia.w	r7, {r0, r1, r2}
			pRangingMeasurementData->SignalRateRtnMegaCps;
 8002464:	68e1      	ldr	r1, [r4, #12]
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 8002466:	6922      	ldr	r2, [r4, #16]
		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8002468:	6860      	ldr	r0, [r4, #4]
 800246a:	f8ad 9026 	strh.w	r9, [sp, #38]	; 0x26
 800246e:	910a      	str	r1, [sp, #40]	; 0x28
 8002470:	920b      	str	r2, [sp, #44]	; 0x2c
 8002472:	f8ad 8030 	strh.w	r8, [sp, #48]	; 0x30
 8002476:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 800247a:	f88d c034 	strb.w	ip, [sp, #52]	; 0x34
 800247e:	ac07      	add	r4, sp, #28
 8002480:	9008      	str	r0, [sp, #32]
 8002482:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002484:	3650      	adds	r6, #80	; 0x50
 8002486:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002488:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800248c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8002490:	4670      	mov	r0, lr
 8002492:	b00e      	add	sp, #56	; 0x38
 8002494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					* EffectiveSpadRtnCount) >> 8))
 8002498:	b2ad      	uxth	r5, r5
 800249a:	435d      	muls	r5, r3
 800249c:	122d      	asrs	r5, r5, #8
				if ((SignalRate
 800249e:	42aa      	cmp	r2, r5
 80024a0:	d107      	bne.n	80024b2 <VL53L0X_GetRangingMeasurementData+0x128>
					if (RangeFractionalEnable)
 80024a2:	f1be 0f00 	cmp.w	lr, #0
 80024a6:	d10a      	bne.n	80024be <VL53L0X_GetRangingMeasurementData+0x134>
						XtalkRangeMilliMeter = 8888
 80024a8:	f648 27e0 	movw	r7, #35552	; 0x8ae0
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 80024ac:	8127      	strh	r7, [r4, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 80024ae:	2000      	movs	r0, #0
 80024b0:	e7b8      	b.n	8002424 <VL53L0X_GetRangingMeasurementData+0x9a>
					(tmpuint16 * SignalRate)
 80024b2:	b280      	uxth	r0, r0
 80024b4:	4350      	muls	r0, r2
						- ((XTalkCompensationRateMegaCps
 80024b6:	1b55      	subs	r5, r2, r5
						/ (SignalRate
 80024b8:	fbb0 f0f5 	udiv	r0, r0, r5
 80024bc:	e7ab      	b.n	8002416 <VL53L0X_GetRangingMeasurementData+0x8c>
						XtalkRangeMilliMeter = 8888;
 80024be:	f242 27b8 	movw	r7, #8888	; 0x22b8
 80024c2:	e7ac      	b.n	800241e <VL53L0X_GetRangingMeasurementData+0x94>

080024c4 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 80024c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80024c6:	4617      	mov	r7, r2
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 80024c8:	210e      	movs	r1, #14
 80024ca:	f10d 0206 	add.w	r2, sp, #6
{
 80024ce:	461d      	mov	r5, r3
 80024d0:	4606      	mov	r6, r0
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 80024d2:	4c0b      	ldr	r4, [pc, #44]	; (8002500 <VL53L0X_GetInterruptThresholds+0x3c>)
	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 80024d4:	f001 fecf 	bl	8004276 <VL53L0X_RdWord>
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 80024d8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80024dc:	ea04 4343 	and.w	r3, r4, r3, lsl #17
 80024e0:	603b      	str	r3, [r7, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 80024e2:	b950      	cbnz	r0, 80024fa <VL53L0X_GetInterruptThresholds+0x36>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 80024e4:	f10d 0206 	add.w	r2, sp, #6
 80024e8:	210c      	movs	r1, #12
 80024ea:	4630      	mov	r0, r6
 80024ec:	f001 fec3 	bl	8004276 <VL53L0X_RdWord>
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 80024f0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80024f4:	ea04 4443 	and.w	r4, r4, r3, lsl #17
		*pThresholdHigh =
 80024f8:	602c      	str	r4, [r5, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 80024fa:	b003      	add	sp, #12
 80024fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024fe:	bf00      	nop
 8002500:	1ffe0000 	.word	0x1ffe0000

08002504 <VL53L0X_CheckAndLoadInterruptSettings>:
{
 8002504:	b573      	push	{r0, r1, r4, r5, r6, lr}
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 8002506:	f890 30da 	ldrb.w	r3, [r0, #218]	; 0xda
	if ((InterruptConfig ==
 800250a:	3b01      	subs	r3, #1
 800250c:	2b02      	cmp	r3, #2
{
 800250e:	4606      	mov	r6, r0
 8002510:	460c      	mov	r4, r1
	if ((InterruptConfig ==
 8002512:	d833      	bhi.n	800257c <VL53L0X_CheckAndLoadInterruptSettings+0x78>
		Status = VL53L0X_GetInterruptThresholds(Dev,
 8002514:	ab01      	add	r3, sp, #4
 8002516:	466a      	mov	r2, sp
 8002518:	2101      	movs	r1, #1
 800251a:	f7ff ffd3 	bl	80024c4 <VL53L0X_GetInterruptThresholds>
		if (((ThresholdLow > 255*65536) ||
 800251e:	9b00      	ldr	r3, [sp, #0]
 8002520:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
		Status = VL53L0X_GetInterruptThresholds(Dev,
 8002524:	4605      	mov	r5, r0
		if (((ThresholdLow > 255*65536) ||
 8002526:	d803      	bhi.n	8002530 <VL53L0X_CheckAndLoadInterruptSettings+0x2c>
 8002528:	9b01      	ldr	r3, [sp, #4]
 800252a:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 800252e:	d906      	bls.n	800253e <VL53L0X_CheckAndLoadInterruptSettings+0x3a>
			(ThresholdHigh > 255*65536)) &&
 8002530:	b92d      	cbnz	r5, 800253e <VL53L0X_CheckAndLoadInterruptSettings+0x3a>
			if (StartNotStopFlag != 0) {
 8002532:	b13c      	cbz	r4, 8002544 <VL53L0X_CheckAndLoadInterruptSettings+0x40>
				Status = VL53L0X_load_tuning_settings(Dev,
 8002534:	4912      	ldr	r1, [pc, #72]	; (8002580 <VL53L0X_CheckAndLoadInterruptSettings+0x7c>)
 8002536:	4630      	mov	r0, r6
 8002538:	f001 fb27 	bl	8003b8a <VL53L0X_load_tuning_settings>
 800253c:	4605      	mov	r5, r0
}
 800253e:	4628      	mov	r0, r5
 8002540:	b002      	add	sp, #8
 8002542:	bd70      	pop	{r4, r5, r6, pc}
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8002544:	2204      	movs	r2, #4
 8002546:	21ff      	movs	r1, #255	; 0xff
 8002548:	4630      	mov	r0, r6
 800254a:	f001 fe47 	bl	80041dc <VL53L0X_WrByte>
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 800254e:	462a      	mov	r2, r5
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8002550:	4604      	mov	r4, r0
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8002552:	2170      	movs	r1, #112	; 0x70
 8002554:	4630      	mov	r0, r6
 8002556:	f001 fe41 	bl	80041dc <VL53L0X_WrByte>
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800255a:	462a      	mov	r2, r5
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 800255c:	4304      	orrs	r4, r0
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800255e:	21ff      	movs	r1, #255	; 0xff
 8002560:	4630      	mov	r0, r6
 8002562:	f001 fe3b 	bl	80041dc <VL53L0X_WrByte>
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8002566:	b264      	sxtb	r4, r4
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8002568:	4304      	orrs	r4, r0
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800256a:	462a      	mov	r2, r5
 800256c:	2180      	movs	r1, #128	; 0x80
 800256e:	4630      	mov	r0, r6
 8002570:	f001 fe34 	bl	80041dc <VL53L0X_WrByte>
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8002574:	b264      	sxtb	r4, r4
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8002576:	4320      	orrs	r0, r4
 8002578:	b245      	sxtb	r5, r0
 800257a:	e7e0      	b.n	800253e <VL53L0X_CheckAndLoadInterruptSettings+0x3a>
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800257c:	2500      	movs	r5, #0
 800257e:	e7de      	b.n	800253e <VL53L0X_CheckAndLoadInterruptSettings+0x3a>
 8002580:	200000f7 	.word	0x200000f7

08002584 <VL53L0X_StartMeasurement>:
{
 8002584:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002586:	4604      	mov	r4, r0
	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 8002588:	2201      	movs	r2, #1
 800258a:	2180      	movs	r1, #128	; 0x80
	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 800258c:	7c05      	ldrb	r5, [r0, #16]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 800258e:	f001 fe25 	bl	80041dc <VL53L0X_WrByte>
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8002592:	2201      	movs	r2, #1
 8002594:	21ff      	movs	r1, #255	; 0xff
 8002596:	4620      	mov	r0, r4
 8002598:	f001 fe20 	bl	80041dc <VL53L0X_WrByte>
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 800259c:	2200      	movs	r2, #0
 800259e:	4611      	mov	r1, r2
 80025a0:	4620      	mov	r0, r4
 80025a2:	f001 fe1b 	bl	80041dc <VL53L0X_WrByte>
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 80025a6:	f894 213a 	ldrb.w	r2, [r4, #314]	; 0x13a
 80025aa:	2191      	movs	r1, #145	; 0x91
 80025ac:	4620      	mov	r0, r4
 80025ae:	f001 fe15 	bl	80041dc <VL53L0X_WrByte>
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 80025b2:	2201      	movs	r2, #1
 80025b4:	2100      	movs	r1, #0
 80025b6:	4620      	mov	r0, r4
 80025b8:	f001 fe10 	bl	80041dc <VL53L0X_WrByte>
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80025bc:	2200      	movs	r2, #0
 80025be:	21ff      	movs	r1, #255	; 0xff
 80025c0:	4620      	mov	r0, r4
 80025c2:	f001 fe0b 	bl	80041dc <VL53L0X_WrByte>
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 80025c6:	2200      	movs	r2, #0
 80025c8:	2180      	movs	r1, #128	; 0x80
 80025ca:	4620      	mov	r0, r4
 80025cc:	f001 fe06 	bl	80041dc <VL53L0X_WrByte>
	switch (DeviceMode) {
 80025d0:	2d01      	cmp	r5, #1
 80025d2:	d02a      	beq.n	800262a <VL53L0X_StartMeasurement+0xa6>
 80025d4:	d304      	bcc.n	80025e0 <VL53L0X_StartMeasurement+0x5c>
 80025d6:	2d03      	cmp	r5, #3
 80025d8:	d037      	beq.n	800264a <VL53L0X_StartMeasurement+0xc6>
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 80025da:	f06f 0007 	mvn.w	r0, #7
 80025de:	e015      	b.n	800260c <VL53L0X_StartMeasurement+0x88>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 80025e0:	2201      	movs	r2, #1
 80025e2:	2100      	movs	r1, #0
 80025e4:	4620      	mov	r0, r4
 80025e6:	f001 fdf9 	bl	80041dc <VL53L0X_WrByte>
		Byte = StartStopByte;
 80025ea:	2301      	movs	r3, #1
 80025ec:	f88d 3007 	strb.w	r3, [sp, #7]
		if (Status == VL53L0X_ERROR_NONE) {
 80025f0:	b960      	cbnz	r0, 800260c <VL53L0X_StartMeasurement+0x88>
 80025f2:	4605      	mov	r5, r0
			} while (((Byte & StartStopByte) == StartStopByte)
 80025f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 80025f8:	07db      	lsls	r3, r3, #31
				LoopNb = LoopNb + 1;
 80025fa:	f105 0501 	add.w	r5, r5, #1
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 80025fe:	d50e      	bpl.n	800261e <VL53L0X_StartMeasurement+0x9a>
				&& (Status == VL53L0X_ERROR_NONE)
 8002600:	b968      	cbnz	r0, 800261e <VL53L0X_StartMeasurement+0x9a>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8002602:	f5b5 6ffa 	cmp.w	r5, #2000	; 0x7d0
 8002606:	d103      	bne.n	8002610 <VL53L0X_StartMeasurement+0x8c>
				Status = VL53L0X_ERROR_TIME_OUT;
 8002608:	f06f 0006 	mvn.w	r0, #6
}
 800260c:	b003      	add	sp, #12
 800260e:	bd30      	pop	{r4, r5, pc}
					Status = VL53L0X_RdByte(Dev,
 8002610:	4601      	mov	r1, r0
 8002612:	f10d 0207 	add.w	r2, sp, #7
 8002616:	4620      	mov	r0, r4
 8002618:	f001 fe1c 	bl	8004254 <VL53L0X_RdByte>
 800261c:	e7ea      	b.n	80025f4 <VL53L0X_StartMeasurement+0x70>
				Status = VL53L0X_ERROR_TIME_OUT;
 800261e:	f5b5 6ffa 	cmp.w	r5, #2000	; 0x7d0
 8002622:	bf08      	it	eq
 8002624:	f06f 0006 	mvneq.w	r0, #6
 8002628:	e7f0      	b.n	800260c <VL53L0X_StartMeasurement+0x88>
		if (Status == VL53L0X_ERROR_NONE)
 800262a:	b918      	cbnz	r0, 8002634 <VL53L0X_StartMeasurement+0xb0>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800262c:	4629      	mov	r1, r5
 800262e:	4620      	mov	r0, r4
 8002630:	f7ff ff68 	bl	8002504 <VL53L0X_CheckAndLoadInterruptSettings>
		Status = VL53L0X_WrByte(Dev,
 8002634:	2202      	movs	r2, #2
		Status = VL53L0X_WrByte(Dev,
 8002636:	2100      	movs	r1, #0
 8002638:	4620      	mov	r0, r4
 800263a:	f001 fdcf 	bl	80041dc <VL53L0X_WrByte>
		if (Status == VL53L0X_ERROR_NONE) {
 800263e:	2800      	cmp	r0, #0
 8002640:	d1e4      	bne.n	800260c <VL53L0X_StartMeasurement+0x88>
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8002642:	2304      	movs	r3, #4
 8002644:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
 8002648:	e7e0      	b.n	800260c <VL53L0X_StartMeasurement+0x88>
		if (Status == VL53L0X_ERROR_NONE)
 800264a:	b918      	cbnz	r0, 8002654 <VL53L0X_StartMeasurement+0xd0>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800264c:	2101      	movs	r1, #1
 800264e:	4620      	mov	r0, r4
 8002650:	f7ff ff58 	bl	8002504 <VL53L0X_CheckAndLoadInterruptSettings>
		Status = VL53L0X_WrByte(Dev,
 8002654:	2204      	movs	r2, #4
 8002656:	e7ee      	b.n	8002636 <VL53L0X_StartMeasurement+0xb2>

08002658 <VL53L0X_PerformSingleMeasurement>:
{
 8002658:	b538      	push	{r3, r4, r5, lr}
	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 800265a:	7c05      	ldrb	r5, [r0, #16]
{
 800265c:	4604      	mov	r4, r0
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800265e:	b125      	cbz	r5, 800266a <VL53L0X_PerformSingleMeasurement+0x12>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8002660:	4620      	mov	r0, r4
 8002662:	f000 fd73 	bl	800314c <VL53L0X_measurement_poll_for_completion>
	if (Status == VL53L0X_ERROR_NONE
 8002666:	b128      	cbz	r0, 8002674 <VL53L0X_PerformSingleMeasurement+0x1c>
 8002668:	bd38      	pop	{r3, r4, r5, pc}
		Status = VL53L0X_StartMeasurement(Dev);
 800266a:	f7ff ff8b 	bl	8002584 <VL53L0X_StartMeasurement>
	if (Status == VL53L0X_ERROR_NONE)
 800266e:	2800      	cmp	r0, #0
 8002670:	d0f6      	beq.n	8002660 <VL53L0X_PerformSingleMeasurement+0x8>
}
 8002672:	bd38      	pop	{r3, r4, r5, pc}
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8002674:	2d00      	cmp	r5, #0
 8002676:	d1fc      	bne.n	8002672 <VL53L0X_PerformSingleMeasurement+0x1a>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8002678:	2303      	movs	r3, #3
 800267a:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
 800267e:	e7f8      	b.n	8002672 <VL53L0X_PerformSingleMeasurement+0x1a>

08002680 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 8002680:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002682:	4606      	mov	r6, r0
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 8002684:	2500      	movs	r5, #0
	do {
		Status = VL53L0X_WrByte(Dev,
 8002686:	2201      	movs	r2, #1
 8002688:	210b      	movs	r1, #11
 800268a:	4630      	mov	r0, r6
 800268c:	f001 fda6 	bl	80041dc <VL53L0X_WrByte>
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 8002690:	2200      	movs	r2, #0
		Status = VL53L0X_WrByte(Dev,
 8002692:	4604      	mov	r4, r0
		Status |= VL53L0X_WrByte(Dev,
 8002694:	210b      	movs	r1, #11
 8002696:	4630      	mov	r0, r6
 8002698:	f001 fda0 	bl	80041dc <VL53L0X_WrByte>
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 800269c:	f10d 0207 	add.w	r2, sp, #7
		Status |= VL53L0X_WrByte(Dev,
 80026a0:	4304      	orrs	r4, r0
		Status |= VL53L0X_RdByte(Dev,
 80026a2:	2113      	movs	r1, #19
 80026a4:	4630      	mov	r0, r6
 80026a6:	f001 fdd5 	bl	8004254 <VL53L0X_RdByte>
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
	} while (((Byte & 0x07) != 0x00)
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 80026aa:	f89d 3007 	ldrb.w	r3, [sp, #7]
		Status |= VL53L0X_WrByte(Dev,
 80026ae:	b264      	sxtb	r4, r4
		Status |= VL53L0X_RdByte(Dev,
 80026b0:	4320      	orrs	r0, r4
		LoopCount++;
 80026b2:	3501      	adds	r5, #1
			&& (Status == VL53L0X_ERROR_NONE));
 80026b4:	075b      	lsls	r3, r3, #29
		Status |= VL53L0X_RdByte(Dev,
 80026b6:	b240      	sxtb	r0, r0
		LoopCount++;
 80026b8:	b2ed      	uxtb	r5, r5
			&& (Status == VL53L0X_ERROR_NONE));
 80026ba:	d005      	beq.n	80026c8 <VL53L0X_ClearInterruptMask+0x48>
			&& (LoopCount < 3)
 80026bc:	2d03      	cmp	r5, #3
 80026be:	d008      	beq.n	80026d2 <VL53L0X_ClearInterruptMask+0x52>
			&& (Status == VL53L0X_ERROR_NONE));
 80026c0:	2800      	cmp	r0, #0
 80026c2:	d0e0      	beq.n	8002686 <VL53L0X_ClearInterruptMask+0x6>
	if (LoopCount >= 3)
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;

	LOG_FUNCTION_END(Status);
	return Status;
}
 80026c4:	b002      	add	sp, #8
 80026c6:	bd70      	pop	{r4, r5, r6, pc}
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 80026c8:	2d03      	cmp	r5, #3
 80026ca:	bf08      	it	eq
 80026cc:	f06f 000b 	mvneq.w	r0, #11
 80026d0:	e7f8      	b.n	80026c4 <VL53L0X_ClearInterruptMask+0x44>
 80026d2:	f06f 000b 	mvn.w	r0, #11
 80026d6:	e7f5      	b.n	80026c4 <VL53L0X_ClearInterruptMask+0x44>

080026d8 <VL53L0X_PerformSingleRangingMeasurement>:
{
 80026d8:	b538      	push	{r3, r4, r5, lr}
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 80026da:	2300      	movs	r3, #0
 80026dc:	7403      	strb	r3, [r0, #16]
{
 80026de:	4604      	mov	r4, r0
 80026e0:	460d      	mov	r5, r1
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 80026e2:	f7ff ffb9 	bl	8002658 <VL53L0X_PerformSingleMeasurement>
	if (Status == VL53L0X_ERROR_NONE)
 80026e6:	b950      	cbnz	r0, 80026fe <VL53L0X_PerformSingleRangingMeasurement+0x26>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 80026e8:	4629      	mov	r1, r5
 80026ea:	4620      	mov	r0, r4
 80026ec:	f7ff fe4d 	bl	800238a <VL53L0X_GetRangingMeasurementData>
	if (Status == VL53L0X_ERROR_NONE)
 80026f0:	b928      	cbnz	r0, 80026fe <VL53L0X_PerformSingleRangingMeasurement+0x26>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80026f2:	4601      	mov	r1, r0
 80026f4:	4620      	mov	r0, r4
}
 80026f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80026fa:	f7ff bfc1 	b.w	8002680 <VL53L0X_ClearInterruptMask>
}
 80026fe:	bd38      	pop	{r3, r4, r5, pc}

08002700 <VL53L0X_SetGpioConfig>:
{
 8002700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002702:	4605      	mov	r5, r0
 8002704:	461c      	mov	r4, r3
 8002706:	f89d 7018 	ldrb.w	r7, [sp, #24]
	if (Pin != 0) {
 800270a:	460e      	mov	r6, r1
 800270c:	2900      	cmp	r1, #0
 800270e:	f040 809a 	bne.w	8002846 <VL53L0X_SetGpioConfig+0x146>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 8002712:	2a14      	cmp	r2, #20
 8002714:	d108      	bne.n	8002728 <VL53L0X_SetGpioConfig+0x28>
			data = 1;
 8002716:	2f00      	cmp	r7, #0
		Status = VL53L0X_WrByte(Dev,
 8002718:	bf0c      	ite	eq
 800271a:	2210      	moveq	r2, #16
 800271c:	2201      	movne	r2, #1
 800271e:	2184      	movs	r1, #132	; 0x84
}
 8002720:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		Status = VL53L0X_WrByte(Dev,
 8002724:	f001 bd5a 	b.w	80041dc <VL53L0X_WrByte>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 8002728:	2a15      	cmp	r2, #21
 800272a:	d167      	bne.n	80027fc <VL53L0X_SetGpioConfig+0xfc>
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800272c:	2201      	movs	r2, #1
 800272e:	21ff      	movs	r1, #255	; 0xff
 8002730:	f001 fd54 	bl	80041dc <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8002734:	4632      	mov	r2, r6
 8002736:	4631      	mov	r1, r6
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8002738:	4604      	mov	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800273a:	4628      	mov	r0, r5
 800273c:	f001 fd4e 	bl	80041dc <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8002740:	4632      	mov	r2, r6
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8002742:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8002744:	21ff      	movs	r1, #255	; 0xff
 8002746:	4628      	mov	r0, r5
 8002748:	f001 fd48 	bl	80041dc <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800274c:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800274e:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8002750:	2201      	movs	r2, #1
 8002752:	2180      	movs	r1, #128	; 0x80
 8002754:	4628      	mov	r0, r5
 8002756:	f001 fd41 	bl	80041dc <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800275a:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800275c:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 800275e:	2202      	movs	r2, #2
 8002760:	2185      	movs	r1, #133	; 0x85
 8002762:	4628      	mov	r0, r5
 8002764:	f001 fd3a 	bl	80041dc <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8002768:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 800276a:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 800276c:	2204      	movs	r2, #4
 800276e:	21ff      	movs	r1, #255	; 0xff
 8002770:	4628      	mov	r0, r5
 8002772:	f001 fd33 	bl	80041dc <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 8002776:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 8002778:	4632      	mov	r2, r6
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 800277a:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 800277c:	21cd      	movs	r1, #205	; 0xcd
 800277e:	4628      	mov	r0, r5
 8002780:	f001 fd2c 	bl	80041dc <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 8002784:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 8002786:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 8002788:	2211      	movs	r2, #17
 800278a:	21cc      	movs	r1, #204	; 0xcc
 800278c:	4628      	mov	r0, r5
 800278e:	f001 fd25 	bl	80041dc <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 8002792:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 8002794:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 8002796:	2207      	movs	r2, #7
 8002798:	21ff      	movs	r1, #255	; 0xff
 800279a:	4628      	mov	r0, r5
 800279c:	f001 fd1e 	bl	80041dc <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 80027a0:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 80027a2:	4632      	mov	r2, r6
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 80027a4:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 80027a6:	21be      	movs	r1, #190	; 0xbe
 80027a8:	4628      	mov	r0, r5
 80027aa:	f001 fd17 	bl	80041dc <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 80027ae:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 80027b0:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 80027b2:	2206      	movs	r2, #6
 80027b4:	21ff      	movs	r1, #255	; 0xff
 80027b6:	4628      	mov	r0, r5
 80027b8:	f001 fd10 	bl	80041dc <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 80027bc:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 80027be:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 80027c0:	2209      	movs	r2, #9
 80027c2:	21cc      	movs	r1, #204	; 0xcc
 80027c4:	4628      	mov	r0, r5
 80027c6:	f001 fd09 	bl	80041dc <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 80027ca:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80027cc:	4632      	mov	r2, r6
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 80027ce:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80027d0:	21ff      	movs	r1, #255	; 0xff
 80027d2:	4628      	mov	r0, r5
 80027d4:	f001 fd02 	bl	80041dc <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 80027d8:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80027da:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80027dc:	2201      	movs	r2, #1
 80027de:	21ff      	movs	r1, #255	; 0xff
 80027e0:	4628      	mov	r0, r5
 80027e2:	f001 fcfb 	bl	80041dc <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80027e6:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80027e8:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80027ea:	4632      	mov	r2, r6
 80027ec:	4631      	mov	r1, r6
 80027ee:	4628      	mov	r0, r5
 80027f0:	f001 fcf4 	bl	80041dc <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80027f4:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80027f6:	4320      	orrs	r0, r4
 80027f8:	b240      	sxtb	r0, r0
 80027fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			switch (Functionality) {
 80027fc:	2c04      	cmp	r4, #4
 80027fe:	d825      	bhi.n	800284c <VL53L0X_SetGpioConfig+0x14c>
 8002800:	e8df f004 	tbb	[pc, r4]
 8002804:	0a032729 	.word	0x0a032729
 8002808:	0c          	.byte	0x0c
 8002809:	00          	.byte	0x00
				data = 0x02;
 800280a:	2202      	movs	r2, #2
			Status = VL53L0X_WrByte(Dev,
 800280c:	210a      	movs	r1, #10
 800280e:	4628      	mov	r0, r5
 8002810:	f001 fce4 	bl	80041dc <VL53L0X_WrByte>
		if (Status == VL53L0X_ERROR_NONE) {
 8002814:	b120      	cbz	r0, 8002820 <VL53L0X_SetGpioConfig+0x120>
}
 8002816:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				data = 0x03;
 8002818:	2203      	movs	r2, #3
				break;
 800281a:	e7f7      	b.n	800280c <VL53L0X_SetGpioConfig+0x10c>
				data = 0x04;
 800281c:	2204      	movs	r2, #4
				break;
 800281e:	e7f5      	b.n	800280c <VL53L0X_SetGpioConfig+0x10c>
				data = (uint8_t)(1 << 4);
 8002820:	2f00      	cmp	r7, #0
			Status = VL53L0X_UpdateByte(Dev,
 8002822:	bf0c      	ite	eq
 8002824:	4633      	moveq	r3, r6
 8002826:	2310      	movne	r3, #16
 8002828:	22ef      	movs	r2, #239	; 0xef
 800282a:	2184      	movs	r1, #132	; 0x84
 800282c:	4628      	mov	r0, r5
 800282e:	f001 fcf2 	bl	8004216 <VL53L0X_UpdateByte>
		if (Status == VL53L0X_ERROR_NONE)
 8002832:	2800      	cmp	r0, #0
 8002834:	d1ef      	bne.n	8002816 <VL53L0X_SetGpioConfig+0x116>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8002836:	f885 40da 	strb.w	r4, [r5, #218]	; 0xda
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800283a:	4601      	mov	r1, r0
 800283c:	4628      	mov	r0, r5
}
 800283e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8002842:	f7ff bf1d 	b.w	8002680 <VL53L0X_ClearInterruptMask>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 8002846:	f06f 0009 	mvn.w	r0, #9
 800284a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				Status =
 800284c:	f06f 000a 	mvn.w	r0, #10
 8002850:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				data = 0x01;
 8002852:	2201      	movs	r2, #1
 8002854:	e7da      	b.n	800280c <VL53L0X_SetGpioConfig+0x10c>
				data = 0x00;
 8002856:	2200      	movs	r2, #0
 8002858:	e7d8      	b.n	800280c <VL53L0X_SetGpioConfig+0x10c>
	...

0800285c <VL53L0X_StaticInit>:
{
 800285c:	b570      	push	{r4, r5, r6, lr}
 800285e:	b096      	sub	sp, #88	; 0x58
 8002860:	4605      	mov	r5, r0
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 8002862:	2240      	movs	r2, #64	; 0x40
 8002864:	2100      	movs	r1, #0
 8002866:	a806      	add	r0, sp, #24
 8002868:	f001 fd76 	bl	8004358 <memset>
	uint16_t tempword = 0;
 800286c:	2300      	movs	r3, #0
	Status = VL53L0X_get_info_from_device(Dev, 1);
 800286e:	2101      	movs	r1, #1
 8002870:	4628      	mov	r0, r5
	uint16_t tempword = 0;
 8002872:	f8ad 300e 	strh.w	r3, [sp, #14]
	uint8_t tempbyte = 0;
 8002876:	f88d 300b 	strb.w	r3, [sp, #11]
	uint8_t isApertureSpads = 0;
 800287a:	f88d 300c 	strb.w	r3, [sp, #12]
	uint32_t refSpadCount = 0;
 800287e:	9304      	str	r3, [sp, #16]
	Status = VL53L0X_get_info_from_device(Dev, 1);
 8002880:	f000 fcb6 	bl	80031f0 <VL53L0X_get_info_from_device>
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8002884:	f895 2114 	ldrb.w	r2, [r5, #276]	; 0x114
	if ((ApertureSpads > 1) ||
 8002888:	2a01      	cmp	r2, #1
 800288a:	d806      	bhi.n	800289a <VL53L0X_StaticInit+0x3e>
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800288c:	f895 1113 	ldrb.w	r1, [r5, #275]	; 0x113
	if ((ApertureSpads > 1) ||
 8002890:	f040 80ae 	bne.w	80029f0 <VL53L0X_StaticInit+0x194>
		((ApertureSpads == 1) && (count > 32)) ||
 8002894:	2920      	cmp	r1, #32
		((ApertureSpads == 0) && (count > 12)))
 8002896:	f240 80ad 	bls.w	80029f4 <VL53L0X_StaticInit+0x198>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 800289a:	aa03      	add	r2, sp, #12
 800289c:	a904      	add	r1, sp, #16
 800289e:	4628      	mov	r0, r5
 80028a0:	f000 fb20 	bl	8002ee4 <VL53L0X_perform_ref_spad_management>
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 80028a4:	4604      	mov	r4, r0
	if (Status == VL53L0X_ERROR_NONE) {
 80028a6:	2800      	cmp	r0, #0
 80028a8:	f040 809f 	bne.w	80029ea <VL53L0X_StaticInit+0x18e>
		if (UseInternalTuningSettings == 0)
 80028ac:	f895 3150 	ldrb.w	r3, [r5, #336]	; 0x150
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	f040 80a3 	bne.w	80029fc <VL53L0X_StaticInit+0x1a0>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 80028b6:	f8d5 114c 	ldr.w	r1, [r5, #332]	; 0x14c
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 80028ba:	4628      	mov	r0, r5
 80028bc:	f001 f965 	bl	8003b8a <VL53L0X_load_tuning_settings>
	if (Status == VL53L0X_ERROR_NONE) {
 80028c0:	4604      	mov	r4, r0
 80028c2:	2800      	cmp	r0, #0
 80028c4:	f040 8091 	bne.w	80029ea <VL53L0X_StaticInit+0x18e>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 80028c8:	9400      	str	r4, [sp, #0]
 80028ca:	4622      	mov	r2, r4
 80028cc:	4621      	mov	r1, r4
 80028ce:	2304      	movs	r3, #4
 80028d0:	4628      	mov	r0, r5
 80028d2:	f7ff ff15 	bl	8002700 <VL53L0X_SetGpioConfig>
	if (Status == VL53L0X_ERROR_NONE) {
 80028d6:	4604      	mov	r4, r0
 80028d8:	2800      	cmp	r0, #0
 80028da:	f040 8086 	bne.w	80029ea <VL53L0X_StaticInit+0x18e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80028de:	2201      	movs	r2, #1
 80028e0:	21ff      	movs	r1, #255	; 0xff
 80028e2:	4628      	mov	r0, r5
 80028e4:	f001 fc7a 	bl	80041dc <VL53L0X_WrByte>
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 80028e8:	f10d 020e 	add.w	r2, sp, #14
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80028ec:	4606      	mov	r6, r0
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 80028ee:	2184      	movs	r1, #132	; 0x84
 80028f0:	4628      	mov	r0, r5
 80028f2:	f001 fcc0 	bl	8004276 <VL53L0X_RdWord>
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80028f6:	4622      	mov	r2, r4
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 80028f8:	4306      	orrs	r6, r0
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80028fa:	21ff      	movs	r1, #255	; 0xff
 80028fc:	4628      	mov	r0, r5
 80028fe:	f001 fc6d 	bl	80041dc <VL53L0X_WrByte>
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8002902:	b276      	sxtb	r6, r6
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8002904:	4330      	orrs	r0, r6
 8002906:	b244      	sxtb	r4, r0
	if (Status == VL53L0X_ERROR_NONE) {
 8002908:	2c00      	cmp	r4, #0
 800290a:	d16e      	bne.n	80029ea <VL53L0X_StaticInit+0x18e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 800290c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8002910:	011b      	lsls	r3, r3, #4
 8002912:	f8c5 30d4 	str.w	r3, [r5, #212]	; 0xd4
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8002916:	a906      	add	r1, sp, #24
 8002918:	4628      	mov	r0, r5
 800291a:	f7ff fc2d 	bl	8002178 <VL53L0X_GetDeviceParameters>
	if (Status == VL53L0X_ERROR_NONE) {
 800291e:	4604      	mov	r4, r0
 8002920:	2800      	cmp	r0, #0
 8002922:	d162      	bne.n	80029ea <VL53L0X_StaticInit+0x18e>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 8002924:	f10d 010b 	add.w	r1, sp, #11
 8002928:	4628      	mov	r0, r5
 800292a:	f7ff faad 	bl	8001e88 <VL53L0X_GetFractionEnable>
		if (Status == VL53L0X_ERROR_NONE)
 800292e:	4604      	mov	r4, r0
 8002930:	2800      	cmp	r0, #0
 8002932:	d15a      	bne.n	80029ea <VL53L0X_StaticInit+0x18e>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 8002934:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8002938:	f885 3131 	strb.w	r3, [r5, #305]	; 0x131
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 800293c:	ae06      	add	r6, sp, #24
 800293e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002940:	f105 0410 	add.w	r4, r5, #16
 8002944:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002946:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002948:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800294a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800294c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800294e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002952:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		Status = VL53L0X_RdByte(Dev,
 8002956:	f10d 020b 	add.w	r2, sp, #11
 800295a:	2101      	movs	r1, #1
 800295c:	4628      	mov	r0, r5
 800295e:	f001 fc79 	bl	8004254 <VL53L0X_RdByte>
		if (Status == VL53L0X_ERROR_NONE)
 8002962:	4604      	mov	r4, r0
 8002964:	2800      	cmp	r0, #0
 8002966:	d140      	bne.n	80029ea <VL53L0X_StaticInit+0x18e>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 8002968:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800296c:	f885 3130 	strb.w	r3, [r5, #304]	; 0x130
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8002970:	4602      	mov	r2, r0
 8002972:	4601      	mov	r1, r0
 8002974:	4628      	mov	r0, r5
 8002976:	f7ff fa97 	bl	8001ea8 <VL53L0X_SetSequenceStepEnable>
	if (Status == VL53L0X_ERROR_NONE)
 800297a:	4604      	mov	r4, r0
 800297c:	bba8      	cbnz	r0, 80029ea <VL53L0X_StaticInit+0x18e>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800297e:	4602      	mov	r2, r0
 8002980:	2102      	movs	r1, #2
 8002982:	4628      	mov	r0, r5
 8002984:	f7ff fa90 	bl	8001ea8 <VL53L0X_SetSequenceStepEnable>
	if (Status == VL53L0X_ERROR_NONE)
 8002988:	4604      	mov	r4, r0
 800298a:	bb70      	cbnz	r0, 80029ea <VL53L0X_StaticInit+0x18e>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800298c:	2303      	movs	r3, #3
	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 800298e:	4601      	mov	r1, r0
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8002990:	f885 3132 	strb.w	r3, [r5, #306]	; 0x132
	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8002994:	f10d 020d 	add.w	r2, sp, #13
 8002998:	4628      	mov	r0, r5
 800299a:	f001 f817 	bl	80039cc <VL53L0X_get_vcsel_pulse_period>
	if (Status == VL53L0X_ERROR_NONE) {
 800299e:	4604      	mov	r4, r0
 80029a0:	bb18      	cbnz	r0, 80029ea <VL53L0X_StaticInit+0x18e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80029a2:	f89d 300d 	ldrb.w	r3, [sp, #13]
 80029a6:	f885 30e8 	strb.w	r3, [r5, #232]	; 0xe8
	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 80029aa:	f10d 020d 	add.w	r2, sp, #13
 80029ae:	2101      	movs	r1, #1
 80029b0:	4628      	mov	r0, r5
 80029b2:	f001 f80b 	bl	80039cc <VL53L0X_get_vcsel_pulse_period>
	if (Status == VL53L0X_ERROR_NONE) {
 80029b6:	4604      	mov	r4, r0
 80029b8:	b9b8      	cbnz	r0, 80029ea <VL53L0X_StaticInit+0x18e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80029ba:	f89d 300d 	ldrb.w	r3, [sp, #13]
 80029be:	f885 30e0 	strb.w	r3, [r5, #224]	; 0xe0
		Status = get_sequence_step_timeout(
 80029c2:	aa05      	add	r2, sp, #20
 80029c4:	2103      	movs	r1, #3
 80029c6:	4628      	mov	r0, r5
 80029c8:	f000 fef6 	bl	80037b8 <get_sequence_step_timeout>
	if (Status == VL53L0X_ERROR_NONE) {
 80029cc:	4604      	mov	r4, r0
 80029ce:	b960      	cbnz	r0, 80029ea <VL53L0X_StaticInit+0x18e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 80029d0:	9b05      	ldr	r3, [sp, #20]
 80029d2:	f8c5 30e4 	str.w	r3, [r5, #228]	; 0xe4
		Status = get_sequence_step_timeout(
 80029d6:	aa05      	add	r2, sp, #20
 80029d8:	2104      	movs	r1, #4
 80029da:	4628      	mov	r0, r5
 80029dc:	f000 feec 	bl	80037b8 <get_sequence_step_timeout>
	if (Status == VL53L0X_ERROR_NONE) {
 80029e0:	4604      	mov	r4, r0
 80029e2:	b910      	cbnz	r0, 80029ea <VL53L0X_StaticInit+0x18e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 80029e4:	9b05      	ldr	r3, [sp, #20]
 80029e6:	f8c5 30dc 	str.w	r3, [r5, #220]	; 0xdc
}
 80029ea:	4620      	mov	r0, r4
 80029ec:	b016      	add	sp, #88	; 0x58
 80029ee:	bd70      	pop	{r4, r5, r6, pc}
		((ApertureSpads == 0) && (count > 12)))
 80029f0:	290c      	cmp	r1, #12
 80029f2:	e750      	b.n	8002896 <VL53L0X_StaticInit+0x3a>
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 80029f4:	4628      	mov	r0, r5
 80029f6:	f000 f913 	bl	8002c20 <VL53L0X_set_reference_spads>
 80029fa:	e753      	b.n	80028a4 <VL53L0X_StaticInit+0x48>
			pTuningSettingBuffer = DefaultTuningSettings;
 80029fc:	4900      	ldr	r1, [pc, #0]	; (8002a00 <VL53L0X_StaticInit+0x1a4>)
 80029fe:	e75c      	b.n	80028ba <VL53L0X_StaticInit+0x5e>
 8002a00:	20000004 	.word	0x20000004

08002a04 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8002a04:	b513      	push	{r0, r1, r4, lr}
 8002a06:	460c      	mov	r4, r1
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 8002a08:	f10d 0207 	add.w	r2, sp, #7
 8002a0c:	2113      	movs	r1, #19
 8002a0e:	f001 fc21 	bl	8004254 <VL53L0X_RdByte>
	*pInterruptMaskStatus = Byte & 0x07;
 8002a12:	f89d 3007 	ldrb.w	r3, [sp, #7]

	if (Byte & 0x18)
 8002a16:	f013 0f18 	tst.w	r3, #24
	*pInterruptMaskStatus = Byte & 0x07;
 8002a1a:	f003 0207 	and.w	r2, r3, #7
		Status = VL53L0X_ERROR_RANGE_ERROR;

	LOG_FUNCTION_END(Status);
	return Status;
}
 8002a1e:	bf18      	it	ne
 8002a20:	f06f 0005 	mvnne.w	r0, #5
	*pInterruptMaskStatus = Byte & 0x07;
 8002a24:	6022      	str	r2, [r4, #0]
}
 8002a26:	b002      	add	sp, #8
 8002a28:	bd10      	pop	{r4, pc}

08002a2a <VL53L0X_GetMeasurementDataReady>:
{
 8002a2a:	b513      	push	{r0, r1, r4, lr}
	if (InterruptConfig ==
 8002a2c:	f890 30da 	ldrb.w	r3, [r0, #218]	; 0xda
 8002a30:	2b04      	cmp	r3, #4
{
 8002a32:	460c      	mov	r4, r1
	if (InterruptConfig ==
 8002a34:	d10b      	bne.n	8002a4e <VL53L0X_GetMeasurementDataReady+0x24>
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8002a36:	a901      	add	r1, sp, #4
 8002a38:	f7ff ffe4 	bl	8002a04 <VL53L0X_GetInterruptMaskStatus>
		if (InterruptMask ==
 8002a3c:	9b01      	ldr	r3, [sp, #4]
 8002a3e:	2b04      	cmp	r3, #4
 8002a40:	d101      	bne.n	8002a46 <VL53L0X_GetMeasurementDataReady+0x1c>
				*pMeasurementDataReady = 1;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e000      	b.n	8002a48 <VL53L0X_GetMeasurementDataReady+0x1e>
			*pMeasurementDataReady = 0;
 8002a46:	2300      	movs	r3, #0
 8002a48:	7023      	strb	r3, [r4, #0]
}
 8002a4a:	b002      	add	sp, #8
 8002a4c:	bd10      	pop	{r4, pc}
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 8002a4e:	aa01      	add	r2, sp, #4
 8002a50:	2114      	movs	r1, #20
 8002a52:	f001 fbff 	bl	8004254 <VL53L0X_RdByte>
		if (Status == VL53L0X_ERROR_NONE) {
 8002a56:	2800      	cmp	r0, #0
 8002a58:	d1f7      	bne.n	8002a4a <VL53L0X_GetMeasurementDataReady+0x20>
			if (SysRangeStatusRegister & 0x01)
 8002a5a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002a5e:	07db      	lsls	r3, r3, #31
 8002a60:	d4ef      	bmi.n	8002a42 <VL53L0X_GetMeasurementDataReady+0x18>
				*pMeasurementDataReady = 0;
 8002a62:	7020      	strb	r0, [r4, #0]
 8002a64:	e7f1      	b.n	8002a4a <VL53L0X_GetMeasurementDataReady+0x20>

08002a66 <VL53L0X_PerformRefSpadManagement>:
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 8002a66:	f000 ba3d 	b.w	8002ee4 <VL53L0X_perform_ref_spad_management>

08002a6a <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 8002a6a:	b513      	push	{r0, r1, r4, lr}
 8002a6c:	460c      	mov	r4, r1
	int16_t cMaxOffset = 2047;
	int16_t cOffsetRange = 4096;

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 8002a6e:	f10d 0206 	add.w	r2, sp, #6
 8002a72:	2128      	movs	r1, #40	; 0x28
 8002a74:	f001 fbff 	bl	8004276 <VL53L0X_RdWord>
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 8002a78:	b970      	cbnz	r0, 8002a98 <VL53L0X_get_offset_calibration_data_micro_meter+0x2e>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 8002a7a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8002a7e:	f3c3 030b 	ubfx	r3, r3, #0, #12

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 8002a82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a86:	f04f 02fa 	mov.w	r2, #250	; 0xfa
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 8002a8a:	bf26      	itte	cs
 8002a8c:	f5a3 5380 	subcs.w	r3, r3, #4096	; 0x1000
					* 250;
 8002a90:	fb13 f302 	smulbbcs	r3, r3, r2
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 8002a94:	4353      	mulcc	r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8002a96:	6023      	str	r3, [r4, #0]

	}

	return Status;
}
 8002a98:	b002      	add	sp, #8
 8002a9a:	bd10      	pop	{r4, pc}

08002a9c <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 8002a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
	 * the index of the bit within each byte.
	 */

	*next = -1;

	startIndex = curr / cSpadsPerByte;
 8002a9e:	ea4f 0ed2 	mov.w	lr, r2, lsr #3
	*next = -1;
 8002aa2:	f04f 34ff 	mov.w	r4, #4294967295
 8002aa6:	601c      	str	r4, [r3, #0]
	fineOffset = curr % cSpadsPerByte;
 8002aa8:	f002 0207 	and.w	r2, r2, #7
 8002aac:	ea4f 0cce 	mov.w	ip, lr, lsl #3

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8002ab0:	4676      	mov	r6, lr
	uint8_t success = 0;
 8002ab2:	2700      	movs	r7, #0
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8002ab4:	428e      	cmp	r6, r1
 8002ab6:	d200      	bcs.n	8002aba <get_next_good_spad+0x1e>
 8002ab8:	b107      	cbz	r7, 8002abc <get_next_good_spad+0x20>
 8002aba:	bdf0      	pop	{r4, r5, r6, r7, pc}
				coarseIndex++) {
		fineIndex = 0;
		dataByte = goodSpadArray[coarseIndex];
 8002abc:	5d85      	ldrb	r5, [r0, r6]

		if (coarseIndex == startIndex) {
 8002abe:	4576      	cmp	r6, lr
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 8002ac0:	bf03      	ittte	eq
 8002ac2:	4115      	asreq	r5, r2
 8002ac4:	b2ed      	uxtbeq	r5, r5
			fineIndex = fineOffset;
 8002ac6:	4614      	moveq	r4, r2
		fineIndex = 0;
 8002ac8:	463c      	movne	r4, r7
		}

		while (fineIndex < cSpadsPerByte) {
			if ((dataByte & 0x1) == 1) {
 8002aca:	f015 0f01 	tst.w	r5, #1
 8002ace:	d006      	beq.n	8002ade <get_next_good_spad+0x42>
				success = 1;
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 8002ad0:	4464      	add	r4, ip
 8002ad2:	601c      	str	r4, [r3, #0]
				success = 1;
 8002ad4:	2701      	movs	r7, #1
				coarseIndex++) {
 8002ad6:	3601      	adds	r6, #1
 8002ad8:	f10c 0c08 	add.w	ip, ip, #8
 8002adc:	e7ea      	b.n	8002ab4 <get_next_good_spad+0x18>
				break;
			}
			dataByte >>= 1;
			fineIndex++;
 8002ade:	3401      	adds	r4, #1
		while (fineIndex < cSpadsPerByte) {
 8002ae0:	2c08      	cmp	r4, #8
			dataByte >>= 1;
 8002ae2:	ea4f 0555 	mov.w	r5, r5, lsr #1
		while (fineIndex < cSpadsPerByte) {
 8002ae6:	d1f0      	bne.n	8002aca <get_next_good_spad+0x2e>
 8002ae8:	e7f5      	b.n	8002ad6 <get_next_good_spad+0x3a>
	...

08002aec <is_aperture>:
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
	quadrant = spadIndex >> 6;
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 8002aec:	4b03      	ldr	r3, [pc, #12]	; (8002afc <is_aperture+0x10>)
	quadrant = spadIndex >> 6;
 8002aee:	0980      	lsrs	r0, r0, #6
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 8002af0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
		isAperture = 0;

	return isAperture;
}
 8002af4:	3000      	adds	r0, #0
 8002af6:	bf18      	it	ne
 8002af8:	2001      	movne	r0, #1
 8002afa:	4770      	bx	lr
 8002afc:	200002b0 	.word	0x200002b0

08002b00 <enable_spad_bit>:
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
	uint32_t cSpadsPerByte = 8;
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 8002b00:	08d3      	lsrs	r3, r2, #3
	fineIndex = spadIndex % cSpadsPerByte;
	if (coarseIndex >= size)
 8002b02:	428b      	cmp	r3, r1
	fineIndex = spadIndex % cSpadsPerByte;
 8002b04:	f002 0207 	and.w	r2, r2, #7
		status = VL53L0X_ERROR_REF_SPAD_INIT;
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 8002b08:	bf3f      	itttt	cc
 8002b0a:	2101      	movcc	r1, #1
 8002b0c:	4091      	lslcc	r1, r2
 8002b0e:	5cc2      	ldrbcc	r2, [r0, r3]
 8002b10:	430a      	orrcc	r2, r1
 8002b12:	bf3a      	itte	cc
 8002b14:	54c2      	strbcc	r2, [r0, r3]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8002b16:	2000      	movcc	r0, #0
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 8002b18:	f06f 0031 	mvncs.w	r0, #49	; 0x31

	return status;
}
 8002b1c:	4770      	bx	lr

08002b1e <set_ref_spad_map>:
	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 8002b1e:	460a      	mov	r2, r1
 8002b20:	2306      	movs	r3, #6
 8002b22:	21b0      	movs	r1, #176	; 0xb0
 8002b24:	f001 bb4a 	b.w	80041bc <VL53L0X_WriteMulti>

08002b28 <get_ref_spad_map>:
	return status;
}

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 8002b28:	460a      	mov	r2, r1
 8002b2a:	2306      	movs	r3, #6
 8002b2c:	21b0      	movs	r1, #176	; 0xb0
 8002b2e:	f001 bb4d 	b.w	80041cc <VL53L0X_ReadMulti>

08002b32 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 8002b32:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b36:	b087      	sub	sp, #28
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 8002b38:	f10d 0918 	add.w	r9, sp, #24
{
 8002b3c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8002b3e:	9f10      	ldr	r7, [sp, #64]	; 0x40
	int32_t nextGoodSpad = offset;
 8002b40:	f849 4d0c 	str.w	r4, [r9, #-12]!
{
 8002b44:	4682      	mov	sl, r0
 8002b46:	468b      	mov	fp, r1
 8002b48:	9201      	str	r2, [sp, #4]
 8002b4a:	461d      	mov	r5, r3
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
	for (index = 0; index < spadCount; index++) {
 8002b4c:	f04f 0800 	mov.w	r8, #0
 8002b50:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8002b52:	4598      	cmp	r8, r3
 8002b54:	d114      	bne.n	8002b80 <enable_ref_spads+0x4e>
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8002b56:	2000      	movs	r0, #0
		}
		currentSpad = (uint32_t)nextGoodSpad;
		enable_spad_bit(spadArray, size, currentSpad);
		currentSpad++;
	}
	*lastSpad = currentSpad;
 8002b58:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8002b5a:	601c      	str	r4, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 8002b5c:	b968      	cbnz	r0, 8002b7a <enable_ref_spads+0x48>
		status = set_ref_spad_map(Dev, spadArray);
 8002b5e:	4629      	mov	r1, r5
 8002b60:	4650      	mov	r0, sl
 8002b62:	f7ff ffdc 	bl	8002b1e <set_ref_spad_map>
 8002b66:	4604      	mov	r4, r0


	if (status == VL53L0X_ERROR_NONE) {
 8002b68:	b938      	cbnz	r0, 8002b7a <enable_ref_spads+0x48>
		status = get_ref_spad_map(Dev, checkSpadArray);
 8002b6a:	ae04      	add	r6, sp, #16
 8002b6c:	4631      	mov	r1, r6
 8002b6e:	4650      	mov	r0, sl
 8002b70:	f7ff ffda 	bl	8002b28 <get_ref_spad_map>

		i = 0;
 8002b74:	4623      	mov	r3, r4

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 8002b76:	429f      	cmp	r7, r3
 8002b78:	d11d      	bne.n	8002bb6 <enable_ref_spads+0x84>
			}
			i++;
		}
	}
	return status;
}
 8002b7a:	b007      	add	sp, #28
 8002b7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		get_next_good_spad(goodSpadArray, size, currentSpad,
 8002b80:	464b      	mov	r3, r9
 8002b82:	4622      	mov	r2, r4
 8002b84:	4639      	mov	r1, r7
 8002b86:	9801      	ldr	r0, [sp, #4]
 8002b88:	f7ff ff88 	bl	8002a9c <get_next_good_spad>
		if (nextGoodSpad == -1) {
 8002b8c:	9e03      	ldr	r6, [sp, #12]
 8002b8e:	1c73      	adds	r3, r6, #1
 8002b90:	d00e      	beq.n	8002bb0 <enable_ref_spads+0x7e>
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 8002b92:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002b94:	18f0      	adds	r0, r6, r3
 8002b96:	f7ff ffa9 	bl	8002aec <is_aperture>
 8002b9a:	4558      	cmp	r0, fp
 8002b9c:	d108      	bne.n	8002bb0 <enable_ref_spads+0x7e>
		enable_spad_bit(spadArray, size, currentSpad);
 8002b9e:	4632      	mov	r2, r6
 8002ba0:	4639      	mov	r1, r7
 8002ba2:	4628      	mov	r0, r5
 8002ba4:	f7ff ffac 	bl	8002b00 <enable_spad_bit>
		currentSpad++;
 8002ba8:	1c74      	adds	r4, r6, #1
	for (index = 0; index < spadCount; index++) {
 8002baa:	f108 0801 	add.w	r8, r8, #1
 8002bae:	e7cf      	b.n	8002b50 <enable_ref_spads+0x1e>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8002bb0:	f06f 0031 	mvn.w	r0, #49	; 0x31
 8002bb4:	e7d0      	b.n	8002b58 <enable_ref_spads+0x26>
			if (spadArray[i] != checkSpadArray[i]) {
 8002bb6:	5ce9      	ldrb	r1, [r5, r3]
 8002bb8:	5cf2      	ldrb	r2, [r6, r3]
 8002bba:	4291      	cmp	r1, r2
 8002bbc:	d101      	bne.n	8002bc2 <enable_ref_spads+0x90>
			i++;
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	e7d9      	b.n	8002b76 <enable_ref_spads+0x44>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 8002bc2:	f06f 0031 	mvn.w	r0, #49	; 0x31
 8002bc6:	e7d8      	b.n	8002b7a <enable_ref_spads+0x48>

08002bc8 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 8002bc8:	b570      	push	{r4, r5, r6, lr}

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
		status = VL53L0X_WrByte(Dev,
 8002bca:	22c0      	movs	r2, #192	; 0xc0
{
 8002bcc:	b088      	sub	sp, #32
 8002bce:	460e      	mov	r6, r1
		status = VL53L0X_WrByte(Dev,
 8002bd0:	2101      	movs	r1, #1
{
 8002bd2:	4604      	mov	r4, r0
	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8002bd4:	f890 5130 	ldrb.w	r5, [r0, #304]	; 0x130
		status = VL53L0X_WrByte(Dev,
 8002bd8:	f001 fb00 	bl	80041dc <VL53L0X_WrByte>
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 8002bdc:	b9f0      	cbnz	r0, 8002c1c <perform_ref_signal_measurement+0x54>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 8002bde:	a901      	add	r1, sp, #4
 8002be0:	4620      	mov	r0, r4
 8002be2:	f7ff fd79 	bl	80026d8 <VL53L0X_PerformSingleRangingMeasurement>
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 8002be6:	b9c8      	cbnz	r0, 8002c1c <perform_ref_signal_measurement+0x54>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8002be8:	2201      	movs	r2, #1
 8002bea:	21ff      	movs	r1, #255	; 0xff
 8002bec:	4620      	mov	r0, r4
 8002bee:	f001 faf5 	bl	80041dc <VL53L0X_WrByte>

	if (status == VL53L0X_ERROR_NONE)
 8002bf2:	b998      	cbnz	r0, 8002c1c <perform_ref_signal_measurement+0x54>
		status = VL53L0X_RdWord(Dev,
 8002bf4:	4632      	mov	r2, r6
 8002bf6:	21b6      	movs	r1, #182	; 0xb6
 8002bf8:	4620      	mov	r0, r4
 8002bfa:	f001 fb3c 	bl	8004276 <VL53L0X_RdWord>
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 8002bfe:	b968      	cbnz	r0, 8002c1c <perform_ref_signal_measurement+0x54>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8002c00:	4602      	mov	r2, r0
 8002c02:	21ff      	movs	r1, #255	; 0xff
 8002c04:	4620      	mov	r0, r4
 8002c06:	f001 fae9 	bl	80041dc <VL53L0X_WrByte>

	if (status == VL53L0X_ERROR_NONE) {
 8002c0a:	b938      	cbnz	r0, 8002c1c <perform_ref_signal_measurement+0x54>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8002c0c:	462a      	mov	r2, r5
 8002c0e:	2101      	movs	r1, #1
 8002c10:	4620      	mov	r0, r4
 8002c12:	f001 fae3 	bl	80041dc <VL53L0X_WrByte>
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 8002c16:	b908      	cbnz	r0, 8002c1c <perform_ref_signal_measurement+0x54>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8002c18:	f884 5130 	strb.w	r5, [r4, #304]	; 0x130
	}

	return status;
}
 8002c1c:	b008      	add	sp, #32
 8002c1e:	bd70      	pop	{r4, r5, r6, pc}

08002c20 <VL53L0X_set_reference_spads>:
	return Status;
}

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 8002c20:	b570      	push	{r4, r5, r6, lr}
 8002c22:	460e      	mov	r6, r1
 8002c24:	b088      	sub	sp, #32
 8002c26:	4615      	mov	r5, r2
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8002c28:	21ff      	movs	r1, #255	; 0xff
 8002c2a:	2201      	movs	r2, #1
{
 8002c2c:	4604      	mov	r4, r0
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8002c2e:	f001 fad5 	bl	80041dc <VL53L0X_WrByte>

	if (Status == VL53L0X_ERROR_NONE)
 8002c32:	4602      	mov	r2, r0
 8002c34:	b9a8      	cbnz	r0, 8002c62 <VL53L0X_set_reference_spads+0x42>
		Status = VL53L0X_WrByte(Dev,
 8002c36:	214f      	movs	r1, #79	; 0x4f
 8002c38:	4620      	mov	r0, r4
 8002c3a:	f001 facf 	bl	80041dc <VL53L0X_WrByte>
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8002c3e:	b980      	cbnz	r0, 8002c62 <VL53L0X_set_reference_spads+0x42>
		Status = VL53L0X_WrByte(Dev,
 8002c40:	222c      	movs	r2, #44	; 0x2c
 8002c42:	214e      	movs	r1, #78	; 0x4e
 8002c44:	4620      	mov	r0, r4
 8002c46:	f001 fac9 	bl	80041dc <VL53L0X_WrByte>
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	b948      	cbnz	r0, 8002c62 <VL53L0X_set_reference_spads+0x42>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8002c4e:	21ff      	movs	r1, #255	; 0xff
 8002c50:	4620      	mov	r0, r4
 8002c52:	f001 fac3 	bl	80041dc <VL53L0X_WrByte>

	if (Status == VL53L0X_ERROR_NONE)
 8002c56:	b920      	cbnz	r0, 8002c62 <VL53L0X_set_reference_spads+0x42>
		Status = VL53L0X_WrByte(Dev,
 8002c58:	22b4      	movs	r2, #180	; 0xb4
 8002c5a:	21b6      	movs	r1, #182	; 0xb6
 8002c5c:	4620      	mov	r0, r4
 8002c5e:	f001 fabd 	bl	80041dc <VL53L0X_WrByte>
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8002c62:	2300      	movs	r3, #0
 8002c64:	f884 3124 	strb.w	r3, [r4, #292]	; 0x124
 8002c68:	f884 3125 	strb.w	r3, [r4, #293]	; 0x125
 8002c6c:	f884 3126 	strb.w	r3, [r4, #294]	; 0x126
 8002c70:	f884 3127 	strb.w	r3, [r4, #295]	; 0x127
 8002c74:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
 8002c78:	f884 3129 	strb.w	r3, [r4, #297]	; 0x129

	if (isApertureSpads) {
 8002c7c:	b31d      	cbz	r5, 8002cc6 <VL53L0X_set_reference_spads+0xa6>
 8002c7e:	461a      	mov	r2, r3
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8002c80:	f102 00b4 	add.w	r0, r2, #180	; 0xb4
 8002c84:	f7ff ff32 	bl	8002aec <is_aperture>
 8002c88:	b908      	cbnz	r0, 8002c8e <VL53L0X_set_reference_spads+0x6e>
 8002c8a:	2a2c      	cmp	r2, #44	; 0x2c
 8002c8c:	d119      	bne.n	8002cc2 <VL53L0X_set_reference_spads+0xa2>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
		}
	}
	Status = enable_ref_spads(Dev,
 8002c8e:	ab07      	add	r3, sp, #28
 8002c90:	9304      	str	r3, [sp, #16]
 8002c92:	9202      	str	r2, [sp, #8]
 8002c94:	23b4      	movs	r3, #180	; 0xb4
 8002c96:	2206      	movs	r2, #6
 8002c98:	e88d 000c 	stmia.w	sp, {r2, r3}
 8002c9c:	9603      	str	r6, [sp, #12]
 8002c9e:	f504 7392 	add.w	r3, r4, #292	; 0x124
 8002ca2:	f504 7295 	add.w	r2, r4, #298	; 0x12a
 8002ca6:	4629      	mov	r1, r5
 8002ca8:	4620      	mov	r0, r4
 8002caa:	f7ff ff42 	bl	8002b32 <enable_ref_spads>
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 8002cae:	b930      	cbnz	r0, 8002cbe <VL53L0X_set_reference_spads+0x9e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	f884 3115 	strb.w	r3, [r4, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8002cb6:	f884 6113 	strb.w	r6, [r4, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8002cba:	f884 5114 	strb.w	r5, [r4, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
}
 8002cbe:	b008      	add	sp, #32
 8002cc0:	bd70      	pop	{r4, r5, r6, pc}
			currentSpadIndex++;
 8002cc2:	3201      	adds	r2, #1
 8002cc4:	e7dc      	b.n	8002c80 <VL53L0X_set_reference_spads+0x60>
	uint32_t currentSpadIndex = 0;
 8002cc6:	462a      	mov	r2, r5
 8002cc8:	e7e1      	b.n	8002c8e <VL53L0X_set_reference_spads+0x6e>

08002cca <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 8002cca:	b510      	push	{r4, lr}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;

	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 8002ccc:	f041 0201 	orr.w	r2, r1, #1
 8002cd0:	2100      	movs	r1, #0
{
 8002cd2:	4604      	mov	r4, r0
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 8002cd4:	f001 fa82 	bl	80041dc <VL53L0X_WrByte>
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 8002cd8:	b978      	cbnz	r0, 8002cfa <VL53L0X_perform_single_ref_calibration+0x30>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8002cda:	4620      	mov	r0, r4
 8002cdc:	f000 fa36 	bl	800314c <VL53L0X_measurement_poll_for_completion>

	if (Status == VL53L0X_ERROR_NONE)
 8002ce0:	b958      	cbnz	r0, 8002cfa <VL53L0X_perform_single_ref_calibration+0x30>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8002ce2:	4601      	mov	r1, r0
 8002ce4:	4620      	mov	r0, r4
 8002ce6:	f7ff fccb 	bl	8002680 <VL53L0X_ClearInterruptMask>

	if (Status == VL53L0X_ERROR_NONE)
 8002cea:	b930      	cbnz	r0, 8002cfa <VL53L0X_perform_single_ref_calibration+0x30>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 8002cec:	4602      	mov	r2, r0
 8002cee:	4601      	mov	r1, r0
 8002cf0:	4620      	mov	r0, r4

	return Status;
}
 8002cf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 8002cf6:	f001 ba71 	b.w	80041dc <VL53L0X_WrByte>
}
 8002cfa:	bd10      	pop	{r4, pc}

08002cfc <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 8002cfc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t PhaseCalint = 0;
 8002d00:	f04f 0b00 	mov.w	fp, #0
{
 8002d04:	4689      	mov	r9, r1
 8002d06:	4690      	mov	r8, r2

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8002d08:	21ff      	movs	r1, #255	; 0xff
 8002d0a:	2201      	movs	r2, #1
{
 8002d0c:	4605      	mov	r5, r0
 8002d0e:	461f      	mov	r7, r3
 8002d10:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
 8002d14:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
	uint8_t PhaseCalint = 0;
 8002d18:	f88d b007 	strb.w	fp, [sp, #7]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8002d1c:	f001 fa5e 	bl	80041dc <VL53L0X_WrByte>
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8002d20:	465a      	mov	r2, fp
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8002d22:	4604      	mov	r4, r0
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8002d24:	4659      	mov	r1, fp
 8002d26:	4628      	mov	r0, r5
 8002d28:	f001 fa58 	bl	80041dc <VL53L0X_WrByte>
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8002d2c:	465a      	mov	r2, fp
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8002d2e:	4304      	orrs	r4, r0
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8002d30:	21ff      	movs	r1, #255	; 0xff
 8002d32:	4628      	mov	r0, r5
 8002d34:	f001 fa52 	bl	80041dc <VL53L0X_WrByte>
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8002d38:	b264      	sxtb	r4, r4
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8002d3a:	4304      	orrs	r4, r0
 8002d3c:	b264      	sxtb	r4, r4

	if (read_not_write) {
 8002d3e:	f1b9 0f00 	cmp.w	r9, #0
 8002d42:	d030      	beq.n	8002da6 <VL53L0X_ref_calibration_io+0xaa>
		if (vhv_enable)
 8002d44:	f1ba 0f00 	cmp.w	sl, #0
 8002d48:	d006      	beq.n	8002d58 <VL53L0X_ref_calibration_io+0x5c>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 8002d4a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002d4c:	21cb      	movs	r1, #203	; 0xcb
 8002d4e:	4628      	mov	r0, r5
 8002d50:	f001 fa80 	bl	8004254 <VL53L0X_RdByte>
 8002d54:	4304      	orrs	r4, r0
 8002d56:	b264      	sxtb	r4, r4
		if (phase_enable)
 8002d58:	b13e      	cbz	r6, 8002d6a <VL53L0X_ref_calibration_io+0x6e>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 8002d5a:	f10d 0207 	add.w	r2, sp, #7
 8002d5e:	21ee      	movs	r1, #238	; 0xee
 8002d60:	4628      	mov	r0, r5
 8002d62:	f001 fa77 	bl	8004254 <VL53L0X_RdByte>
	} else {
		if (vhv_enable)
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
		if (phase_enable)
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8002d66:	4304      	orrs	r4, r0
 8002d68:	b264      	sxtb	r4, r4
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	21ff      	movs	r1, #255	; 0xff
 8002d6e:	4628      	mov	r0, r5
 8002d70:	f001 fa34 	bl	80041dc <VL53L0X_WrByte>
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8002d74:	2201      	movs	r2, #1
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8002d76:	4304      	orrs	r4, r0
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8002d78:	2100      	movs	r1, #0
 8002d7a:	4628      	mov	r0, r5
 8002d7c:	f001 fa2e 	bl	80041dc <VL53L0X_WrByte>
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8002d80:	b264      	sxtb	r4, r4
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8002d82:	4304      	orrs	r4, r0
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8002d84:	2200      	movs	r2, #0
 8002d86:	21ff      	movs	r1, #255	; 0xff
 8002d88:	4628      	mov	r0, r5
 8002d8a:	f001 fa27 	bl	80041dc <VL53L0X_WrByte>
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8002d8e:	b264      	sxtb	r4, r4

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 8002d90:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002d94:	9a0d      	ldr	r2, [sp, #52]	; 0x34
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8002d96:	4320      	orrs	r0, r4
	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 8002d98:	f023 0310 	bic.w	r3, r3, #16

	return Status;
}
 8002d9c:	b240      	sxtb	r0, r0
	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 8002d9e:	7013      	strb	r3, [r2, #0]
}
 8002da0:	b003      	add	sp, #12
 8002da2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (vhv_enable)
 8002da6:	f1ba 0f00 	cmp.w	sl, #0
 8002daa:	d006      	beq.n	8002dba <VL53L0X_ref_calibration_io+0xbe>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 8002dac:	4642      	mov	r2, r8
 8002dae:	21cb      	movs	r1, #203	; 0xcb
 8002db0:	4628      	mov	r0, r5
 8002db2:	f001 fa13 	bl	80041dc <VL53L0X_WrByte>
 8002db6:	4304      	orrs	r4, r0
 8002db8:	b264      	sxtb	r4, r4
		if (phase_enable)
 8002dba:	2e00      	cmp	r6, #0
 8002dbc:	d0d5      	beq.n	8002d6a <VL53L0X_ref_calibration_io+0x6e>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8002dbe:	463b      	mov	r3, r7
 8002dc0:	2280      	movs	r2, #128	; 0x80
 8002dc2:	21ee      	movs	r1, #238	; 0xee
 8002dc4:	4628      	mov	r0, r5
 8002dc6:	f001 fa26 	bl	8004216 <VL53L0X_UpdateByte>
 8002dca:	e7cc      	b.n	8002d66 <VL53L0X_ref_calibration_io+0x6a>

08002dcc <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8002dcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002dd0:	b086      	sub	sp, #24
 8002dd2:	4617      	mov	r7, r2
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t SequenceConfig = 0;
	uint8_t VhvSettings = 0;
	uint8_t PhaseCal = 0;
	uint8_t PhaseCalInt = 0;
 8002dd4:	2200      	movs	r2, #0
{
 8002dd6:	4604      	mov	r4, r0
 8002dd8:	4688      	mov	r8, r1
	uint8_t PhaseCalInt = 0;
 8002dda:	f88d 2017 	strb.w	r2, [sp, #23]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8002dde:	461e      	mov	r6, r3
 8002de0:	b343      	cbz	r3, 8002e34 <VL53L0X_perform_vhv_calibration+0x68>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8002de2:	f890 5130 	ldrb.w	r5, [r0, #304]	; 0x130

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 8002de6:	2201      	movs	r2, #1
 8002de8:	4611      	mov	r1, r2
 8002dea:	4620      	mov	r0, r4
 8002dec:	f001 f9f6 	bl	80041dc <VL53L0X_WrByte>

	if (Status == VL53L0X_ERROR_NONE)
 8002df0:	bb10      	cbnz	r0, 8002e38 <VL53L0X_perform_vhv_calibration+0x6c>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 8002df2:	2140      	movs	r1, #64	; 0x40
 8002df4:	4620      	mov	r0, r4
 8002df6:	f7ff ff68 	bl	8002cca <VL53L0X_perform_single_ref_calibration>

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8002dfa:	b9e8      	cbnz	r0, 8002e38 <VL53L0X_perform_vhv_calibration+0x6c>
 8002dfc:	2f01      	cmp	r7, #1
 8002dfe:	d11b      	bne.n	8002e38 <VL53L0X_perform_vhv_calibration+0x6c>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8002e00:	f10d 0317 	add.w	r3, sp, #23
 8002e04:	9003      	str	r0, [sp, #12]
 8002e06:	9301      	str	r3, [sp, #4]
 8002e08:	4602      	mov	r2, r0
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	9702      	str	r7, [sp, #8]
 8002e0e:	f8cd 8000 	str.w	r8, [sp]
 8002e12:	4639      	mov	r1, r7
 8002e14:	4620      	mov	r0, r4
 8002e16:	f7ff ff71 	bl	8002cfc <VL53L0X_ref_calibration_io>
			1, 0);
	} else
		*pVhvSettings = 0;


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8002e1a:	b940      	cbnz	r0, 8002e2e <VL53L0X_perform_vhv_calibration+0x62>
 8002e1c:	b13e      	cbz	r6, 8002e2e <VL53L0X_perform_vhv_calibration+0x62>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8002e1e:	462a      	mov	r2, r5
 8002e20:	2101      	movs	r1, #1
 8002e22:	4620      	mov	r0, r4
 8002e24:	f001 f9da 	bl	80041dc <VL53L0X_WrByte>
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8002e28:	b908      	cbnz	r0, 8002e2e <VL53L0X_perform_vhv_calibration+0x62>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8002e2a:	f884 5130 	strb.w	r5, [r4, #304]	; 0x130

	}

	return Status;
}
 8002e2e:	b006      	add	sp, #24
 8002e30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t SequenceConfig = 0;
 8002e34:	461d      	mov	r5, r3
 8002e36:	e7d6      	b.n	8002de6 <VL53L0X_perform_vhv_calibration+0x1a>
		*pVhvSettings = 0;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	f888 3000 	strb.w	r3, [r8]
 8002e3e:	e7ec      	b.n	8002e1a <VL53L0X_perform_vhv_calibration+0x4e>

08002e40 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8002e40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e44:	4604      	mov	r4, r0
 8002e46:	b086      	sub	sp, #24
 8002e48:	4688      	mov	r8, r1
 8002e4a:	4617      	mov	r7, r2

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8002e4c:	461e      	mov	r6, r3
 8002e4e:	b343      	cbz	r3, 8002ea2 <VL53L0X_perform_phase_calibration+0x62>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8002e50:	f890 5130 	ldrb.w	r5, [r0, #304]	; 0x130

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 8002e54:	2202      	movs	r2, #2
 8002e56:	2101      	movs	r1, #1
 8002e58:	4620      	mov	r0, r4
 8002e5a:	f001 f9bf 	bl	80041dc <VL53L0X_WrByte>

	if (Status == VL53L0X_ERROR_NONE)
 8002e5e:	bb10      	cbnz	r0, 8002ea6 <VL53L0X_perform_phase_calibration+0x66>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 8002e60:	4601      	mov	r1, r0
 8002e62:	4620      	mov	r0, r4
 8002e64:	f7ff ff31 	bl	8002cca <VL53L0X_perform_single_ref_calibration>

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8002e68:	b9e8      	cbnz	r0, 8002ea6 <VL53L0X_perform_phase_calibration+0x66>
 8002e6a:	2f01      	cmp	r7, #1
 8002e6c:	d11b      	bne.n	8002ea6 <VL53L0X_perform_phase_calibration+0x66>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8002e6e:	f10d 0317 	add.w	r3, sp, #23
 8002e72:	9002      	str	r0, [sp, #8]
 8002e74:	9300      	str	r3, [sp, #0]
 8002e76:	4602      	mov	r2, r0
 8002e78:	4603      	mov	r3, r0
 8002e7a:	9703      	str	r7, [sp, #12]
 8002e7c:	f8cd 8004 	str.w	r8, [sp, #4]
 8002e80:	4639      	mov	r1, r7
 8002e82:	4620      	mov	r0, r4
 8002e84:	f7ff ff3a 	bl	8002cfc <VL53L0X_ref_calibration_io>
			0, 1);
	} else
		*pPhaseCal = 0;


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8002e88:	b940      	cbnz	r0, 8002e9c <VL53L0X_perform_phase_calibration+0x5c>
 8002e8a:	b13e      	cbz	r6, 8002e9c <VL53L0X_perform_phase_calibration+0x5c>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8002e8c:	462a      	mov	r2, r5
 8002e8e:	2101      	movs	r1, #1
 8002e90:	4620      	mov	r0, r4
 8002e92:	f001 f9a3 	bl	80041dc <VL53L0X_WrByte>
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8002e96:	b908      	cbnz	r0, 8002e9c <VL53L0X_perform_phase_calibration+0x5c>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8002e98:	f884 5130 	strb.w	r5, [r4, #304]	; 0x130

	}

	return Status;
}
 8002e9c:	b006      	add	sp, #24
 8002e9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t SequenceConfig = 0;
 8002ea2:	461d      	mov	r5, r3
 8002ea4:	e7d6      	b.n	8002e54 <VL53L0X_perform_phase_calibration+0x14>
		*pPhaseCal = 0;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	f888 3000 	strb.w	r3, [r8]
 8002eac:	e7ec      	b.n	8002e88 <VL53L0X_perform_phase_calibration+0x48>

08002eae <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 8002eae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eb0:	461e      	mov	r6, r3
 8002eb2:	4617      	mov	r7, r2

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	4632      	mov	r2, r6
{
 8002eb8:	4604      	mov	r4, r0
	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8002eba:	f890 5130 	ldrb.w	r5, [r0, #304]	; 0x130
	Status = VL53L0X_perform_vhv_calibration(
 8002ebe:	f7ff ff85 	bl	8002dcc <VL53L0X_perform_vhv_calibration>
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8002ec2:	b970      	cbnz	r0, 8002ee2 <VL53L0X_perform_ref_calibration+0x34>
		Status = VL53L0X_perform_phase_calibration(
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	4632      	mov	r2, r6
 8002ec8:	4639      	mov	r1, r7
 8002eca:	4620      	mov	r0, r4
 8002ecc:	f7ff ffb8 	bl	8002e40 <VL53L0X_perform_phase_calibration>
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 8002ed0:	b938      	cbnz	r0, 8002ee2 <VL53L0X_perform_ref_calibration+0x34>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8002ed2:	462a      	mov	r2, r5
 8002ed4:	2101      	movs	r1, #1
 8002ed6:	4620      	mov	r0, r4
 8002ed8:	f001 f980 	bl	80041dc <VL53L0X_WrByte>
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8002edc:	b908      	cbnz	r0, 8002ee2 <VL53L0X_perform_ref_calibration+0x34>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8002ede:	f884 5130 	strb.w	r5, [r4, #304]	; 0x130

	}

	return Status;
}
 8002ee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002ee4 <VL53L0X_perform_ref_spad_management>:
{
 8002ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ee8:	b091      	sub	sp, #68	; 0x44
	uint32_t lastSpadIndex = 0;
 8002eea:	2300      	movs	r3, #0
{
 8002eec:	9108      	str	r1, [sp, #32]
 8002eee:	9209      	str	r2, [sp, #36]	; 0x24
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8002ef0:	f880 3124 	strb.w	r3, [r0, #292]	; 0x124
 8002ef4:	f880 3125 	strb.w	r3, [r0, #293]	; 0x125
 8002ef8:	f880 3126 	strb.w	r3, [r0, #294]	; 0x126
 8002efc:	f880 3127 	strb.w	r3, [r0, #295]	; 0x127
 8002f00:	f880 3128 	strb.w	r3, [r0, #296]	; 0x128
 8002f04:	f880 3129 	strb.w	r3, [r0, #297]	; 0x129
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8002f08:	2201      	movs	r2, #1
 8002f0a:	21ff      	movs	r1, #255	; 0xff
{
 8002f0c:	4604      	mov	r4, r0
	uint32_t lastSpadIndex = 0;
 8002f0e:	930c      	str	r3, [sp, #48]	; 0x30
	int32_t nextGoodSpad = 0;
 8002f10:	930d      	str	r3, [sp, #52]	; 0x34
	uint8_t VhvSettings = 0;
 8002f12:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	uint8_t PhaseCal = 0;
 8002f16:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 8002f1a:	f8b0 813c 	ldrh.w	r8, [r0, #316]	; 0x13c
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8002f1e:	f001 f95d 	bl	80041dc <VL53L0X_WrByte>
	if (Status == VL53L0X_ERROR_NONE)
 8002f22:	4605      	mov	r5, r0
 8002f24:	2800      	cmp	r0, #0
 8002f26:	f040 810b 	bne.w	8003140 <VL53L0X_perform_ref_spad_management+0x25c>
		Status = VL53L0X_WrByte(Dev,
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	214f      	movs	r1, #79	; 0x4f
 8002f2e:	4620      	mov	r0, r4
 8002f30:	f001 f954 	bl	80041dc <VL53L0X_WrByte>
	if (Status == VL53L0X_ERROR_NONE)
 8002f34:	4605      	mov	r5, r0
 8002f36:	2800      	cmp	r0, #0
 8002f38:	f040 8102 	bne.w	8003140 <VL53L0X_perform_ref_spad_management+0x25c>
		Status = VL53L0X_WrByte(Dev,
 8002f3c:	222c      	movs	r2, #44	; 0x2c
 8002f3e:	214e      	movs	r1, #78	; 0x4e
 8002f40:	4620      	mov	r0, r4
 8002f42:	f001 f94b 	bl	80041dc <VL53L0X_WrByte>
	if (Status == VL53L0X_ERROR_NONE)
 8002f46:	4605      	mov	r5, r0
 8002f48:	2800      	cmp	r0, #0
 8002f4a:	f040 80f9 	bne.w	8003140 <VL53L0X_perform_ref_spad_management+0x25c>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8002f4e:	4602      	mov	r2, r0
 8002f50:	21ff      	movs	r1, #255	; 0xff
 8002f52:	4620      	mov	r0, r4
 8002f54:	f001 f942 	bl	80041dc <VL53L0X_WrByte>
	if (Status == VL53L0X_ERROR_NONE)
 8002f58:	4605      	mov	r5, r0
 8002f5a:	2800      	cmp	r0, #0
 8002f5c:	f040 80f0 	bne.w	8003140 <VL53L0X_perform_ref_spad_management+0x25c>
		Status = VL53L0X_WrByte(Dev,
 8002f60:	22b4      	movs	r2, #180	; 0xb4
 8002f62:	21b6      	movs	r1, #182	; 0xb6
 8002f64:	4620      	mov	r0, r4
 8002f66:	f001 f939 	bl	80041dc <VL53L0X_WrByte>
	if (Status == VL53L0X_ERROR_NONE)
 8002f6a:	4605      	mov	r5, r0
 8002f6c:	2800      	cmp	r0, #0
 8002f6e:	f040 80e7 	bne.w	8003140 <VL53L0X_perform_ref_spad_management+0x25c>
		Status = VL53L0X_WrByte(Dev,
 8002f72:	4602      	mov	r2, r0
 8002f74:	2180      	movs	r1, #128	; 0x80
 8002f76:	4620      	mov	r0, r4
 8002f78:	f001 f930 	bl	80041dc <VL53L0X_WrByte>
	if (Status == VL53L0X_ERROR_NONE)
 8002f7c:	4605      	mov	r5, r0
 8002f7e:	2800      	cmp	r0, #0
 8002f80:	f040 80de 	bne.w	8003140 <VL53L0X_perform_ref_spad_management+0x25c>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 8002f84:	4603      	mov	r3, r0
 8002f86:	f10d 022d 	add.w	r2, sp, #45	; 0x2d
 8002f8a:	a90b      	add	r1, sp, #44	; 0x2c
 8002f8c:	4620      	mov	r0, r4
 8002f8e:	f7ff ff8e 	bl	8002eae <VL53L0X_perform_ref_calibration>
	if (Status == VL53L0X_ERROR_NONE) {
 8002f92:	4605      	mov	r5, r0
 8002f94:	2800      	cmp	r0, #0
 8002f96:	f040 80d3 	bne.w	8003140 <VL53L0X_perform_ref_spad_management+0x25c>
		lastSpadIndex = currentSpadIndex;
 8002f9a:	af10      	add	r7, sp, #64	; 0x40
		Status = enable_ref_spads(Dev,
 8002f9c:	2303      	movs	r3, #3
		lastSpadIndex = currentSpadIndex;
 8002f9e:	f847 0d10 	str.w	r0, [r7, #-16]!
		Status = enable_ref_spads(Dev,
 8002fa2:	2106      	movs	r1, #6
 8002fa4:	9303      	str	r3, [sp, #12]
					Dev->Data.SpadData.RefGoodSpadMap,
 8002fa6:	f504 7b95 	add.w	fp, r4, #298	; 0x12a
		Status = enable_ref_spads(Dev,
 8002faa:	23b4      	movs	r3, #180	; 0xb4
					Dev->Data.SpadData.RefSpadEnables,
 8002fac:	f504 7992 	add.w	r9, r4, #292	; 0x124
		Status = enable_ref_spads(Dev,
 8002fb0:	e88d 000a 	stmia.w	sp, {r1, r3}
 8002fb4:	9002      	str	r0, [sp, #8]
 8002fb6:	4601      	mov	r1, r0
 8002fb8:	9704      	str	r7, [sp, #16]
 8002fba:	464b      	mov	r3, r9
 8002fbc:	465a      	mov	r2, fp
 8002fbe:	4620      	mov	r0, r4
 8002fc0:	f7ff fdb7 	bl	8002b32 <enable_ref_spads>
	if (Status == VL53L0X_ERROR_NONE) {
 8002fc4:	4605      	mov	r5, r0
 8002fc6:	2800      	cmp	r0, #0
 8002fc8:	f040 80ba 	bne.w	8003140 <VL53L0X_perform_ref_spad_management+0x25c>
		Status = perform_ref_signal_measurement(Dev,
 8002fcc:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
 8002fd0:	4620      	mov	r0, r4
		currentSpadIndex = lastSpadIndex;
 8002fd2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
		Status = perform_ref_signal_measurement(Dev,
 8002fd4:	f7ff fdf8 	bl	8002bc8 <perform_ref_signal_measurement>
		if ((Status == VL53L0X_ERROR_NONE) &&
 8002fd8:	4605      	mov	r5, r0
 8002fda:	2800      	cmp	r0, #0
 8002fdc:	f040 80b0 	bne.w	8003140 <VL53L0X_perform_ref_spad_management+0x25c>
 8002fe0:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 8002fe4:	4543      	cmp	r3, r8
 8002fe6:	d955      	bls.n	8003094 <VL53L0X_perform_ref_spad_management+0x1b0>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8002fe8:	f884 0124 	strb.w	r0, [r4, #292]	; 0x124
 8002fec:	f884 0125 	strb.w	r0, [r4, #293]	; 0x125
 8002ff0:	f884 0126 	strb.w	r0, [r4, #294]	; 0x126
 8002ff4:	f884 0127 	strb.w	r0, [r4, #295]	; 0x127
 8002ff8:	f884 0128 	strb.w	r0, [r4, #296]	; 0x128
 8002ffc:	f884 0129 	strb.w	r0, [r4, #297]	; 0x129
			while ((is_aperture(startSelect + currentSpadIndex)
 8003000:	f106 00b4 	add.w	r0, r6, #180	; 0xb4
 8003004:	f7ff fd72 	bl	8002aec <is_aperture>
 8003008:	b180      	cbz	r0, 800302c <VL53L0X_perform_ref_spad_management+0x148>
			Status = enable_ref_spads(Dev,
 800300a:	2206      	movs	r2, #6
 800300c:	23b4      	movs	r3, #180	; 0xb4
 800300e:	9704      	str	r7, [sp, #16]
 8003010:	2703      	movs	r7, #3
 8003012:	e88d 000c 	stmia.w	sp, {r2, r3}
 8003016:	9703      	str	r7, [sp, #12]
 8003018:	9602      	str	r6, [sp, #8]
 800301a:	464b      	mov	r3, r9
 800301c:	465a      	mov	r2, fp
 800301e:	2101      	movs	r1, #1
 8003020:	4620      	mov	r0, r4
 8003022:	f7ff fd86 	bl	8002b32 <enable_ref_spads>
			if (Status == VL53L0X_ERROR_NONE) {
 8003026:	b128      	cbz	r0, 8003034 <VL53L0X_perform_ref_spad_management+0x150>
			Status = perform_ref_signal_measurement(Dev,
 8003028:	4605      	mov	r5, r0
	return Status;
 800302a:	e089      	b.n	8003140 <VL53L0X_perform_ref_spad_management+0x25c>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 800302c:	2e2b      	cmp	r6, #43	; 0x2b
 800302e:	d8ec      	bhi.n	800300a <VL53L0X_perform_ref_spad_management+0x126>
				currentSpadIndex++;
 8003030:	3601      	adds	r6, #1
 8003032:	e7e5      	b.n	8003000 <VL53L0X_perform_ref_spad_management+0x11c>
				Status = perform_ref_signal_measurement(Dev,
 8003034:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
 8003038:	4620      	mov	r0, r4
				currentSpadIndex = lastSpadIndex;
 800303a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
				Status = perform_ref_signal_measurement(Dev,
 800303c:	f7ff fdc4 	bl	8002bc8 <perform_ref_signal_measurement>
				if ((Status == VL53L0X_ERROR_NONE) &&
 8003040:	2800      	cmp	r0, #0
 8003042:	d1f1      	bne.n	8003028 <VL53L0X_perform_ref_spad_management+0x144>
 8003044:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 8003048:	4543      	cmp	r3, r8
 800304a:	d97d      	bls.n	8003148 <VL53L0X_perform_ref_spad_management+0x264>
					isApertureSpads_int = 1;
 800304c:	2001      	movs	r0, #1
			needAptSpads = 1;
 800304e:	f04f 0a01 	mov.w	sl, #1
 8003052:	e022      	b.n	800309a <VL53L0X_perform_ref_spad_management+0x1b6>
				memcpy(lastSpadArray,
 8003054:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
 8003058:	f8b4 2128 	ldrh.w	r2, [r4, #296]	; 0x128
 800305c:	900e      	str	r0, [sp, #56]	; 0x38
 800305e:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
			(refSpadCount_int)++;
 8003062:	9f06      	ldr	r7, [sp, #24]
			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8003064:	9307      	str	r3, [sp, #28]
 8003066:	e02a      	b.n	80030be <VL53L0X_perform_ref_spad_management+0x1da>
			(refSpadCount_int)++;
 8003068:	9f06      	ldr	r7, [sp, #24]
		isApertureSpads_int = needAptSpads;
 800306a:	fa5f f08a 	uxtb.w	r0, sl
		*refSpadCount = refSpadCount_int;
 800306e:	9b08      	ldr	r3, [sp, #32]
 8003070:	601f      	str	r7, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 8003072:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003074:	7018      	strb	r0, [r3, #0]
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8003076:	2301      	movs	r3, #1
 8003078:	f884 3115 	strb.w	r3, [r4, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800307c:	9b08      	ldr	r3, [sp, #32]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f884 3113 	strb.w	r3, [r4, #275]	; 0x113
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8003084:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	f884 3114 	strb.w	r3, [r4, #276]	; 0x114
 800308c:	e058      	b.n	8003140 <VL53L0X_perform_ref_spad_management+0x25c>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 800308e:	f06f 0531 	mvn.w	r5, #49	; 0x31
 8003092:	e055      	b.n	8003140 <VL53L0X_perform_ref_spad_management+0x25c>
	uint8_t	 isApertureSpads_int = 0;
 8003094:	2000      	movs	r0, #0
	uint32_t refSpadCount_int = 0;
 8003096:	4607      	mov	r7, r0
			needAptSpads = 0;
 8003098:	4682      	mov	sl, r0
		(peakSignalRateRef < targetRefRate)) {
 800309a:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
	if ((Status == VL53L0X_ERROR_NONE) &&
 800309e:	4598      	cmp	r8, r3
 80030a0:	d9e5      	bls.n	800306e <VL53L0X_perform_ref_spad_management+0x18a>
		lastSignalRateDiff = abs(peakSignalRateRef -
 80030a2:	eba3 0308 	sub.w	r3, r3, r8
 80030a6:	2b00      	cmp	r3, #0
		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 80030a8:	f8d9 0000 	ldr.w	r0, [r9]
 80030ac:	f8b9 2004 	ldrh.w	r2, [r9, #4]
 80030b0:	900e      	str	r0, [sp, #56]	; 0x38
		lastSignalRateDiff = abs(peakSignalRateRef -
 80030b2:	bfb8      	it	lt
 80030b4:	425b      	neglt	r3, r3
		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 80030b6:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
		lastSignalRateDiff = abs(peakSignalRateRef -
 80030ba:	9307      	str	r3, [sp, #28]
		refSpadCount_int	= minimumSpadCount;
 80030bc:	2703      	movs	r7, #3
			get_next_good_spad(
 80030be:	ab0d      	add	r3, sp, #52	; 0x34
 80030c0:	4632      	mov	r2, r6
 80030c2:	2106      	movs	r1, #6
 80030c4:	4658      	mov	r0, fp
 80030c6:	f7ff fce9 	bl	8002a9c <get_next_good_spad>
			if (nextGoodSpad == -1) {
 80030ca:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80030cc:	1c73      	adds	r3, r6, #1
 80030ce:	d0de      	beq.n	800308e <VL53L0X_perform_ref_spad_management+0x1aa>
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 80030d0:	f106 00b4 	add.w	r0, r6, #180	; 0xb4
 80030d4:	f7ff fd0a 	bl	8002aec <is_aperture>
 80030d8:	4550      	cmp	r0, sl
 80030da:	d1c6      	bne.n	800306a <VL53L0X_perform_ref_spad_management+0x186>
			(refSpadCount_int)++;
 80030dc:	1c7b      	adds	r3, r7, #1
			Status = enable_spad_bit(
 80030de:	4632      	mov	r2, r6
 80030e0:	2106      	movs	r1, #6
 80030e2:	4648      	mov	r0, r9
			(refSpadCount_int)++;
 80030e4:	9306      	str	r3, [sp, #24]
			Status = enable_spad_bit(
 80030e6:	f7ff fd0b 	bl	8002b00 <enable_spad_bit>
			if (Status == VL53L0X_ERROR_NONE) {
 80030ea:	2800      	cmp	r0, #0
 80030ec:	d19c      	bne.n	8003028 <VL53L0X_perform_ref_spad_management+0x144>
				Status = set_ref_spad_map(Dev,
 80030ee:	4649      	mov	r1, r9
 80030f0:	4620      	mov	r0, r4
				currentSpadIndex++;
 80030f2:	3601      	adds	r6, #1
				Status = set_ref_spad_map(Dev,
 80030f4:	f7ff fd13 	bl	8002b1e <set_ref_spad_map>
			if (Status != VL53L0X_ERROR_NONE)
 80030f8:	2800      	cmp	r0, #0
 80030fa:	d195      	bne.n	8003028 <VL53L0X_perform_ref_spad_management+0x144>
			Status = perform_ref_signal_measurement(Dev,
 80030fc:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
 8003100:	4620      	mov	r0, r4
 8003102:	f7ff fd61 	bl	8002bc8 <perform_ref_signal_measurement>
			if (Status != VL53L0X_ERROR_NONE)
 8003106:	2800      	cmp	r0, #0
 8003108:	d18e      	bne.n	8003028 <VL53L0X_perform_ref_spad_management+0x144>
			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 800310a:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 800310e:	eba2 0308 	sub.w	r3, r2, r8
 8003112:	2b00      	cmp	r3, #0
 8003114:	bfb8      	it	lt
 8003116:	425b      	neglt	r3, r3
			if (peakSignalRateRef > targetRefRate) {
 8003118:	4590      	cmp	r8, r2
 800311a:	d29b      	bcs.n	8003054 <VL53L0X_perform_ref_spad_management+0x170>
				if (signalRateDiff > lastSignalRateDiff) {
 800311c:	9a07      	ldr	r2, [sp, #28]
 800311e:	4293      	cmp	r3, r2
 8003120:	d9a2      	bls.n	8003068 <VL53L0X_perform_ref_spad_management+0x184>
					Status = set_ref_spad_map(Dev,
 8003122:	a90e      	add	r1, sp, #56	; 0x38
 8003124:	4620      	mov	r0, r4
 8003126:	f7ff fcfa 	bl	8002b1e <set_ref_spad_map>
					memcpy(
 800312a:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 800312e:	f8a4 2128 	strh.w	r2, [r4, #296]	; 0x128
					Status = set_ref_spad_map(Dev,
 8003132:	4603      	mov	r3, r0
					memcpy(
 8003134:	980e      	ldr	r0, [sp, #56]	; 0x38
 8003136:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
	if (Status == VL53L0X_ERROR_NONE) {
 800313a:	2b00      	cmp	r3, #0
 800313c:	d095      	beq.n	800306a <VL53L0X_perform_ref_spad_management+0x186>
 800313e:	461d      	mov	r5, r3
}
 8003140:	4628      	mov	r0, r5
 8003142:	b011      	add	sp, #68	; 0x44
 8003144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t refSpadCount_int = 0;
 8003148:	4607      	mov	r7, r0
 800314a:	e780      	b.n	800304e <VL53L0X_perform_ref_spad_management+0x16a>

0800314c <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 800314c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t NewDataReady = 0;
 800314e:	ad02      	add	r5, sp, #8
 8003150:	2300      	movs	r3, #0
 8003152:	f805 3d01 	strb.w	r3, [r5, #-1]!
{
 8003156:	4606      	mov	r6, r0
	uint8_t NewDataReady = 0;
 8003158:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
	LOG_FUNCTION_START("");

	LoopNb = 0;

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800315c:	4629      	mov	r1, r5
 800315e:	4630      	mov	r0, r6
 8003160:	f7ff fc63 	bl	8002a2a <VL53L0X_GetMeasurementDataReady>
		if (Status != 0)
 8003164:	b958      	cbnz	r0, 800317e <VL53L0X_measurement_poll_for_completion+0x32>
			break; /* the error is set */

		if (NewDataReady == 1)
 8003166:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800316a:	2b01      	cmp	r3, #1
 800316c:	d007      	beq.n	800317e <VL53L0X_measurement_poll_for_completion+0x32>
			break; /* done note that status == 0 */

		LoopNb++;
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 800316e:	3c01      	subs	r4, #1
 8003170:	d003      	beq.n	800317a <VL53L0X_measurement_poll_for_completion+0x2e>
			Status = VL53L0X_ERROR_TIME_OUT;
			break;
		}

		VL53L0X_PollingDelay(Dev);
 8003172:	4630      	mov	r0, r6
 8003174:	f001 f8a0 	bl	80042b8 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8003178:	e7f0      	b.n	800315c <VL53L0X_measurement_poll_for_completion+0x10>
			Status = VL53L0X_ERROR_TIME_OUT;
 800317a:	f06f 0006 	mvn.w	r0, #6
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
}
 800317e:	b002      	add	sp, #8
 8003180:	bd70      	pop	{r4, r5, r6, pc}

08003182 <VL53L0X_isqrt>:
	return vcsel_period_reg;
}


uint32_t VL53L0X_isqrt(uint32_t num)
{
 8003182:	b510      	push	{r4, lr}
 8003184:	4601      	mov	r1, r0
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
	uint32_t  bit = 1 << 30;
 8003186:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 800318a:	428a      	cmp	r2, r1
 800318c:	d802      	bhi.n	8003194 <VL53L0X_isqrt+0x12>
 800318e:	2000      	movs	r0, #0
		bit >>= 2;


	while (bit != 0) {
 8003190:	b912      	cbnz	r2, 8003198 <VL53L0X_isqrt+0x16>

		bit >>= 2;
	}

	return res;
}
 8003192:	bd10      	pop	{r4, pc}
		bit >>= 2;
 8003194:	0892      	lsrs	r2, r2, #2
 8003196:	e7f8      	b.n	800318a <VL53L0X_isqrt+0x8>
		if (num >= res + bit) {
 8003198:	1884      	adds	r4, r0, r2
 800319a:	42a1      	cmp	r1, r4
 800319c:	ea4f 0350 	mov.w	r3, r0, lsr #1
			res = (res >> 1) + bit;
 80031a0:	bf26      	itte	cs
 80031a2:	18d0      	addcs	r0, r2, r3
			num -= res + bit;
 80031a4:	1b09      	subcs	r1, r1, r4
			res >>= 1;
 80031a6:	4618      	movcc	r0, r3
		bit >>= 2;
 80031a8:	0892      	lsrs	r2, r2, #2
 80031aa:	e7f1      	b.n	8003190 <VL53L0X_isqrt+0xe>

080031ac <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 80031ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 80031ae:	2200      	movs	r2, #0
 80031b0:	2183      	movs	r1, #131	; 0x83
{
 80031b2:	4606      	mov	r6, r0
	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 80031b4:	f001 f812 	bl	80041dc <VL53L0X_WrByte>
 80031b8:	4604      	mov	r4, r0

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 80031ba:	b980      	cbnz	r0, 80031de <VL53L0X_device_read_strobe+0x32>
 80031bc:	f44f 65fa 	mov.w	r5, #2000	; 0x7d0
		LoopNb = 0;
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 80031c0:	f10d 0207 	add.w	r2, sp, #7
 80031c4:	2183      	movs	r1, #131	; 0x83
 80031c6:	4630      	mov	r0, r6
 80031c8:	f001 f844 	bl	8004254 <VL53L0X_RdByte>
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 80031cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 80031d0:	4604      	mov	r4, r0
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 80031d2:	b923      	cbnz	r3, 80031de <VL53L0X_device_read_strobe+0x32>
 80031d4:	b918      	cbnz	r0, 80031de <VL53L0X_device_read_strobe+0x32>
					break;

			LoopNb = LoopNb + 1;
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 80031d6:	3d01      	subs	r5, #1
 80031d8:	d1f2      	bne.n	80031c0 <VL53L0X_device_read_strobe+0x14>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
			Status = VL53L0X_ERROR_TIME_OUT;
 80031da:	f06f 0406 	mvn.w	r4, #6

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 80031de:	2201      	movs	r2, #1
 80031e0:	2183      	movs	r1, #131	; 0x83
 80031e2:	4630      	mov	r0, r6
 80031e4:	f000 fffa 	bl	80041dc <VL53L0X_WrByte>
 80031e8:	4320      	orrs	r0, r4

	LOG_FUNCTION_END(Status);
	return Status;

}
 80031ea:	b240      	sxtb	r0, r0
 80031ec:	b002      	add	sp, #8
 80031ee:	bd70      	pop	{r4, r5, r6, pc}

080031f0 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 80031f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80031f4:	f890 60f0 	ldrb.w	r6, [r0, #240]	; 0xf0
{
 80031f8:	b091      	sub	sp, #68	; 0x44
	uint32_t PartUIDUpper = 0;
 80031fa:	f04f 0900 	mov.w	r9, #0
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 80031fe:	2e07      	cmp	r6, #7
{
 8003200:	4604      	mov	r4, r0
 8003202:	4688      	mov	r8, r1
	uint32_t PartUIDUpper = 0;
 8003204:	f8cd 901c 	str.w	r9, [sp, #28]
	uint32_t PartUIDLower = 0;
 8003208:	f8cd 9020 	str.w	r9, [sp, #32]
	if (ReadDataFromDeviceDone != 7) {
 800320c:	f000 8298 	beq.w	8003740 <VL53L0X_get_info_from_device+0x550>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8003210:	2201      	movs	r2, #1
 8003212:	2180      	movs	r1, #128	; 0x80
 8003214:	f000 ffe2 	bl	80041dc <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003218:	2201      	movs	r2, #1
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800321a:	4607      	mov	r7, r0
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800321c:	21ff      	movs	r1, #255	; 0xff
 800321e:	4620      	mov	r0, r4
 8003220:	f000 ffdc 	bl	80041dc <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8003224:	464a      	mov	r2, r9
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003226:	4307      	orrs	r7, r0
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8003228:	4649      	mov	r1, r9
 800322a:	4620      	mov	r0, r4
 800322c:	f000 ffd6 	bl	80041dc <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003230:	b27f      	sxtb	r7, r7
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8003232:	4307      	orrs	r7, r0

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8003234:	2206      	movs	r2, #6
 8003236:	21ff      	movs	r1, #255	; 0xff
 8003238:	4620      	mov	r0, r4
 800323a:	f000 ffcf 	bl	80041dc <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800323e:	b27f      	sxtb	r7, r7
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8003240:	4307      	orrs	r7, r0
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8003242:	f10d 0215 	add.w	r2, sp, #21
 8003246:	2183      	movs	r1, #131	; 0x83
 8003248:	4620      	mov	r0, r4
 800324a:	f001 f803 	bl	8004254 <VL53L0X_RdByte>
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 800324e:	f89d 2015 	ldrb.w	r2, [sp, #21]
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8003252:	b27f      	sxtb	r7, r7
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8003254:	4307      	orrs	r7, r0
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8003256:	f042 0204 	orr.w	r2, r2, #4
 800325a:	2183      	movs	r1, #131	; 0x83
 800325c:	4620      	mov	r0, r4
 800325e:	f000 ffbd 	bl	80041dc <VL53L0X_WrByte>
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8003262:	b27f      	sxtb	r7, r7
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8003264:	4307      	orrs	r7, r0
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8003266:	2207      	movs	r2, #7
 8003268:	21ff      	movs	r1, #255	; 0xff
 800326a:	4620      	mov	r0, r4
 800326c:	f000 ffb6 	bl	80041dc <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8003270:	b27f      	sxtb	r7, r7
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8003272:	2201      	movs	r2, #1
 8003274:	2181      	movs	r1, #129	; 0x81
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8003276:	4307      	orrs	r7, r0
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8003278:	4620      	mov	r0, r4
 800327a:	f000 ffaf 	bl	80041dc <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 800327e:	b27f      	sxtb	r7, r7
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8003280:	4307      	orrs	r7, r0

		Status |= VL53L0X_PollingDelay(Dev);
 8003282:	4620      	mov	r0, r4
 8003284:	f001 f818 	bl	80042b8 <VL53L0X_PollingDelay>
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8003288:	b27f      	sxtb	r7, r7
		Status |= VL53L0X_PollingDelay(Dev);
 800328a:	4307      	orrs	r7, r0

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800328c:	2201      	movs	r2, #1
 800328e:	2180      	movs	r1, #128	; 0x80
 8003290:	4620      	mov	r0, r4
 8003292:	f000 ffa3 	bl	80041dc <VL53L0X_WrByte>
		Status |= VL53L0X_PollingDelay(Dev);
 8003296:	b27f      	sxtb	r7, r7
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8003298:	4338      	orrs	r0, r7

		if (((option & 1) == 1) &&
 800329a:	f018 0a01 	ands.w	sl, r8, #1
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800329e:	b245      	sxtb	r5, r0
		if (((option & 1) == 1) &&
 80032a0:	f000 8223 	beq.w	80036ea <VL53L0X_get_info_from_device+0x4fa>
 80032a4:	07f3      	lsls	r3, r6, #31
 80032a6:	f100 8223 	bmi.w	80036f0 <VL53L0X_get_info_from_device+0x500>
			((ReadDataFromDeviceDone & 1) == 0)) {
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 80032aa:	226b      	movs	r2, #107	; 0x6b
 80032ac:	2194      	movs	r1, #148	; 0x94
 80032ae:	4620      	mov	r0, r4
 80032b0:	f000 ff94 	bl	80041dc <VL53L0X_WrByte>
 80032b4:	4607      	mov	r7, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 80032b6:	4620      	mov	r0, r4
 80032b8:	f7ff ff78 	bl	80031ac <VL53L0X_device_read_strobe>
 80032bc:	4338      	orrs	r0, r7
 80032be:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80032c0:	aa06      	add	r2, sp, #24
 80032c2:	2190      	movs	r1, #144	; 0x90
 80032c4:	4620      	mov	r0, r4
 80032c6:	f000 ffe8 	bl	800429a <VL53L0X_RdDWord>
			Status |= VL53L0X_device_read_strobe(Dev);
 80032ca:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80032cc:	4305      	orrs	r5, r0

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 80032ce:	9806      	ldr	r0, [sp, #24]
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 80032d0:	2224      	movs	r2, #36	; 0x24
 80032d2:	2194      	movs	r1, #148	; 0x94
			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 80032d4:	f3c0 2b06 	ubfx	fp, r0, #8, #7
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 80032d8:	f3c0 39c0 	ubfx	r9, r0, #15, #1
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 80032dc:	4620      	mov	r0, r4
 80032de:	f000 ff7d 	bl	80041dc <VL53L0X_WrByte>
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80032e2:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 80032e4:	4305      	orrs	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 80032e6:	4620      	mov	r0, r4
 80032e8:	f7ff ff60 	bl	80031ac <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 80032ec:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
 80032ee:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80032f0:	aa06      	add	r2, sp, #24
 80032f2:	2190      	movs	r1, #144	; 0x90
 80032f4:	4620      	mov	r0, r4
 80032f6:	f000 ffd0 	bl	800429a <VL53L0X_RdDWord>


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 80032fa:	9b06      	ldr	r3, [sp, #24]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 80032fc:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 8003300:	0e1a      	lsrs	r2, r3, #24
 8003302:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 8003306:	0c1a      	lsrs	r2, r3, #16
 8003308:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
			Status |= VL53L0X_device_read_strobe(Dev);
 800330c:	b26d      	sxtb	r5, r5
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 800330e:	0a1a      	lsrs	r2, r3, #8

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 8003310:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003312:	4305      	orrs	r5, r0
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 8003314:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 8003318:	4620      	mov	r0, r4
 800331a:	2225      	movs	r2, #37	; 0x25
 800331c:	f000 ff5e 	bl	80041dc <VL53L0X_WrByte>
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003320:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 8003322:	4305      	orrs	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 8003324:	4620      	mov	r0, r4
 8003326:	f7ff ff41 	bl	80031ac <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 800332a:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
 800332c:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800332e:	aa06      	add	r2, sp, #24
 8003330:	2190      	movs	r1, #144	; 0x90
 8003332:	4620      	mov	r0, r4
 8003334:	f000 ffb1 	bl	800429a <VL53L0X_RdDWord>

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 8003338:	9b06      	ldr	r3, [sp, #24]
			Status |= VL53L0X_device_read_strobe(Dev);
 800333a:	b26d      	sxtb	r5, r5
			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 800333c:	0e1a      	lsrs	r2, r3, #24
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800333e:	4305      	orrs	r5, r0
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 8003340:	0c1b      	lsrs	r3, r3, #16
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003342:	b26d      	sxtb	r5, r5
			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 8003344:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 8003348:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
				& 0xff);
		}

		if (((option & 2) == 2) &&
 800334c:	f018 0302 	ands.w	r3, r8, #2
 8003350:	9302      	str	r3, [sp, #8]
 8003352:	f000 80db 	beq.w	800350c <VL53L0X_get_info_from_device+0x31c>
 8003356:	f016 0702 	ands.w	r7, r6, #2
 800335a:	f040 80d7 	bne.w	800350c <VL53L0X_get_info_from_device+0x31c>
			((ReadDataFromDeviceDone & 2) == 0)) {

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 800335e:	2202      	movs	r2, #2
 8003360:	2194      	movs	r1, #148	; 0x94
 8003362:	4620      	mov	r0, r4
 8003364:	f000 ff3a 	bl	80041dc <VL53L0X_WrByte>
 8003368:	9001      	str	r0, [sp, #4]
			Status |= VL53L0X_device_read_strobe(Dev);
 800336a:	4620      	mov	r0, r4
 800336c:	f7ff ff1e 	bl	80031ac <VL53L0X_device_read_strobe>
 8003370:	9b01      	ldr	r3, [sp, #4]
 8003372:	4318      	orrs	r0, r3
 8003374:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8003376:	f10d 0216 	add.w	r2, sp, #22
 800337a:	2190      	movs	r1, #144	; 0x90
 800337c:	4620      	mov	r0, r4
 800337e:	f000 ff69 	bl	8004254 <VL53L0X_RdByte>
			Status |= VL53L0X_device_read_strobe(Dev);
 8003382:	b26d      	sxtb	r5, r5

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8003384:	227b      	movs	r2, #123	; 0x7b
 8003386:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8003388:	4305      	orrs	r5, r0
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800338a:	4620      	mov	r0, r4
 800338c:	f000 ff26 	bl	80041dc <VL53L0X_WrByte>
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8003390:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8003392:	4305      	orrs	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 8003394:	4620      	mov	r0, r4
 8003396:	f7ff ff09 	bl	80031ac <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800339a:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
 800339c:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 800339e:	f10d 0217 	add.w	r2, sp, #23
 80033a2:	2190      	movs	r1, #144	; 0x90
 80033a4:	4620      	mov	r0, r4
 80033a6:	f000 ff55 	bl	8004254 <VL53L0X_RdByte>
			Status |= VL53L0X_device_read_strobe(Dev);
 80033aa:	b26d      	sxtb	r5, r5

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 80033ac:	2277      	movs	r2, #119	; 0x77
 80033ae:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 80033b0:	4305      	orrs	r5, r0
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 80033b2:	4620      	mov	r0, r4
 80033b4:	f000 ff12 	bl	80041dc <VL53L0X_WrByte>
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 80033b8:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 80033ba:	4305      	orrs	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 80033bc:	4620      	mov	r0, r4
 80033be:	f7ff fef5 	bl	80031ac <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 80033c2:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
 80033c4:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80033c6:	aa06      	add	r2, sp, #24
 80033c8:	2190      	movs	r1, #144	; 0x90
 80033ca:	4620      	mov	r0, r4
 80033cc:	f000 ff65 	bl	800429a <VL53L0X_RdDWord>

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 80033d0:	9b06      	ldr	r3, [sp, #24]
 80033d2:	0e5a      	lsrs	r2, r3, #25
 80033d4:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 80033d8:	f3c3 4286 	ubfx	r2, r3, #18, #7
 80033dc:	f88d 202d 	strb.w	r2, [sp, #45]	; 0x2d
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 80033e0:	f3c3 22c6 	ubfx	r2, r3, #11, #7
 80033e4:	f88d 202e 	strb.w	r2, [sp, #46]	; 0x2e
			Status |= VL53L0X_device_read_strobe(Dev);
 80033e8:	b26d      	sxtb	r5, r5
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 80033ea:	f3c3 1206 	ubfx	r2, r3, #4, #7

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 80033ee:	00db      	lsls	r3, r3, #3
 80033f0:	f003 0378 	and.w	r3, r3, #120	; 0x78

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 80033f4:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80033f6:	4305      	orrs	r5, r0
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 80033f8:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 80033fc:	4620      	mov	r0, r4
 80033fe:	2278      	movs	r2, #120	; 0x78
			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 8003400:	f88d 3015 	strb.w	r3, [sp, #21]
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 8003404:	f000 feea 	bl	80041dc <VL53L0X_WrByte>
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003408:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 800340a:	4305      	orrs	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 800340c:	4620      	mov	r0, r4
 800340e:	f7ff fecd 	bl	80031ac <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 8003412:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
 8003414:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003416:	aa06      	add	r2, sp, #24
 8003418:	2190      	movs	r1, #144	; 0x90
 800341a:	4620      	mov	r0, r4
 800341c:	f000 ff3d 	bl	800429a <VL53L0X_RdDWord>

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 8003420:	9b06      	ldr	r3, [sp, #24]
			ProductId[4] = (char)(byte +
 8003422:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8003426:	eb02 7253 	add.w	r2, r2, r3, lsr #29
 800342a:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 800342e:	f3c3 5286 	ubfx	r2, r3, #22, #7
 8003432:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 8003436:	f3c3 32c6 	ubfx	r2, r3, #15, #7
 800343a:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 800343e:	f3c3 2206 	ubfx	r2, r3, #8, #7
 8003442:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
			Status |= VL53L0X_device_read_strobe(Dev);
 8003446:	b26d      	sxtb	r5, r5
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 8003448:	f3c3 0246 	ubfx	r2, r3, #1, #7

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 800344c:	019b      	lsls	r3, r3, #6
 800344e:	f003 0340 	and.w	r3, r3, #64	; 0x40

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8003452:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003454:	4305      	orrs	r5, r0
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 8003456:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 800345a:	4620      	mov	r0, r4
 800345c:	2279      	movs	r2, #121	; 0x79
			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 800345e:	f88d 3015 	strb.w	r3, [sp, #21]
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8003462:	f000 febb 	bl	80041dc <VL53L0X_WrByte>
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003466:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8003468:	4305      	orrs	r5, r0

			Status |= VL53L0X_device_read_strobe(Dev);
 800346a:	4620      	mov	r0, r4
 800346c:	f7ff fe9e 	bl	80031ac <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8003470:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
 8003472:	4305      	orrs	r5, r0

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003474:	aa06      	add	r2, sp, #24
 8003476:	2190      	movs	r1, #144	; 0x90
 8003478:	4620      	mov	r0, r4
 800347a:	f000 ff0e 	bl	800429a <VL53L0X_RdDWord>

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 800347e:	9b06      	ldr	r3, [sp, #24]
			ProductId[9] = (char)(byte +
 8003480:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8003484:	eb02 6293 	add.w	r2, r2, r3, lsr #26
 8003488:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 800348c:	f3c3 42c6 	ubfx	r2, r3, #19, #7
 8003490:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 8003494:	f3c3 3206 	ubfx	r2, r3, #12, #7
 8003498:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
			Status |= VL53L0X_device_read_strobe(Dev);
 800349c:	b26d      	sxtb	r5, r5
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 800349e:	f3c3 1246 	ubfx	r2, r3, #5, #7

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	f003 037c 	and.w	r3, r3, #124	; 0x7c

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 80034a8:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80034aa:	4305      	orrs	r5, r0
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 80034ac:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 80034b0:	4620      	mov	r0, r4
 80034b2:	227a      	movs	r2, #122	; 0x7a
			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 80034b4:	f88d 3015 	strb.w	r3, [sp, #21]
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 80034b8:	f000 fe90 	bl	80041dc <VL53L0X_WrByte>
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80034bc:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 80034be:	4305      	orrs	r5, r0

			Status |= VL53L0X_device_read_strobe(Dev);
 80034c0:	4620      	mov	r0, r4
 80034c2:	f7ff fe73 	bl	80031ac <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 80034c6:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
 80034c8:	4305      	orrs	r5, r0

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80034ca:	aa06      	add	r2, sp, #24
 80034cc:	2190      	movs	r1, #144	; 0x90
 80034ce:	4620      	mov	r0, r4
 80034d0:	f000 fee3 	bl	800429a <VL53L0X_RdDWord>

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 80034d4:	9b06      	ldr	r3, [sp, #24]
			ProductId[13] = (char)(byte +
 80034d6:	f89d 2015 	ldrb.w	r2, [sp, #21]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
			ProductId[18] = '\0';
 80034da:	f88d 703e 	strb.w	r7, [sp, #62]	; 0x3e
			ProductId[13] = (char)(byte +
 80034de:	eb02 7293 	add.w	r2, r2, r3, lsr #30
 80034e2:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 80034e6:	f3c3 52c6 	ubfx	r2, r3, #23, #7
			Status |= VL53L0X_device_read_strobe(Dev);
 80034ea:	b26d      	sxtb	r5, r5
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 80034ec:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 80034f0:	f3c3 4206 	ubfx	r2, r3, #16, #7
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80034f4:	4305      	orrs	r5, r0
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 80034f6:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 80034fa:	f3c3 2246 	ubfx	r2, r3, #9, #7
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 80034fe:	f3c3 0386 	ubfx	r3, r3, #2, #7
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003502:	b26d      	sxtb	r5, r5
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 8003504:	f88d 203c 	strb.w	r2, [sp, #60]	; 0x3c
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 8003508:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d

		}

		if (((option & 4) == 4) &&
 800350c:	f018 0304 	ands.w	r3, r8, #4
 8003510:	9301      	str	r3, [sp, #4]
 8003512:	f000 80ef 	beq.w	80036f4 <VL53L0X_get_info_from_device+0x504>
 8003516:	0777      	lsls	r7, r6, #29
 8003518:	f100 80ec 	bmi.w	80036f4 <VL53L0X_get_info_from_device+0x504>
			((ReadDataFromDeviceDone & 4) == 0)) {

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800351c:	227b      	movs	r2, #123	; 0x7b
 800351e:	2194      	movs	r1, #148	; 0x94
 8003520:	4620      	mov	r0, r4
 8003522:	f000 fe5b 	bl	80041dc <VL53L0X_WrByte>
 8003526:	4607      	mov	r7, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 8003528:	4620      	mov	r0, r4
 800352a:	f7ff fe3f 	bl	80031ac <VL53L0X_device_read_strobe>
 800352e:	4338      	orrs	r0, r7
 8003530:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 8003532:	aa07      	add	r2, sp, #28
 8003534:	2190      	movs	r1, #144	; 0x90
 8003536:	4620      	mov	r0, r4
 8003538:	f000 feaf 	bl	800429a <VL53L0X_RdDWord>
			Status |= VL53L0X_device_read_strobe(Dev);
 800353c:	b26d      	sxtb	r5, r5

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 800353e:	227c      	movs	r2, #124	; 0x7c
 8003540:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 8003542:	4305      	orrs	r5, r0
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8003544:	4620      	mov	r0, r4
 8003546:	f000 fe49 	bl	80041dc <VL53L0X_WrByte>
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 800354a:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 800354c:	4305      	orrs	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 800354e:	4620      	mov	r0, r4
 8003550:	f7ff fe2c 	bl	80031ac <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8003554:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
 8003556:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 8003558:	aa08      	add	r2, sp, #32
 800355a:	2190      	movs	r1, #144	; 0x90
 800355c:	4620      	mov	r0, r4
 800355e:	f000 fe9c 	bl	800429a <VL53L0X_RdDWord>
			Status |= VL53L0X_device_read_strobe(Dev);
 8003562:	b26d      	sxtb	r5, r5

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 8003564:	2273      	movs	r2, #115	; 0x73
 8003566:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 8003568:	4305      	orrs	r5, r0
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 800356a:	4620      	mov	r0, r4
 800356c:	f000 fe36 	bl	80041dc <VL53L0X_WrByte>
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 8003570:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 8003572:	4305      	orrs	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 8003574:	4620      	mov	r0, r4
 8003576:	f7ff fe19 	bl	80031ac <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 800357a:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
 800357c:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800357e:	aa06      	add	r2, sp, #24
 8003580:	2190      	movs	r1, #144	; 0x90
 8003582:	4620      	mov	r0, r4
 8003584:	f000 fe89 	bl	800429a <VL53L0X_RdDWord>
			Status |= VL53L0X_device_read_strobe(Dev);
 8003588:	b26d      	sxtb	r5, r5

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 800358a:	2274      	movs	r2, #116	; 0x74
 800358c:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800358e:	4305      	orrs	r5, r0
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8003590:	4620      	mov	r0, r4
				0x0000000ff) << 8;
 8003592:	9f06      	ldr	r7, [sp, #24]
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8003594:	f000 fe22 	bl	80041dc <VL53L0X_WrByte>
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003598:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 800359a:	4305      	orrs	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 800359c:	4620      	mov	r0, r4
 800359e:	f7ff fe05 	bl	80031ac <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 80035a2:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
 80035a4:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80035a6:	aa06      	add	r2, sp, #24
 80035a8:	2190      	movs	r1, #144	; 0x90
 80035aa:	4620      	mov	r0, r4
 80035ac:	f000 fe75 	bl	800429a <VL53L0X_RdDWord>
				0x0000000ff) << 8;
 80035b0:	023f      	lsls	r7, r7, #8

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 80035b2:	f89d 301b 	ldrb.w	r3, [sp, #27]
			Status |= VL53L0X_device_read_strobe(Dev);
 80035b6:	b26d      	sxtb	r5, r5

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 80035b8:	2275      	movs	r2, #117	; 0x75
 80035ba:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80035bc:	4305      	orrs	r5, r0
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 80035be:	b2bf      	uxth	r7, r7
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 80035c0:	4620      	mov	r0, r4
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 80035c2:	431f      	orrs	r7, r3
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 80035c4:	f000 fe0a 	bl	80041dc <VL53L0X_WrByte>
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80035c8:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 80035ca:	4305      	orrs	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 80035cc:	4620      	mov	r0, r4
 80035ce:	f7ff fded 	bl	80031ac <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 80035d2:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
 80035d4:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80035d6:	aa06      	add	r2, sp, #24
 80035d8:	2190      	movs	r1, #144	; 0x90
 80035da:	4620      	mov	r0, r4
 80035dc:	f000 fe5d 	bl	800429a <VL53L0X_RdDWord>

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 80035e0:	9b06      	ldr	r3, [sp, #24]
			Status |= VL53L0X_device_read_strobe(Dev);
 80035e2:	b26d      	sxtb	r5, r5
							<< 8;
 80035e4:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 80035e6:	b29b      	uxth	r3, r3

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 80035e8:	2276      	movs	r2, #118	; 0x76
 80035ea:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80035ec:	4305      	orrs	r5, r0
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 80035ee:	4620      	mov	r0, r4
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 80035f0:	9303      	str	r3, [sp, #12]
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 80035f2:	f000 fdf3 	bl	80041dc <VL53L0X_WrByte>
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80035f6:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 80035f8:	4305      	orrs	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 80035fa:	4620      	mov	r0, r4
 80035fc:	f7ff fdd6 	bl	80031ac <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 8003600:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
 8003602:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003604:	aa06      	add	r2, sp, #24
 8003606:	2190      	movs	r1, #144	; 0x90
 8003608:	4620      	mov	r0, r4
 800360a:	f000 fe46 	bl	800429a <VL53L0X_RdDWord>
			Status |= VL53L0X_device_read_strobe(Dev);
 800360e:	b26d      	sxtb	r5, r5

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 8003610:	f89d 201b 	ldrb.w	r2, [sp, #27]
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 8003614:	9b03      	ldr	r3, [sp, #12]
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003616:	4305      	orrs	r5, r0
 8003618:	b26d      	sxtb	r5, r5
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 800361a:	4313      	orrs	r3, r2
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 800361c:	2200      	movs	r2, #0
 800361e:	2181      	movs	r1, #129	; 0x81
 8003620:	4620      	mov	r0, r4
 8003622:	9303      	str	r3, [sp, #12]
 8003624:	f000 fdda 	bl	80041dc <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8003628:	2206      	movs	r2, #6
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 800362a:	4305      	orrs	r5, r0
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800362c:	21ff      	movs	r1, #255	; 0xff
 800362e:	4620      	mov	r0, r4
 8003630:	f000 fdd4 	bl	80041dc <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 8003634:	b26d      	sxtb	r5, r5
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8003636:	4305      	orrs	r5, r0
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8003638:	f10d 0215 	add.w	r2, sp, #21
 800363c:	2183      	movs	r1, #131	; 0x83
 800363e:	4620      	mov	r0, r4
 8003640:	f000 fe08 	bl	8004254 <VL53L0X_RdByte>
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8003644:	f89d 2015 	ldrb.w	r2, [sp, #21]
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8003648:	b26d      	sxtb	r5, r5
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800364a:	4305      	orrs	r5, r0
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 800364c:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
 8003650:	2183      	movs	r1, #131	; 0x83
 8003652:	4620      	mov	r0, r4
 8003654:	f000 fdc2 	bl	80041dc <VL53L0X_WrByte>
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8003658:	b26d      	sxtb	r5, r5
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 800365a:	4305      	orrs	r5, r0
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800365c:	2201      	movs	r2, #1
 800365e:	21ff      	movs	r1, #255	; 0xff
 8003660:	4620      	mov	r0, r4
 8003662:	f000 fdbb 	bl	80041dc <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8003666:	b26d      	sxtb	r5, r5
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003668:	4305      	orrs	r5, r0
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800366a:	2201      	movs	r2, #1
 800366c:	2100      	movs	r1, #0
 800366e:	4620      	mov	r0, r4
 8003670:	f000 fdb4 	bl	80041dc <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003674:	b26d      	sxtb	r5, r5
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8003676:	4305      	orrs	r5, r0

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003678:	2200      	movs	r2, #0
 800367a:	21ff      	movs	r1, #255	; 0xff
 800367c:	4620      	mov	r0, r4
 800367e:	f000 fdad 	bl	80041dc <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8003682:	b26d      	sxtb	r5, r5
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003684:	4305      	orrs	r5, r0
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8003686:	2200      	movs	r2, #0
 8003688:	2180      	movs	r1, #128	; 0x80
 800368a:	4620      	mov	r0, r4
 800368c:	f000 fda6 	bl	80041dc <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003690:	b26d      	sxtb	r5, r5
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8003692:	4305      	orrs	r5, r0
 8003694:	b26d      	sxtb	r5, r5
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8003696:	9b03      	ldr	r3, [sp, #12]
 8003698:	bb1d      	cbnz	r5, 80036e2 <VL53L0X_get_info_from_device+0x4f2>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 800369a:	f1ba 0f00 	cmp.w	sl, #0
 800369e:	d001      	beq.n	80036a4 <VL53L0X_get_info_from_device+0x4b4>
 80036a0:	07f0      	lsls	r0, r6, #31
 80036a2:	d52a      	bpl.n	80036fa <VL53L0X_get_info_from_device+0x50a>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
			}
		}

		if (((option & 2) == 2) &&
 80036a4:	9a02      	ldr	r2, [sp, #8]
 80036a6:	2a00      	cmp	r2, #0
 80036a8:	d138      	bne.n	800371c <VL53L0X_get_info_from_device+0x52c>
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);

		}

		if (((option & 4) == 4) &&
 80036aa:	9a01      	ldr	r2, [sp, #4]
 80036ac:	b1aa      	cbz	r2, 80036da <VL53L0X_get_info_from_device+0x4ea>
 80036ae:	0772      	lsls	r2, r6, #29
 80036b0:	d413      	bmi.n	80036da <VL53L0X_get_info_from_device+0x4ea>
			((ReadDataFromDeviceDone & 4) == 0)) {
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80036b2:	9a07      	ldr	r2, [sp, #28]
 80036b4:	f8c4 2118 	str.w	r2, [r4, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 80036b8:	027f      	lsls	r7, r7, #9
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80036ba:	9a08      	ldr	r2, [sp, #32]
 80036bc:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80036c0:	f8c4 7120 	str.w	r7, [r4, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
			if (DistMeasFixed1104_400_mm != 0) {
 80036c4:	b13b      	cbz	r3, 80036d6 <VL53L0X_get_info_from_device+0x4e6>
					OffsetFixed1104_mm =
 80036c6:	f5a3 52c8 	sub.w	r2, r3, #6400	; 0x1900
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 80036ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80036ce:	4353      	muls	r3, r2
 80036d0:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters *= -1;
 80036d2:	425b      	negs	r3, r3
 80036d4:	b29b      	uxth	r3, r3
			}

			PALDevDataSet(Dev,
 80036d6:	b21b      	sxth	r3, r3
 80036d8:	60e3      	str	r3, [r4, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 80036da:	ea46 0608 	orr.w	r6, r6, r8
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 80036de:	f884 60f0 	strb.w	r6, [r4, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 80036e2:	4628      	mov	r0, r5
 80036e4:	b011      	add	sp, #68	; 0x44
 80036e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t ReferenceSpadType = 0;
 80036ea:	46d1      	mov	r9, sl
	uint8_t ReferenceSpadCount = 0;
 80036ec:	46d3      	mov	fp, sl
 80036ee:	e62d      	b.n	800334c <VL53L0X_get_info_from_device+0x15c>
 80036f0:	46cb      	mov	fp, r9
 80036f2:	e62b      	b.n	800334c <VL53L0X_get_info_from_device+0x15c>
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 80036f4:	2700      	movs	r7, #0
	uint32_t DistMeasFixed1104_400_mm = 0;
 80036f6:	463b      	mov	r3, r7
 80036f8:	e790      	b.n	800361c <VL53L0X_get_info_from_device+0x42c>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80036fa:	f884 b113 	strb.w	fp, [r4, #275]	; 0x113
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80036fe:	f884 9114 	strb.w	r9, [r4, #276]	; 0x114
 8003702:	f504 7195 	add.w	r1, r4, #298	; 0x12a
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8003706:	462a      	mov	r2, r5
					NvmRefGoodSpadMap[i];
 8003708:	f10d 0e24 	add.w	lr, sp, #36	; 0x24
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 800370c:	f812 000e 	ldrb.w	r0, [r2, lr]
 8003710:	f801 0b01 	strb.w	r0, [r1], #1
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8003714:	3201      	adds	r2, #1
 8003716:	2a06      	cmp	r2, #6
 8003718:	d1f8      	bne.n	800370c <VL53L0X_get_info_from_device+0x51c>
 800371a:	e7c3      	b.n	80036a4 <VL53L0X_get_info_from_device+0x4b4>
		if (((option & 2) == 2) &&
 800371c:	07b1      	lsls	r1, r6, #30
 800371e:	d4c4      	bmi.n	80036aa <VL53L0X_get_info_from_device+0x4ba>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8003720:	f89d 2016 	ldrb.w	r2, [sp, #22]
 8003724:	f884 20f1 	strb.w	r2, [r4, #241]	; 0xf1
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8003728:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800372c:	f884 20f2 	strb.w	r2, [r4, #242]	; 0xf2
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 8003730:	a90b      	add	r1, sp, #44	; 0x2c
 8003732:	f104 00f3 	add.w	r0, r4, #243	; 0xf3
 8003736:	9302      	str	r3, [sp, #8]
 8003738:	f000 fe2e 	bl	8004398 <strcpy>
 800373c:	9b02      	ldr	r3, [sp, #8]
 800373e:	e7b4      	b.n	80036aa <VL53L0X_get_info_from_device+0x4ba>
 8003740:	464d      	mov	r5, r9
	return Status;
 8003742:	e7ce      	b.n	80036e2 <VL53L0X_get_info_from_device+0x4f2>

08003744 <VL53L0X_encode_timeout>:

	uint16_t encoded_timeout = 0;
	uint32_t ls_byte = 0;
	uint16_t ms_byte = 0;

	if (timeout_macro_clks > 0) {
 8003744:	b150      	cbz	r0, 800375c <VL53L0X_encode_timeout+0x18>
		ls_byte = timeout_macro_clks - 1;
 8003746:	3801      	subs	r0, #1
 8003748:	2300      	movs	r3, #0

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800374a:	f030 01ff 	bics.w	r1, r0, #255	; 0xff
 800374e:	b29a      	uxth	r2, r3
 8003750:	f103 0301 	add.w	r3, r3, #1
 8003754:	d103      	bne.n	800375e <VL53L0X_encode_timeout+0x1a>
			ls_byte = ls_byte >> 1;
			ms_byte++;
		}

		encoded_timeout = (ms_byte << 8)
 8003756:	eb00 2002 	add.w	r0, r0, r2, lsl #8
 800375a:	b280      	uxth	r0, r0
				+ (uint16_t) (ls_byte & 0x000000FF);
	}

	return encoded_timeout;

}
 800375c:	4770      	bx	lr
			ls_byte = ls_byte >> 1;
 800375e:	0840      	lsrs	r0, r0, #1
 8003760:	e7f3      	b.n	800374a <VL53L0X_encode_timeout+0x6>

08003762 <VL53L0X_decode_timeout>:
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8003762:	b2c3      	uxtb	r3, r0
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8003764:	0a00      	lsrs	r0, r0, #8
 8003766:	fa03 f000 	lsl.w	r0, r3, r0

	return timeout_macro_clks;
}
 800376a:	3001      	adds	r0, #1
 800376c:	4770      	bx	lr
	...

08003770 <VL53L0X_calc_timeout_mclks>:
	macro_period_ps = (uint32_t)(macro_period_vclks
 8003770:	4808      	ldr	r0, [pc, #32]	; (8003794 <VL53L0X_calc_timeout_mclks+0x24>)

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
	macro_period_ns = (macro_period_ps + 500) / 1000;

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 8003772:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
	macro_period_ps = (uint32_t)(macro_period_vclks
 8003776:	4342      	muls	r2, r0
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8003778:	f502 72fa 	add.w	r2, r2, #500	; 0x1f4
		+ (macro_period_ns / 2)) / macro_period_ns);
 800377c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003780:	fbb2 f0f0 	udiv	r0, r2, r0
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8003784:	fbb2 f2f3 	udiv	r2, r2, r3
		+ (macro_period_ns / 2)) / macro_period_ns);
 8003788:	fb03 0001 	mla	r0, r3, r1, r0

    return timeout_period_mclks;
}
 800378c:	fbb0 f0f2 	udiv	r0, r0, r2
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop
 8003794:	003a2f00 	.word	0x003a2f00

08003798 <VL53L0X_calc_timeout_us>:
	macro_period_ps = (uint32_t)(macro_period_vclks
 8003798:	4b06      	ldr	r3, [pc, #24]	; (80037b4 <VL53L0X_calc_timeout_us+0x1c>)
 800379a:	435a      	muls	r2, r3
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800379c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80037a0:	f502 72fa 	add.w	r2, r2, #500	; 0x1f4
 80037a4:	fbb2 f2f0 	udiv	r2, r2, r0

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 80037a8:	434a      	muls	r2, r1
 80037aa:	f502 72fa 	add.w	r2, r2, #500	; 0x1f4

	return actual_timeout_period_us;
}
 80037ae:	fbb2 f0f0 	udiv	r0, r2, r0
 80037b2:	4770      	bx	lr
 80037b4:	003a2f00 	.word	0x003a2f00

080037b8 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 80037b8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 80037bc:	2902      	cmp	r1, #2
	uint8_t EncodedTimeOutByte = 0;
 80037be:	f04f 0400 	mov.w	r4, #0
{
 80037c2:	4606      	mov	r6, r0
 80037c4:	4690      	mov	r8, r2
	uint8_t EncodedTimeOutByte = 0;
 80037c6:	f88d 4003 	strb.w	r4, [sp, #3]
	uint16_t PreRangeEncodedTimeOut = 0;
 80037ca:	f8ad 4004 	strh.w	r4, [sp, #4]
	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 80037ce:	d81d      	bhi.n	800380c <get_sequence_step_timeout+0x54>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80037d0:	f10d 0202 	add.w	r2, sp, #2
 80037d4:	4621      	mov	r1, r4
 80037d6:	f7fe fb65 	bl	8001ea4 <VL53L0X_GetVcselPulsePeriod>
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 80037da:	4605      	mov	r5, r0
 80037dc:	b930      	cbnz	r0, 80037ec <get_sequence_step_timeout+0x34>
			Status = VL53L0X_RdByte(Dev,
 80037de:	f10d 0203 	add.w	r2, sp, #3
 80037e2:	2146      	movs	r1, #70	; 0x46
 80037e4:	4630      	mov	r0, r6
 80037e6:	f000 fd35 	bl	8004254 <VL53L0X_RdByte>
 80037ea:	4605      	mov	r5, r0
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 80037ec:	f89d 0003 	ldrb.w	r0, [sp, #3]
				Status = VL53L0X_RdWord(Dev,
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 80037f0:	f7ff ffb7 	bl	8003762 <VL53L0X_decode_timeout>
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 80037f4:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80037f8:	b281      	uxth	r1, r0
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 80037fa:	4630      	mov	r0, r6
 80037fc:	f7ff ffcc 	bl	8003798 <VL53L0X_calc_timeout_us>
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 8003800:	f8c8 0000 	str.w	r0, [r8]

	return Status;
}
 8003804:	4628      	mov	r0, r5
 8003806:	b004      	add	sp, #16
 8003808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800380c:	2903      	cmp	r1, #3
 800380e:	d118      	bne.n	8003842 <get_sequence_step_timeout+0x8a>
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8003810:	f10d 0202 	add.w	r2, sp, #2
 8003814:	4621      	mov	r1, r4
 8003816:	f7fe fb45 	bl	8001ea4 <VL53L0X_GetVcselPulsePeriod>
		if (Status == VL53L0X_ERROR_NONE) {
 800381a:	4605      	mov	r5, r0
 800381c:	2800      	cmp	r0, #0
 800381e:	d14a      	bne.n	80038b6 <get_sequence_step_timeout+0xfe>
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8003820:	4601      	mov	r1, r0
 8003822:	f10d 0202 	add.w	r2, sp, #2
 8003826:	4630      	mov	r0, r6
 8003828:	f7fe fb3c 	bl	8001ea4 <VL53L0X_GetVcselPulsePeriod>
			if (Status == VL53L0X_ERROR_NONE) {
 800382c:	4605      	mov	r5, r0
 800382e:	b928      	cbnz	r0, 800383c <get_sequence_step_timeout+0x84>
				Status = VL53L0X_RdWord(Dev,
 8003830:	aa01      	add	r2, sp, #4
 8003832:	2151      	movs	r1, #81	; 0x51
 8003834:	4630      	mov	r0, r6
 8003836:	f000 fd1e 	bl	8004276 <VL53L0X_RdWord>
 800383a:	4605      	mov	r5, r0
			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800383c:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8003840:	e7d6      	b.n	80037f0 <get_sequence_step_timeout+0x38>
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8003842:	2904      	cmp	r1, #4
 8003844:	d139      	bne.n	80038ba <get_sequence_step_timeout+0x102>
		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8003846:	a902      	add	r1, sp, #8
 8003848:	f7fe fb7f 	bl	8001f4a <VL53L0X_GetSequenceStepEnables>
		if (SchedulerSequenceSteps.PreRangeOn) {
 800384c:	f89d 100b 	ldrb.w	r1, [sp, #11]
 8003850:	b369      	cbz	r1, 80038ae <get_sequence_step_timeout+0xf6>
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8003852:	f10d 0202 	add.w	r2, sp, #2
 8003856:	4621      	mov	r1, r4
 8003858:	4630      	mov	r0, r6
 800385a:	f7fe fb23 	bl	8001ea4 <VL53L0X_GetVcselPulsePeriod>
 800385e:	4605      	mov	r5, r0
 8003860:	4607      	mov	r7, r0
			if (Status == VL53L0X_ERROR_NONE) {
 8003862:	bb30      	cbnz	r0, 80038b2 <get_sequence_step_timeout+0xfa>
				Status = VL53L0X_RdWord(Dev,
 8003864:	aa01      	add	r2, sp, #4
 8003866:	2151      	movs	r1, #81	; 0x51
 8003868:	4630      	mov	r0, r6
 800386a:	f000 fd04 	bl	8004276 <VL53L0X_RdWord>
 800386e:	4605      	mov	r5, r0
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8003870:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8003874:	f7ff ff75 	bl	8003762 <VL53L0X_decode_timeout>
 8003878:	b284      	uxth	r4, r0
		if (Status == VL53L0X_ERROR_NONE) {
 800387a:	b99d      	cbnz	r5, 80038a4 <get_sequence_step_timeout+0xec>
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800387c:	f10d 0202 	add.w	r2, sp, #2
 8003880:	2101      	movs	r1, #1
 8003882:	4630      	mov	r0, r6
 8003884:	f7fe fb0e 	bl	8001ea4 <VL53L0X_GetVcselPulsePeriod>
		if (Status == VL53L0X_ERROR_NONE) {
 8003888:	4605      	mov	r5, r0
 800388a:	b990      	cbnz	r0, 80038b2 <get_sequence_step_timeout+0xfa>
			Status = VL53L0X_RdWord(Dev,
 800388c:	f10d 0206 	add.w	r2, sp, #6
 8003890:	2171      	movs	r1, #113	; 0x71
 8003892:	4630      	mov	r0, r6
 8003894:	f000 fcef 	bl	8004276 <VL53L0X_RdWord>
 8003898:	4605      	mov	r5, r0
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 800389a:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 800389e:	f7ff ff60 	bl	8003762 <VL53L0X_decode_timeout>
 80038a2:	b287      	uxth	r7, r0
		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 80038a4:	1b3c      	subs	r4, r7, r4
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 80038a6:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80038aa:	b2a1      	uxth	r1, r4
 80038ac:	e7a5      	b.n	80037fa <get_sequence_step_timeout+0x42>
		PreRangeTimeOutMClks = 0;
 80038ae:	460c      	mov	r4, r1
 80038b0:	e7e4      	b.n	800387c <get_sequence_step_timeout+0xc4>
	uint16_t FinalRangeTimeOutMClks = 0;
 80038b2:	2700      	movs	r7, #0
 80038b4:	e7f6      	b.n	80038a4 <get_sequence_step_timeout+0xec>
	uint32_t TimeoutMicroSeconds = 0;
 80038b6:	4620      	mov	r0, r4
 80038b8:	e7a2      	b.n	8003800 <get_sequence_step_timeout+0x48>
 80038ba:	4620      	mov	r0, r4
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80038bc:	4625      	mov	r5, r4
 80038be:	e79f      	b.n	8003800 <get_sequence_step_timeout+0x48>

080038c0 <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 80038c0:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 80038c2:	2902      	cmp	r1, #2
{
 80038c4:	b085      	sub	sp, #20
 80038c6:	4605      	mov	r5, r0
 80038c8:	4617      	mov	r7, r2
	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 80038ca:	d81e      	bhi.n	800390a <set_sequence_step_timeout+0x4a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80038cc:	f10d 0205 	add.w	r2, sp, #5
 80038d0:	2100      	movs	r1, #0
 80038d2:	f7fe fae7 	bl	8001ea4 <VL53L0X_GetVcselPulsePeriod>
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 80038d6:	4604      	mov	r4, r0
 80038d8:	b9a0      	cbnz	r0, 8003904 <set_sequence_step_timeout+0x44>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 80038da:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80038de:	4639      	mov	r1, r7
 80038e0:	4628      	mov	r0, r5
 80038e2:	f7ff ff45 	bl	8003770 <VL53L0X_calc_timeout_mclks>
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 80038e6:	b283      	uxth	r3, r0
 80038e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
				MsrcEncodedTimeOut = 255;
			else
				MsrcEncodedTimeOut =
 80038ec:	bf9a      	itte	ls
 80038ee:	f100 32ff 	addls.w	r2, r0, #4294967295
 80038f2:	b2d2      	uxtbls	r2, r2
				MsrcEncodedTimeOut = 255;
 80038f4:	22ff      	movhi	r2, #255	; 0xff
					(uint8_t)MsrcRangeTimeOutMClks - 1;

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80038f6:	f8a5 20d8 	strh.w	r2, [r5, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
			Status = VL53L0X_WrByte(Dev,
 80038fa:	2146      	movs	r1, #70	; 0x46
 80038fc:	4628      	mov	r0, r5
 80038fe:	f000 fc6d 	bl	80041dc <VL53L0X_WrByte>
 8003902:	4604      	mov	r4, r0
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;

	}
	return Status;
}
 8003904:	4620      	mov	r0, r4
 8003906:	b005      	add	sp, #20
 8003908:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800390a:	2903      	cmp	r1, #3
 800390c:	d11f      	bne.n	800394e <set_sequence_step_timeout+0x8e>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800390e:	f10d 0205 	add.w	r2, sp, #5
 8003912:	2100      	movs	r1, #0
 8003914:	f7fe fac6 	bl	8001ea4 <VL53L0X_GetVcselPulsePeriod>
					VL53L0X_calc_timeout_mclks(Dev,
 8003918:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800391c:	4639      	mov	r1, r7
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800391e:	4604      	mov	r4, r0
					VL53L0X_calc_timeout_mclks(Dev,
 8003920:	4628      	mov	r0, r5
 8003922:	f7ff ff25 	bl	8003770 <VL53L0X_calc_timeout_mclks>
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 8003926:	b280      	uxth	r0, r0
 8003928:	f7ff ff0c 	bl	8003744 <VL53L0X_encode_timeout>
 800392c:	4602      	mov	r2, r0
 800392e:	f8ad 0006 	strh.w	r0, [sp, #6]
				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8003932:	f8a5 00d8 	strh.w	r0, [r5, #216]	; 0xd8
			if (Status == VL53L0X_ERROR_NONE) {
 8003936:	2c00      	cmp	r4, #0
 8003938:	d1e4      	bne.n	8003904 <set_sequence_step_timeout+0x44>
				Status = VL53L0X_WrWord(Dev,
 800393a:	2151      	movs	r1, #81	; 0x51
 800393c:	4628      	mov	r0, r5
 800393e:	f000 fc5a 	bl	80041f6 <VL53L0X_WrWord>
			if (Status == VL53L0X_ERROR_NONE) {
 8003942:	4604      	mov	r4, r0
 8003944:	2800      	cmp	r0, #0
 8003946:	d1dd      	bne.n	8003904 <set_sequence_step_timeout+0x44>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 8003948:	f8c5 70e4 	str.w	r7, [r5, #228]	; 0xe4
 800394c:	e7da      	b.n	8003904 <set_sequence_step_timeout+0x44>
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800394e:	2904      	cmp	r1, #4
 8003950:	d139      	bne.n	80039c6 <set_sequence_step_timeout+0x106>
			VL53L0X_GetSequenceStepEnables(Dev,
 8003952:	a902      	add	r1, sp, #8
 8003954:	f7fe faf9 	bl	8001f4a <VL53L0X_GetSequenceStepEnables>
			if (SchedulerSequenceSteps.PreRangeOn) {
 8003958:	f89d 600b 	ldrb.w	r6, [sp, #11]
 800395c:	b1b6      	cbz	r6, 800398c <set_sequence_step_timeout+0xcc>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800395e:	f10d 0205 	add.w	r2, sp, #5
 8003962:	2100      	movs	r1, #0
 8003964:	4628      	mov	r0, r5
 8003966:	f7fe fa9d 	bl	8001ea4 <VL53L0X_GetVcselPulsePeriod>
				if (Status == VL53L0X_ERROR_NONE) {
 800396a:	4604      	mov	r4, r0
 800396c:	2800      	cmp	r0, #0
 800396e:	d1c9      	bne.n	8003904 <set_sequence_step_timeout+0x44>
					Status = VL53L0X_RdWord(Dev, 0x51,
 8003970:	f10d 0206 	add.w	r2, sp, #6
 8003974:	2151      	movs	r1, #81	; 0x51
 8003976:	4628      	mov	r0, r5
 8003978:	f000 fc7d 	bl	8004276 <VL53L0X_RdWord>
 800397c:	4604      	mov	r4, r0
						VL53L0X_decode_timeout(
 800397e:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8003982:	f7ff feee 	bl	8003762 <VL53L0X_decode_timeout>
			if (Status == VL53L0X_ERROR_NONE) {
 8003986:	2c00      	cmp	r4, #0
 8003988:	d1bc      	bne.n	8003904 <set_sequence_step_timeout+0x44>
					PreRangeTimeOutMClks =
 800398a:	b286      	uxth	r6, r0
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800398c:	f10d 0205 	add.w	r2, sp, #5
 8003990:	2101      	movs	r1, #1
 8003992:	4628      	mov	r0, r5
 8003994:	f7fe fa86 	bl	8001ea4 <VL53L0X_GetVcselPulsePeriod>
			if (Status == VL53L0X_ERROR_NONE) {
 8003998:	4604      	mov	r4, r0
 800399a:	2800      	cmp	r0, #0
 800399c:	d1b2      	bne.n	8003904 <set_sequence_step_timeout+0x44>
				FinalRangeTimeOutMClks =
 800399e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80039a2:	4639      	mov	r1, r7
 80039a4:	4628      	mov	r0, r5
 80039a6:	f7ff fee3 	bl	8003770 <VL53L0X_calc_timeout_mclks>
				FinalRangeEncodedTimeOut =
 80039aa:	4430      	add	r0, r6
 80039ac:	f7ff feca 	bl	8003744 <VL53L0X_encode_timeout>
					Status = VL53L0X_WrWord(Dev, 0x71,
 80039b0:	2171      	movs	r1, #113	; 0x71
 80039b2:	4602      	mov	r2, r0
 80039b4:	4628      	mov	r0, r5
 80039b6:	f000 fc1e 	bl	80041f6 <VL53L0X_WrWord>
				if (Status == VL53L0X_ERROR_NONE) {
 80039ba:	4604      	mov	r4, r0
 80039bc:	2800      	cmp	r0, #0
 80039be:	d1a1      	bne.n	8003904 <set_sequence_step_timeout+0x44>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 80039c0:	f8c5 70dc 	str.w	r7, [r5, #220]	; 0xdc
 80039c4:	e79e      	b.n	8003904 <set_sequence_step_timeout+0x44>
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80039c6:	f06f 0403 	mvn.w	r4, #3
 80039ca:	e79b      	b.n	8003904 <set_sequence_step_timeout+0x44>

080039cc <VL53L0X_get_vcsel_pulse_period>:
	return Status;
}

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 80039cc:	b513      	push	{r0, r1, r4, lr}
 80039ce:	4614      	mov	r4, r2
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 80039d0:	b121      	cbz	r1, 80039dc <VL53L0X_get_vcsel_pulse_period+0x10>
 80039d2:	2901      	cmp	r1, #1
 80039d4:	d00f      	beq.n	80039f6 <VL53L0X_get_vcsel_pulse_period+0x2a>
		Status = VL53L0X_RdByte(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80039d6:	f06f 0003 	mvn.w	r0, #3
 80039da:	e00a      	b.n	80039f2 <VL53L0X_get_vcsel_pulse_period+0x26>
		Status = VL53L0X_RdByte(Dev,
 80039dc:	f10d 0207 	add.w	r2, sp, #7
 80039e0:	2150      	movs	r1, #80	; 0x50
		Status = VL53L0X_RdByte(Dev,
 80039e2:	f000 fc37 	bl	8004254 <VL53L0X_RdByte>
	}

	if (Status == VL53L0X_ERROR_NONE)
 80039e6:	b920      	cbnz	r0, 80039f2 <VL53L0X_get_vcsel_pulse_period+0x26>
	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 80039e8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80039ec:	3301      	adds	r3, #1
 80039ee:	005b      	lsls	r3, r3, #1
		*pVCSELPulsePeriodPCLK =
 80039f0:	7023      	strb	r3, [r4, #0]
			VL53L0X_decode_vcsel_period(vcsel_period_reg);

	return Status;
}
 80039f2:	b002      	add	sp, #8
 80039f4:	bd10      	pop	{r4, pc}
		Status = VL53L0X_RdByte(Dev,
 80039f6:	f10d 0207 	add.w	r2, sp, #7
 80039fa:	2170      	movs	r1, #112	; 0x70
 80039fc:	e7f1      	b.n	80039e2 <VL53L0X_get_vcsel_pulse_period+0x16>

080039fe <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 80039fe:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t MsrcOverheadMicroSeconds		= 660;
	uint32_t TccOverheadMicroSeconds		= 590;
	uint32_t DssOverheadMicroSeconds		= 690;
	uint32_t PreRangeOverheadMicroSeconds	= 660;
	uint32_t FinalRangeOverheadMicroSeconds = 550;
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8003a00:	2300      	movs	r3, #0
{
 8003a02:	b085      	sub	sp, #20
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8003a04:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003a08:	e88d 000c 	stmia.w	sp, {r2, r3}
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
	uint32_t SubTimeout = 0;

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 8003a0c:	f644 631f 	movw	r3, #19999	; 0x4e1f
 8003a10:	4299      	cmp	r1, r3
{
 8003a12:	4606      	mov	r6, r0
 8003a14:	460f      	mov	r7, r1
	if (MeasurementTimingBudgetMicroSeconds
 8003a16:	d804      	bhi.n	8003a22 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x24>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
		return Status;
 8003a18:	f06f 0503 	mvn.w	r5, #3
	}

	LOG_FUNCTION_END(Status);

	return Status;
}
 8003a1c:	4628      	mov	r0, r5
 8003a1e:	b005      	add	sp, #20
 8003a20:	bdf0      	pop	{r4, r5, r6, r7, pc}
	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8003a22:	a902      	add	r1, sp, #8
 8003a24:	f7fe fa91 	bl	8001f4a <VL53L0X_GetSequenceStepEnables>
	if (Status == VL53L0X_ERROR_NONE &&
 8003a28:	4605      	mov	r5, r0
 8003a2a:	2800      	cmp	r0, #0
 8003a2c:	d1f6      	bne.n	8003a1c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1e>
 8003a2e:	f89d 3008 	ldrb.w	r3, [sp, #8]
	FinalRangeTimingBudgetMicroSeconds =
 8003a32:	f6a7 3436 	subw	r4, r7, #2870	; 0xb36
	if (Status == VL53L0X_ERROR_NONE &&
 8003a36:	b92b      	cbnz	r3, 8003a44 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x46>
		(SchedulerSequenceSteps.TccOn  ||
 8003a38:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8003a3c:	b913      	cbnz	r3, 8003a44 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x46>
		SchedulerSequenceSteps.MsrcOn ||
 8003a3e:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8003a42:	b1fb      	cbz	r3, 8003a84 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x86>
		Status = get_sequence_step_timeout(Dev,
 8003a44:	466a      	mov	r2, sp
 8003a46:	2102      	movs	r1, #2
 8003a48:	4630      	mov	r0, r6
 8003a4a:	f7ff feb5 	bl	80037b8 <get_sequence_step_timeout>
		if (Status != VL53L0X_ERROR_NONE)
 8003a4e:	bba8      	cbnz	r0, 8003abc <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbe>
		if (SchedulerSequenceSteps.TccOn) {
 8003a50:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8003a54:	b12b      	cbz	r3, 8003a62 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x64>
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 8003a56:	9b00      	ldr	r3, [sp, #0]
 8003a58:	f203 234e 	addw	r3, r3, #590	; 0x24e
			if (SubTimeout <
 8003a5c:	429c      	cmp	r4, r3
 8003a5e:	d9db      	bls.n	8003a18 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1a>
				FinalRangeTimingBudgetMicroSeconds -=
 8003a60:	1ae4      	subs	r4, r4, r3
		if (SchedulerSequenceSteps.DssOn) {
 8003a62:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8003a66:	b933      	cbnz	r3, 8003a76 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x78>
		} else if (SchedulerSequenceSteps.MsrcOn) {
 8003a68:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8003a6c:	b153      	cbz	r3, 8003a84 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x86>
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 8003a6e:	9b00      	ldr	r3, [sp, #0]
 8003a70:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003a74:	e003      	b.n	8003a7e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x80>
			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 8003a76:	9b00      	ldr	r3, [sp, #0]
 8003a78:	f203 23b2 	addw	r3, r3, #690	; 0x2b2
 8003a7c:	005b      	lsls	r3, r3, #1
			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8003a7e:	42a3      	cmp	r3, r4
 8003a80:	d2ca      	bcs.n	8003a18 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1a>
							-= SubTimeout;
 8003a82:	1ae4      	subs	r4, r4, r3
	if (SchedulerSequenceSteps.PreRangeOn) {
 8003a84:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8003a88:	b15b      	cbz	r3, 8003aa2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xa4>
		Status = get_sequence_step_timeout(Dev,
 8003a8a:	aa01      	add	r2, sp, #4
 8003a8c:	2103      	movs	r1, #3
 8003a8e:	4630      	mov	r0, r6
 8003a90:	f7ff fe92 	bl	80037b8 <get_sequence_step_timeout>
		SubTimeout = PreRangeTimeoutMicroSeconds +
 8003a94:	9b01      	ldr	r3, [sp, #4]
 8003a96:	f503 7325 	add.w	r3, r3, #660	; 0x294
		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8003a9a:	42a3      	cmp	r3, r4
 8003a9c:	d2bc      	bcs.n	8003a18 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1a>
	if (Status == VL53L0X_ERROR_NONE &&
 8003a9e:	b968      	cbnz	r0, 8003abc <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbe>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 8003aa0:	1ae4      	subs	r4, r4, r3
	if (Status == VL53L0X_ERROR_NONE &&
 8003aa2:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d0b8      	beq.n	8003a1c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1e>
		Status = set_sequence_step_timeout(Dev,
 8003aaa:	f2a4 2226 	subw	r2, r4, #550	; 0x226
 8003aae:	2104      	movs	r1, #4
 8003ab0:	4630      	mov	r0, r6
 8003ab2:	f7ff ff05 	bl	80038c0 <set_sequence_step_timeout>
		VL53L0X_SETPARAMETERFIELD(Dev,
 8003ab6:	6177      	str	r7, [r6, #20]
		Status = set_sequence_step_timeout(Dev,
 8003ab8:	4605      	mov	r5, r0
 8003aba:	e7af      	b.n	8003a1c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1e>
 8003abc:	4605      	mov	r5, r0
 8003abe:	e7ad      	b.n	8003a1c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1e>

08003ac0 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8003ac0:	b570      	push	{r4, r5, r6, lr}
 8003ac2:	b086      	sub	sp, #24
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8003ac4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003ac8:	9302      	str	r3, [sp, #8]
	uint32_t MsrcOverheadMicroSeconds		= 660;
	uint32_t TccOverheadMicroSeconds		= 590;
	uint32_t DssOverheadMicroSeconds		= 690;
	uint32_t PreRangeOverheadMicroSeconds	= 660;
	uint32_t FinalRangeOverheadMicroSeconds = 550;
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8003aca:	2300      	movs	r3, #0
 8003acc:	9303      	str	r3, [sp, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 8003ace:	f640 3336 	movw	r3, #2870	; 0xb36
 8003ad2:	600b      	str	r3, [r1, #0]
{
 8003ad4:	460c      	mov	r4, r1

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8003ad6:	a904      	add	r1, sp, #16
{
 8003ad8:	4606      	mov	r6, r0
	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8003ada:	f7fe fa36 	bl	8001f4a <VL53L0X_GetSequenceStepEnables>

	if (Status != VL53L0X_ERROR_NONE) {
 8003ade:	4605      	mov	r5, r0
 8003ae0:	2800      	cmp	r0, #0
 8003ae2:	d136      	bne.n	8003b52 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x92>
		LOG_FUNCTION_END(Status);
		return Status;
	}


	if (SchedulerSequenceSteps.TccOn  ||
 8003ae4:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8003ae8:	b92b      	cbnz	r3, 8003af6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x36>
 8003aea:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8003aee:	b913      	cbnz	r3, 8003af6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x36>
		SchedulerSequenceSteps.MsrcOn ||
 8003af0:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8003af4:	b1cb      	cbz	r3, 8003b2a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6a>
		SchedulerSequenceSteps.DssOn) {

		Status = get_sequence_step_timeout(Dev,
 8003af6:	aa02      	add	r2, sp, #8
 8003af8:	2102      	movs	r1, #2
 8003afa:	4630      	mov	r0, r6
 8003afc:	f7ff fe5c 	bl	80037b8 <get_sequence_step_timeout>
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 8003b00:	2800      	cmp	r0, #0
 8003b02:	d140      	bne.n	8003b86 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xc6>
			if (SchedulerSequenceSteps.TccOn) {
 8003b04:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8003b08:	b12b      	cbz	r3, 8003b16 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x56>
				*pMeasurementTimingBudgetMicroSeconds +=
					MsrcDccTccTimeoutMicroSeconds +
 8003b0a:	9b02      	ldr	r3, [sp, #8]
 8003b0c:	f203 224e 	addw	r2, r3, #590	; 0x24e
				*pMeasurementTimingBudgetMicroSeconds +=
 8003b10:	6823      	ldr	r3, [r4, #0]
 8003b12:	4413      	add	r3, r2
 8003b14:	6023      	str	r3, [r4, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 8003b16:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8003b1a:	b1eb      	cbz	r3, 8003b58 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x98>
				*pMeasurementTimingBudgetMicroSeconds +=
				2 * (MsrcDccTccTimeoutMicroSeconds +
 8003b1c:	9b02      	ldr	r3, [sp, #8]
 8003b1e:	f203 22b2 	addw	r2, r3, #690	; 0x2b2
				*pMeasurementTimingBudgetMicroSeconds +=
 8003b22:	6823      	ldr	r3, [r4, #0]
 8003b24:	eb03 0342 	add.w	r3, r3, r2, lsl #1
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
				*pMeasurementTimingBudgetMicroSeconds +=
 8003b28:	6023      	str	r3, [r4, #0]
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
		if (SchedulerSequenceSteps.PreRangeOn) {
 8003b2a:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8003b2e:	b15b      	cbz	r3, 8003b48 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x88>
			Status = get_sequence_step_timeout(Dev,
 8003b30:	aa03      	add	r2, sp, #12
 8003b32:	2103      	movs	r1, #3
 8003b34:	4630      	mov	r0, r6
 8003b36:	f7ff fe3f 	bl	80037b8 <get_sequence_step_timeout>
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
				PreRangeTimeoutMicroSeconds +
 8003b3a:	9b03      	ldr	r3, [sp, #12]
 8003b3c:	f503 7225 	add.w	r2, r3, #660	; 0x294
			*pMeasurementTimingBudgetMicroSeconds +=
 8003b40:	6823      	ldr	r3, [r4, #0]
 8003b42:	4413      	add	r3, r2
 8003b44:	6023      	str	r3, [r4, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003b46:	b9f0      	cbnz	r0, 8003b86 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xc6>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 8003b48:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8003b4c:	b973      	cbnz	r3, 8003b6c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xac>
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
		VL53L0X_SETPARAMETERFIELD(Dev,
 8003b4e:	6823      	ldr	r3, [r4, #0]
 8003b50:	6173      	str	r3, [r6, #20]
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8003b52:	4628      	mov	r0, r5
 8003b54:	b006      	add	sp, #24
 8003b56:	bd70      	pop	{r4, r5, r6, pc}
			} else if (SchedulerSequenceSteps.MsrcOn) {
 8003b58:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d0e4      	beq.n	8003b2a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6a>
					MsrcDccTccTimeoutMicroSeconds +
 8003b60:	9b02      	ldr	r3, [sp, #8]
 8003b62:	f503 7225 	add.w	r2, r3, #660	; 0x294
				*pMeasurementTimingBudgetMicroSeconds +=
 8003b66:	6823      	ldr	r3, [r4, #0]
 8003b68:	4413      	add	r3, r2
 8003b6a:	e7dd      	b.n	8003b28 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x68>
			Status = get_sequence_step_timeout(Dev,
 8003b6c:	aa01      	add	r2, sp, #4
 8003b6e:	2104      	movs	r1, #4
 8003b70:	4630      	mov	r0, r6
 8003b72:	f7ff fe21 	bl	80037b8 <get_sequence_step_timeout>
				(FinalRangeTimeoutMicroSeconds +
 8003b76:	9b01      	ldr	r3, [sp, #4]
 8003b78:	f203 2226 	addw	r2, r3, #550	; 0x226
			*pMeasurementTimingBudgetMicroSeconds +=
 8003b7c:	6823      	ldr	r3, [r4, #0]
 8003b7e:	4413      	add	r3, r2
 8003b80:	6023      	str	r3, [r4, #0]
	if (Status == VL53L0X_ERROR_NONE) {
 8003b82:	2800      	cmp	r0, #0
 8003b84:	d0e3      	beq.n	8003b4e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x8e>
 8003b86:	4605      	mov	r5, r0
 8003b88:	e7e3      	b.n	8003b52 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x92>

08003b8a <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 8003b8a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 8003b8c:	2200      	movs	r2, #0
{
 8003b8e:	4606      	mov	r6, r0
 8003b90:	460d      	mov	r5, r1
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003b92:	4610      	mov	r0, r2
 8003b94:	af01      	add	r7, sp, #4

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8003b96:	5cab      	ldrb	r3, [r5, r2]
 8003b98:	eb05 0e02 	add.w	lr, r5, r2
 8003b9c:	b103      	cbz	r3, 8003ba0 <VL53L0X_load_tuning_settings+0x16>
 8003b9e:	b108      	cbz	r0, 8003ba4 <VL53L0X_load_tuning_settings+0x1a>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8003ba0:	b003      	add	sp, #12
 8003ba2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (NumberOfWrites == 0xFF) {
 8003ba4:	2bff      	cmp	r3, #255	; 0xff
		Index++;
 8003ba6:	f102 0401 	add.w	r4, r2, #1
		if (NumberOfWrites == 0xFF) {
 8003baa:	d12c      	bne.n	8003c06 <VL53L0X_load_tuning_settings+0x7c>
			SelectParam = *(pTuningSettingBuffer + Index);
 8003bac:	5d2b      	ldrb	r3, [r5, r4]
			Index++;
 8003bae:	1c94      	adds	r4, r2, #2
			switch (SelectParam) {
 8003bb0:	2b03      	cmp	r3, #3
 8003bb2:	d83a      	bhi.n	8003c2a <VL53L0X_load_tuning_settings+0xa0>
 8003bb4:	e8df f003 	tbb	[pc, r3]
 8003bb8:	1e150c02 	.word	0x1e150c02
				msb = *(pTuningSettingBuffer + Index);
 8003bbc:	5d29      	ldrb	r1, [r5, r4]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8003bbe:	f89e 3003 	ldrb.w	r3, [lr, #3]
 8003bc2:	eb03 2301 	add.w	r3, r3, r1, lsl #8
				Index++;
 8003bc6:	1d14      	adds	r4, r2, #4
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 8003bc8:	f8a6 3134 	strh.w	r3, [r6, #308]	; 0x134
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8003bcc:	4622      	mov	r2, r4
 8003bce:	e7e2      	b.n	8003b96 <VL53L0X_load_tuning_settings+0xc>
				msb = *(pTuningSettingBuffer + Index);
 8003bd0:	5d29      	ldrb	r1, [r5, r4]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8003bd2:	f89e 3003 	ldrb.w	r3, [lr, #3]
 8003bd6:	eb03 2301 	add.w	r3, r3, r1, lsl #8
				Index++;
 8003bda:	1d14      	adds	r4, r2, #4
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 8003bdc:	f8a6 3136 	strh.w	r3, [r6, #310]	; 0x136
				break;
 8003be0:	e7f4      	b.n	8003bcc <VL53L0X_load_tuning_settings+0x42>
				msb = *(pTuningSettingBuffer + Index);
 8003be2:	5d29      	ldrb	r1, [r5, r4]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8003be4:	f89e 3003 	ldrb.w	r3, [lr, #3]
 8003be8:	eb03 2301 	add.w	r3, r3, r1, lsl #8
				Index++;
 8003bec:	1d14      	adds	r4, r2, #4
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 8003bee:	f8a6 3138 	strh.w	r3, [r6, #312]	; 0x138
				break;
 8003bf2:	e7eb      	b.n	8003bcc <VL53L0X_load_tuning_settings+0x42>
				msb = *(pTuningSettingBuffer + Index);
 8003bf4:	5d29      	ldrb	r1, [r5, r4]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8003bf6:	f89e 3003 	ldrb.w	r3, [lr, #3]
 8003bfa:	eb03 2301 	add.w	r3, r3, r1, lsl #8
				Index++;
 8003bfe:	1d14      	adds	r4, r2, #4
				PALDevDataSet(Dev, targetRefRate, Temp16);
 8003c00:	f8a6 313c 	strh.w	r3, [r6, #316]	; 0x13c
				break;
 8003c04:	e7e2      	b.n	8003bcc <VL53L0X_load_tuning_settings+0x42>
		} else if (NumberOfWrites <= 4) {
 8003c06:	2b04      	cmp	r3, #4
 8003c08:	d80f      	bhi.n	8003c2a <VL53L0X_load_tuning_settings+0xa0>
			Address = *(pTuningSettingBuffer + Index);
 8003c0a:	5d29      	ldrb	r1, [r5, r4]
			Index++;
 8003c0c:	3202      	adds	r2, #2
			for (i = 0; i < NumberOfWrites; i++) {
 8003c0e:	4298      	cmp	r0, r3
 8003c10:	db05      	blt.n	8003c1e <VL53L0X_load_tuning_settings+0x94>
 8003c12:	18d4      	adds	r4, r2, r3
			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 8003c14:	4630      	mov	r0, r6
 8003c16:	463a      	mov	r2, r7
 8003c18:	f000 fad0 	bl	80041bc <VL53L0X_WriteMulti>
 8003c1c:	e7d6      	b.n	8003bcc <VL53L0X_load_tuning_settings+0x42>
				localBuffer[i] = *(pTuningSettingBuffer +
 8003c1e:	eb0e 0400 	add.w	r4, lr, r0
 8003c22:	78a4      	ldrb	r4, [r4, #2]
 8003c24:	543c      	strb	r4, [r7, r0]
			for (i = 0; i < NumberOfWrites; i++) {
 8003c26:	3001      	adds	r0, #1
 8003c28:	e7f1      	b.n	8003c0e <VL53L0X_load_tuning_settings+0x84>
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8003c2a:	f06f 0003 	mvn.w	r0, #3
 8003c2e:	e7cd      	b.n	8003bcc <VL53L0X_load_tuning_settings+0x42>

08003c30 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 8003c30:	b573      	push	{r0, r1, r4, r5, r6, lr}

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 8003c32:	2300      	movs	r3, #0
{
 8003c34:	460e      	mov	r6, r1
	*ptotal_xtalk_rate_mcps = 0;
 8003c36:	6013      	str	r3, [r2, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 8003c38:	f10d 0107 	add.w	r1, sp, #7
{
 8003c3c:	4605      	mov	r5, r0
 8003c3e:	4614      	mov	r4, r2
	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 8003c40:	f7fe f9b9 	bl	8001fb6 <VL53L0X_GetXTalkCompensationEnable>
	if (Status == VL53L0X_ERROR_NONE) {
 8003c44:	b940      	cbnz	r0, 8003c58 <VL53L0X_get_total_xtalk_rate+0x28>

		if (xtalkCompEnable) {
 8003c46:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003c4a:	b12b      	cbz	r3, 8003c58 <VL53L0X_get_total_xtalk_rate+0x28>
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 8003c4c:	8ab2      	ldrh	r2, [r6, #20]
			totalXtalkMegaCps =
 8003c4e:	6a2b      	ldr	r3, [r5, #32]
 8003c50:	4353      	muls	r3, r2
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 8003c52:	3380      	adds	r3, #128	; 0x80
 8003c54:	0a1b      	lsrs	r3, r3, #8
			*ptotal_xtalk_rate_mcps =
 8003c56:	6023      	str	r3, [r4, #0]
		}
	}

	return Status;
}
 8003c58:	b002      	add	sp, #8
 8003c5a:	bd70      	pop	{r4, r5, r6, pc}

08003c5c <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 8003c5c:	b513      	push	{r0, r1, r4, lr}
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 8003c5e:	68cb      	ldr	r3, [r1, #12]
	*ptotal_signal_rate_mcps =
 8003c60:	6013      	str	r3, [r2, #0]
{
 8003c62:	4614      	mov	r4, r2

	Status = VL53L0X_get_total_xtalk_rate(
 8003c64:	aa01      	add	r2, sp, #4
 8003c66:	f7ff ffe3 	bl	8003c30 <VL53L0X_get_total_xtalk_rate>
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 8003c6a:	b918      	cbnz	r0, 8003c74 <VL53L0X_get_total_signal_rate+0x18>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 8003c6c:	6823      	ldr	r3, [r4, #0]
 8003c6e:	9a01      	ldr	r2, [sp, #4]
 8003c70:	4413      	add	r3, r2
 8003c72:	6023      	str	r3, [r4, #0]

	return Status;
}
 8003c74:	b002      	add	sp, #8
 8003c76:	bd10      	pop	{r4, pc}

08003c78 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 8003c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
 8003c7a:	f8b0 4154 	ldrh.w	r4, [r0, #340]	; 0x154

	dmaxCalSignalRateRtn_mcps =
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 8003c7e:	f8d0 5158 	ldr.w	r5, [r0, #344]	; 0x158
{
 8003c82:	9e07      	ldr	r6, [sp, #28]
 8003c84:	9f08      	ldr	r7, [sp, #32]
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 8003c86:	4365      	muls	r5, r4

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 8003c88:	3580      	adds	r5, #128	; 0x80
 8003c8a:	0a2d      	lsrs	r5, r5, #8
	SignalAt0mm *= dmaxCalRange_mm;
 8003c8c:	4365      	muls	r5, r4

	minSignalNeeded_p1 = 0;
	if (totalCorrSignalRate_mcps > 0) {
 8003c8e:	b152      	cbz	r2, 8003ca6 <VL53L0X_calc_dmax+0x2e>
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 8003c90:	0854      	lsrs	r4, r2, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 8003c92:	eb04 2481 	add.w	r4, r4, r1, lsl #10

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 8003c96:	fbb4 f4f2 	udiv	r4, r4, r2

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 8003c9a:	eb04 0444 	add.w	r4, r4, r4, lsl #1

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 8003c9e:	4364      	muls	r4, r4

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 8003ca0:	f504 4400 	add.w	r4, r4, #32768	; 0x8000
 8003ca4:	0c22      	lsrs	r2, r4, #16
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 8003ca6:	9c06      	ldr	r4, [sp, #24]
 8003ca8:	435c      	muls	r4, r3
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 8003caa:	f506 4100 	add.w	r1, r6, #32768	; 0x8000
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 8003cae:	f504 4400 	add.w	r4, r4, #32768	; 0x8000
 8003cb2:	0c24      	lsrs	r4, r4, #16
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 8003cb4:	0c09      	lsrs	r1, r1, #16
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 8003cb6:	fb04 f304 	mul.w	r3, r4, r4
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 8003cba:	3103      	adds	r1, #3
 8003cbc:	2406      	movs	r4, #6
 8003cbe:	fbb1 f1f4 	udiv	r1, r1, r4
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 8003cc2:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3

	if (sigmaEstP2Tmp > 0xffff) {
 8003cc6:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 8003cca:	bf3f      	itttt	cc
 8003ccc:	3603      	addcc	r6, #3
 8003cce:	fbb6 f6f4 	udivcc	r6, r6, r4
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 8003cd2:	ebc6 06c6 	rsbcc	r6, r6, r6, lsl #3

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 8003cd6:	f506 4100 	addcc.w	r1, r6, #32768	; 0x8000
 8003cda:	bf36      	itet	cc
 8003cdc:	0c0c      	lsrcc	r4, r1, #16
		minSignalNeeded_p3 = 0xfff00000;
 8003cde:	4918      	ldrcs	r1, [pc, #96]	; (8003d40 <VL53L0X_calc_dmax+0xc8>)

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 8003ce0:	fb04 f104 	mulcc.w	r1, r4, r4
	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 8003ce4:	f105 0020 	add.w	r0, r5, #32
	minSignalNeeded += (peakVcselDuration_us/2);
 8003ce8:	eb03 0457 	add.w	r4, r3, r7, lsr #1
 8003cec:	440c      	add	r4, r1
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 8003cee:	0980      	lsrs	r0, r0, #6
	minSignalNeeded /= peakVcselDuration_us;
 8003cf0:	fbb4 f4f7 	udiv	r4, r4, r7
	minSignalNeeded <<= 14;
 8003cf4:	03a4      	lsls	r4, r4, #14
	minSignalNeeded /= minSignalNeeded_p4;
 8003cf6:	23fe      	movs	r3, #254	; 0xfe
	minSignalNeeded += (minSignalNeeded_p4/2);
 8003cf8:	347f      	adds	r4, #127	; 0x7f
	minSignalNeeded /= minSignalNeeded_p4;
 8003cfa:	fbb4 f4f3 	udiv	r4, r4, r3
	minSignalNeeded *= minSignalNeeded_p1;
 8003cfe:	4354      	muls	r4, r2
	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 8003d00:	f7ff fa3f 	bl	8003182 <VL53L0X_isqrt>
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8003d04:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8003d08:	f504 74fa 	add.w	r4, r4, #500	; 0x1f4
 8003d0c:	fbb4 f4f6 	udiv	r4, r4, r6
	minSignalNeeded <<= 4;
 8003d10:	0124      	lsls	r4, r4, #4
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8003d12:	f504 74fa 	add.w	r4, r4, #500	; 0x1f4
	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 8003d16:	4607      	mov	r7, r0
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8003d18:	fbb4 f6f6 	udiv	r6, r4, r6

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 8003d1c:	b136      	cbz	r6, 8003d2c <VL53L0X_calc_dmax+0xb4>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 8003d1e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003d22:	fbb4 f4f3 	udiv	r4, r4, r3
 8003d26:	442c      	add	r4, r5
 8003d28:	fbb4 f6f6 	udiv	r6, r4, r6
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 8003d2c:	4630      	mov	r0, r6
 8003d2e:	f7ff fa28 	bl	8003182 <VL53L0X_isqrt>
 8003d32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d34:	4287      	cmp	r7, r0
 8003d36:	bf94      	ite	ls
 8003d38:	601f      	strls	r7, [r3, #0]
 8003d3a:	6018      	strhi	r0, [r3, #0]
		*pdmax_mm = dmaxAmbient;

	LOG_FUNCTION_END(Status);

	return Status;
}
 8003d3c:	2000      	movs	r0, #0
 8003d3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d40:	fff00000 	.word	0xfff00000

08003d44 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 8003d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d48:	b08f      	sub	sp, #60	; 0x3c
 8003d4a:	4605      	mov	r5, r0
 8003d4c:	9309      	str	r3, [sp, #36]	; 0x24
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 8003d4e:	6a03      	ldr	r3, [r0, #32]
{
 8003d50:	9208      	str	r2, [sp, #32]
 8003d52:	4689      	mov	r9, r1
	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 8003d54:	930c      	str	r3, [sp, #48]	; 0x30

	correctedSignalRate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 8003d56:	aa0d      	add	r2, sp, #52	; 0x34
	correctedSignalRate_mcps =
 8003d58:	68cb      	ldr	r3, [r1, #12]
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 8003d5a:	690e      	ldr	r6, [r1, #16]
	correctedSignalRate_mcps =
 8003d5c:	930a      	str	r3, [sp, #40]	; 0x28
	Status = VL53L0X_get_total_signal_rate(
 8003d5e:	f7ff ff7d 	bl	8003c5c <VL53L0X_get_total_signal_rate>
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 8003d62:	aa0c      	add	r2, sp, #48	; 0x30
 8003d64:	4649      	mov	r1, r9
 8003d66:	4628      	mov	r0, r5
 8003d68:	f7ff ff62 	bl	8003c30 <VL53L0X_get_total_xtalk_rate>
	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
		xTalkCompRate_kcps = cMaxXTalk_kcps;

	if (Status == VL53L0X_ERROR_NONE) {
 8003d6c:	4683      	mov	fp, r0
 8003d6e:	bb98      	cbnz	r0, 8003dd8 <VL53L0X_calc_sigma_estimate+0x94>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8003d70:	f8d5 30dc 	ldr.w	r3, [r5, #220]	; 0xdc
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8003d74:	f895 40e0 	ldrb.w	r4, [r5, #224]	; 0xe0
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8003d78:	9305      	str	r3, [sp, #20]
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8003d7a:	4622      	mov	r2, r4
 8003d7c:	4619      	mov	r1, r3
 8003d7e:	4628      	mov	r0, r5
 8003d80:	f7ff fcf6 	bl	8003770 <VL53L0X_calc_timeout_mclks>
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8003d84:	f8d5 30e4 	ldr.w	r3, [r5, #228]	; 0xe4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8003d88:	f895 20e8 	ldrb.w	r2, [r5, #232]	; 0xe8
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8003d8c:	9306      	str	r3, [sp, #24]
		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8003d8e:	4619      	mov	r1, r3
		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8003d90:	4607      	mov	r7, r0
		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8003d92:	4628      	mov	r0, r5
 8003d94:	f7ff fcec 	bl	8003770 <VL53L0X_calc_timeout_mclks>
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 8003d98:	9b0d      	ldr	r3, [sp, #52]	; 0x34
	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 8003d9a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003d9c:	920b      	str	r2, [sp, #44]	; 0x2c
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 8003d9e:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
		if (finalRangeVcselPCLKS == 8)
 8003da2:	2c08      	cmp	r4, #8
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 8003da4:	fb08 f403 	mul.w	r4, r8, r3
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 8003da8:	f504 4400 	add.w	r4, r4, #32768	; 0x8000
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
		peakVcselDuration_us *= cPllPeriod_ps;
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 8003dac:	f103 0380 	add.w	r3, r3, #128	; 0x80

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 8003db0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
		vcselWidth = 3;
 8003db4:	bf0c      	ite	eq
 8003db6:	2102      	moveq	r1, #2
 8003db8:	2103      	movne	r1, #3
	if (Status != VL53L0X_ERROR_NONE) {
		LOG_FUNCTION_END(Status);
		return Status;
	}

	if (peakSignalRate_kcps == 0) {
 8003dba:	ea5f 4e14 	movs.w	lr, r4, lsr #16
		totalSignalRate_mcps <<= 8;
 8003dbe:	9207      	str	r2, [sp, #28]
 8003dc0:	920d      	str	r2, [sp, #52]	; 0x34
 8003dc2:	f8df a194 	ldr.w	sl, [pc, #404]	; 8003f58 <VL53L0X_calc_sigma_estimate+0x214>
	if (peakSignalRate_kcps == 0) {
 8003dc6:	d10b      	bne.n	8003de0 <VL53L0X_calc_sigma_estimate+0x9c>
		*pSigmaEstimate = cSigmaEstMax;
 8003dc8:	9b08      	ldr	r3, [sp, #32]
 8003dca:	f8c3 a000 	str.w	sl, [r3]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
		*pDmax_mm = 0;
 8003dce:	9b09      	ldr	r3, [sp, #36]	; 0x24
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 8003dd0:	f8c5 a140 	str.w	sl, [r5, #320]	; 0x140
		*pDmax_mm = 0;
 8003dd4:	f8c3 b000 	str.w	fp, [r3]
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8003dd8:	4658      	mov	r0, fp
 8003dda:	b00f      	add	sp, #60	; 0x3c
 8003ddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 8003de0:	4438      	add	r0, r7
		peakVcselDuration_us = vcselWidth * 2048 *
 8003de2:	02c0      	lsls	r0, r0, #11
 8003de4:	4341      	muls	r1, r0
		peakVcselDuration_us *= cPllPeriod_ps;
 8003de6:	f240 6777 	movw	r7, #1655	; 0x677
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 8003dea:	f8df b170 	ldr.w	fp, [pc, #368]	; 8003f5c <VL53L0X_calc_sigma_estimate+0x218>
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8003dee:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 8003df2:	0a1b      	lsrs	r3, r3, #8
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8003df4:	fbb1 f1f8 	udiv	r1, r1, r8
		peakVcselDuration_us *= cPllPeriod_ps;
 8003df8:	434f      	muls	r7, r1
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 8003dfa:	fb08 f606 	mul.w	r6, r8, r6
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8003dfe:	f507 77fa 	add.w	r7, r7, #500	; 0x1f4
 8003e02:	fbb7 f7f8 	udiv	r7, r7, r8
		vcselTotalEventsRtn = totalSignalRate_mcps *
 8003e06:	437b      	muls	r3, r7
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 8003e08:	ea06 060b 	and.w	r6, r6, fp
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 8003e0c:	3380      	adds	r3, #128	; 0x80
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 8003e0e:	fbb6 fefe 	udiv	lr, r6, lr
 8003e12:	4e4f      	ldr	r6, [pc, #316]	; (8003f50 <VL53L0X_calc_sigma_estimate+0x20c>)
		if (vcselTotalEventsRtn < 1)
 8003e14:	0a1b      	lsrs	r3, r3, #8
			vcselTotalEventsRtn = 1;
 8003e16:	bf08      	it	eq
 8003e18:	2301      	moveq	r3, #1
		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 8003e1a:	200c      	movs	r0, #12
 8003e1c:	45b6      	cmp	lr, r6
 8003e1e:	bf28      	it	cs
 8003e20:	46b6      	movcs	lr, r6
 8003e22:	4358      	muls	r0, r3
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 8003e24:	f44f 7616 	mov.w	r6, #600	; 0x258
 8003e28:	fb06 f60e 	mul.w	r6, r6, lr
		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 8003e2c:	f7ff f9a9 	bl	8003182 <VL53L0X_isqrt>
	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 8003e30:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 8003e32:	f8b9 3008 	ldrh.w	r3, [r9, #8]
		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 8003e36:	0041      	lsls	r1, r0, #1
	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 8003e38:	fb08 f002 	mul.w	r0, r8, r2
			2 * xTalkCompRate_kcps) + 500)/1000;
 8003e3c:	f5b0 1f48 	cmp.w	r0, #3276800	; 0x320000
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8003e40:	ea04 0b0b 	and.w	fp, r4, fp
 8003e44:	f50b 7bfa 	add.w	fp, fp, #500	; 0x1f4
			2 * xTalkCompRate_kcps) + 500)/1000;
 8003e48:	bf28      	it	cs
 8003e4a:	f44f 1048 	movcs.w	r0, #3276800	; 0x320000
 8003e4e:	ebab 0040 	sub.w	r0, fp, r0, lsl #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8003e52:	fbb0 f0f8 	udiv	r0, r0, r8
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 8003e56:	fbbb f8f8 	udiv	r8, fp, r8
		diff1_mcps <<= 8;
 8003e5a:	0200      	lsls	r0, r0, #8
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 8003e5c:	fbb0 f8f8 	udiv	r8, r0, r8
		if(pRangingMeasurementData->RangeStatus != 0){
 8003e60:	f899 0018 	ldrb.w	r0, [r9, #24]
 8003e64:	2800      	cmp	r0, #0
 8003e66:	d170      	bne.n	8003f4a <VL53L0X_calc_sigma_estimate+0x206>
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 8003e68:	4c3a      	ldr	r4, [pc, #232]	; (8003f54 <VL53L0X_calc_sigma_estimate+0x210>)
		xTalkCorrection <<= 8;
 8003e6a:	ea4f 2808 	mov.w	r8, r8, lsl #8
			pwMult *= ((1 << 16) - xTalkCorrection);
 8003e6e:	f5c8 3880 	rsb	r8, r8, #65536	; 0x10000
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 8003e72:	435c      	muls	r4, r3
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 8003e74:	f241 235c 	movw	r3, #4700	; 0x125c
 8003e78:	fbb4 f4f3 	udiv	r4, r4, r3
			pwMult *= ((1 << 16) - xTalkCorrection);
 8003e7c:	fb04 f408 	mul.w	r4, r4, r8
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 8003e80:	f504 4400 	add.w	r4, r4, #32768	; 0x8000
 8003e84:	0c24      	lsrs	r4, r4, #16
			pwMult += (1 << 16);
 8003e86:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
			pwMult >>= 1;
 8003e8a:	0864      	lsrs	r4, r4, #1
			pwMult = pwMult * pwMult;
 8003e8c:	4364      	muls	r4, r4
			pwMult >>= 14;
 8003e8e:	0ba4      	lsrs	r4, r4, #14
		sqr1 = pwMult * sigmaEstimateP1;
 8003e90:	f44f 7848 	mov.w	r8, #800	; 0x320
 8003e94:	fb08 f004 	mul.w	r0, r8, r4
		sqr2 = (sqr2 + 0x8000) >> 16;
 8003e98:	f506 4300 	add.w	r3, r6, #32768	; 0x8000
		sqr1 = (sqr1 + 0x8000) >> 16;
 8003e9c:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
		sqr2 = (sqr2 + 0x8000) >> 16;
 8003ea0:	0c1b      	lsrs	r3, r3, #16
		sqr2 *= sqr2;
 8003ea2:	435b      	muls	r3, r3
		sqr1 = (sqr1 + 0x8000) >> 16;
 8003ea4:	0c00      	lsrs	r0, r0, #16
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 8003ea6:	fb00 3000 	mla	r0, r0, r0, r3
 8003eaa:	910b      	str	r1, [sp, #44]	; 0x2c
 8003eac:	f7ff f969 	bl	8003182 <VL53L0X_isqrt>
		sqrtResult_centi_ns <<= 16;
 8003eb0:	ea4f 4900 	mov.w	r9, r0, lsl #16
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 8003eb4:	990b      	ldr	r1, [sp, #44]	; 0x2c
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 8003eb6:	9a06      	ldr	r2, [sp, #24]
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 8003eb8:	2064      	movs	r0, #100	; 0x64
		sigmaEstRtn		 += 5000;
 8003eba:	f640 33b5 	movw	r3, #2997	; 0xbb5
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 8003ebe:	f109 0932 	add.w	r9, r9, #50	; 0x32
 8003ec2:	fbb9 f9f0 	udiv	r9, r9, r0
 8003ec6:	fbb9 f9f1 	udiv	r9, r9, r1
		sigmaEstRtn		 += 5000;
 8003eca:	f241 3188 	movw	r1, #5000	; 0x1388
 8003ece:	fb03 1909 	mla	r9, r3, r9, r1
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 8003ed2:	9b05      	ldr	r3, [sp, #20]
 8003ed4:	4413      	add	r3, r2
 8003ed6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 8003eda:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
		sigmaEstRtn		 /= 10000;
 8003ede:	f242 7110 	movw	r1, #10000	; 0x2710
		finalRangeIntegrationTimeMilliSecs =
 8003ee2:	fbb3 f0fb 	udiv	r0, r3, fp
		sigmaEstRtn		 /= 10000;
 8003ee6:	fbb9 f9f1 	udiv	r9, r9, r1
				finalRangeIntegrationTimeMilliSecs/2)/
 8003eea:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8003eee:	f5b9 4f70 	cmp.w	r9, #61440	; 0xf000
 8003ef2:	fbb3 f1f1 	udiv	r1, r3, r1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 8003ef6:	f501 11c8 	add.w	r1, r1, #1638400	; 0x190000
		sigmaEstRef =
 8003efa:	fbb1 f0f0 	udiv	r0, r1, r0
 8003efe:	bf28      	it	cs
 8003f00:	f44f 4970 	movcs.w	r9, #61440	; 0xf000
 8003f04:	f7ff f93d 	bl	8003182 <VL53L0X_isqrt>
		sigmaEstRef <<= 8;
 8003f08:	0200      	lsls	r0, r0, #8
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 8003f0a:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
 8003f0e:	fbb0 f0fb 	udiv	r0, r0, fp
		sqr2 = sigmaEstRef * sigmaEstRef;
 8003f12:	4340      	muls	r0, r0
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 8003f14:	fb09 0009 	mla	r0, r9, r9, r0
 8003f18:	f7ff f933 	bl	8003182 <VL53L0X_isqrt>
		sigmaEstimate	 = 1000 * sqrtResult;
 8003f1c:	fb0b f200 	mul.w	r2, fp, r0
 8003f20:	4552      	cmp	r2, sl
		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 8003f22:	9b08      	ldr	r3, [sp, #32]
		Status = VL53L0X_calc_dmax(
 8003f24:	9907      	ldr	r1, [sp, #28]
 8003f26:	bf28      	it	cs
 8003f28:	4652      	movcs	r2, sl
		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 8003f2a:	601a      	str	r2, [r3, #0]
		Status = VL53L0X_calc_dmax(
 8003f2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 8003f2e:	f8c5 2140 	str.w	r2, [r5, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 8003f32:	9303      	str	r3, [sp, #12]
 8003f34:	9702      	str	r7, [sp, #8]
 8003f36:	9601      	str	r6, [sp, #4]
 8003f38:	f8cd 8000 	str.w	r8, [sp]
 8003f3c:	4623      	mov	r3, r4
 8003f3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003f40:	4628      	mov	r0, r5
 8003f42:	f7ff fe99 	bl	8003c78 <VL53L0X_calc_dmax>
 8003f46:	4683      	mov	fp, r0
 8003f48:	e746      	b.n	8003dd8 <VL53L0X_calc_sigma_estimate+0x94>
			pwMult = 1 << 16;
 8003f4a:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 8003f4e:	e79f      	b.n	8003e90 <VL53L0X_calc_sigma_estimate+0x14c>
 8003f50:	00666666 	.word	0x00666666
 8003f54:	0006999a 	.word	0x0006999a
 8003f58:	028f87ae 	.word	0x028f87ae
 8003f5c:	ffff0000 	.word	0xffff0000

08003f60 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 8003f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f64:	b08b      	sub	sp, #44	; 0x2c
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 8003f66:	ea4f 0ad1 	mov.w	sl, r1, lsr #3
{
 8003f6a:	9201      	str	r2, [sp, #4]
	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 8003f6c:	f00a 080f 	and.w	r8, sl, #15

	if (DeviceRangeStatusInternal == 0 ||
 8003f70:	f24f 02a1 	movw	r2, #61601	; 0xf0a1
	uint8_t SigmaLimitCheckEnable = 0;
 8003f74:	f04f 0900 	mov.w	r9, #0
	if (DeviceRangeStatusInternal == 0 ||
 8003f78:	fa22 f208 	lsr.w	r2, r2, r8
{
 8003f7c:	469b      	mov	fp, r3
	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8003f7e:	4649      	mov	r1, r9
		NoneFlag = 1;
 8003f80:	f002 0301 	and.w	r3, r2, #1
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8003f84:	f10d 020e 	add.w	r2, sp, #14
{
 8003f88:	4605      	mov	r5, r0
 8003f8a:	9f15      	ldr	r7, [sp, #84]	; 0x54
	uint8_t SigmaLimitCheckEnable = 0;
 8003f8c:	f88d 900e 	strb.w	r9, [sp, #14]
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 8003f90:	f88d 900f 	strb.w	r9, [sp, #15]
	uint8_t SignalRefClipLimitCheckEnable = 0;
 8003f94:	f88d 9010 	strb.w	r9, [sp, #16]
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 8003f98:	f88d 9011 	strb.w	r9, [sp, #17]
	uint16_t tmpWord = 0;
 8003f9c:	f8ad 9012 	strh.w	r9, [sp, #18]
	uint32_t Dmax_mm = 0;
 8003fa0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
		NoneFlag = 1;
 8003fa4:	9300      	str	r3, [sp, #0]
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8003fa6:	f7fe f860 	bl	800206a <VL53L0X_GetLimitCheckEnable>
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 8003faa:	f89d 400e 	ldrb.w	r4, [sp, #14]
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8003fae:	4606      	mov	r6, r0
	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 8003fb0:	b1d4      	cbz	r4, 8003fe8 <VL53L0X_get_pal_range_status+0x88>
 8003fb2:	2800      	cmp	r0, #0
 8003fb4:	f040 80a5 	bne.w	8004102 <VL53L0X_get_pal_range_status+0x1a2>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 8003fb8:	ab09      	add	r3, sp, #36	; 0x24
 8003fba:	aa05      	add	r2, sp, #20
 8003fbc:	9914      	ldr	r1, [sp, #80]	; 0x50
 8003fbe:	4628      	mov	r0, r5
 8003fc0:	f7ff fec0 	bl	8003d44 <VL53L0X_calc_sigma_estimate>
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 8003fc4:	2800      	cmp	r0, #0
 8003fc6:	f040 809e 	bne.w	8004106 <VL53L0X_get_pal_range_status+0x1a6>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 8003fca:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8003fcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fce:	8153      	strh	r3, [r2, #10]

		if (Status == VL53L0X_ERROR_NONE) {
			Status = VL53L0X_GetLimitCheckValue(Dev,
 8003fd0:	4601      	mov	r1, r0
 8003fd2:	aa06      	add	r2, sp, #24
 8003fd4:	4628      	mov	r0, r5
 8003fd6:	f7fe f883 	bl	80020e0 <VL53L0X_GetLimitCheckValue>
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 8003fda:	9c06      	ldr	r4, [sp, #24]
 8003fdc:	b124      	cbz	r4, 8003fe8 <VL53L0X_get_pal_range_status+0x88>
	uint8_t SigmaLimitflag = 0;
 8003fde:	9b05      	ldr	r3, [sp, #20]
 8003fe0:	429c      	cmp	r4, r3
 8003fe2:	bf2c      	ite	cs
 8003fe4:	2400      	movcs	r4, #0
 8003fe6:	2401      	movcc	r4, #1

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8003fe8:	b920      	cbnz	r0, 8003ff4 <VL53L0X_get_pal_range_status+0x94>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8003fea:	aa04      	add	r2, sp, #16
 8003fec:	2102      	movs	r1, #2
 8003fee:	4628      	mov	r0, r5
 8003ff0:	f7fe f83b 	bl	800206a <VL53L0X_GetLimitCheckEnable>
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 8003ff4:	f89d 9010 	ldrb.w	r9, [sp, #16]
 8003ff8:	f1b9 0f00 	cmp.w	r9, #0
 8003ffc:	d028      	beq.n	8004050 <VL53L0X_get_pal_range_status+0xf0>
 8003ffe:	2800      	cmp	r0, #0
 8004000:	f040 8085 	bne.w	800410e <VL53L0X_get_pal_range_status+0x1ae>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8004004:	aa07      	add	r2, sp, #28
 8004006:	2102      	movs	r1, #2
 8004008:	4628      	mov	r0, r5
 800400a:	f7fe f869 	bl	80020e0 <VL53L0X_GetLimitCheckValue>
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 800400e:	b988      	cbnz	r0, 8004034 <VL53L0X_get_pal_range_status+0xd4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8004010:	2201      	movs	r2, #1
 8004012:	21ff      	movs	r1, #255	; 0xff
 8004014:	4628      	mov	r0, r5
 8004016:	f000 f8e1 	bl	80041dc <VL53L0X_WrByte>

		if (Status == VL53L0X_ERROR_NONE)
 800401a:	b958      	cbnz	r0, 8004034 <VL53L0X_get_pal_range_status+0xd4>
			Status = VL53L0X_RdWord(Dev,
 800401c:	f10d 0212 	add.w	r2, sp, #18
 8004020:	21b6      	movs	r1, #182	; 0xb6
 8004022:	4628      	mov	r0, r5
 8004024:	f000 f927 	bl	8004276 <VL53L0X_RdWord>
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 8004028:	b920      	cbnz	r0, 8004034 <VL53L0X_get_pal_range_status+0xd4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800402a:	4602      	mov	r2, r0
 800402c:	21ff      	movs	r1, #255	; 0xff
 800402e:	4628      	mov	r0, r5
 8004030:	f000 f8d4 	bl	80041dc <VL53L0X_WrByte>

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 8004034:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8004038:	025a      	lsls	r2, r3, #9
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);

		if ((SignalRefClipValue > 0) &&
 800403a:	9b07      	ldr	r3, [sp, #28]
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800403c:	f8c5 2148 	str.w	r2, [r5, #328]	; 0x148
		if ((SignalRefClipValue > 0) &&
 8004040:	2b00      	cmp	r3, #0
 8004042:	d062      	beq.n	800410a <VL53L0X_get_pal_range_status+0x1aa>
	uint8_t SignalRefClipflag = 0;
 8004044:	429a      	cmp	r2, r3
 8004046:	bf94      	ite	ls
 8004048:	f04f 0900 	movls.w	r9, #0
 800404c:	f04f 0901 	movhi.w	r9, #1
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8004050:	b928      	cbnz	r0, 800405e <VL53L0X_get_pal_range_status+0xfe>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8004052:	f10d 0211 	add.w	r2, sp, #17
 8004056:	2103      	movs	r1, #3
 8004058:	4628      	mov	r0, r5
 800405a:	f7fe f806 	bl	800206a <VL53L0X_GetLimitCheckEnable>
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800405e:	f89d 6011 	ldrb.w	r6, [sp, #17]
 8004062:	b19e      	cbz	r6, 800408c <VL53L0X_get_pal_range_status+0x12c>
 8004064:	2800      	cmp	r0, #0
 8004066:	d17c      	bne.n	8004162 <VL53L0X_get_pal_range_status+0x202>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 8004068:	f1bb 0f00 	cmp.w	fp, #0
 800406c:	d003      	beq.n	8004076 <VL53L0X_get_pal_range_status+0x116>
			SignalRatePerSpad = 0;
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800406e:	9b01      	ldr	r3, [sp, #4]
 8004070:	021e      	lsls	r6, r3, #8
 8004072:	fbb6 fbfb 	udiv	fp, r6, fp
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8004076:	aa08      	add	r2, sp, #32
 8004078:	2103      	movs	r1, #3
 800407a:	4628      	mov	r0, r5
 800407c:	f7fe f830 	bl	80020e0 <VL53L0X_GetLimitCheckValue>
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 8004080:	9e08      	ldr	r6, [sp, #32]
 8004082:	b11e      	cbz	r6, 800408c <VL53L0X_get_pal_range_status+0x12c>
	uint8_t RangeIgnoreThresholdflag = 0;
 8004084:	45b3      	cmp	fp, r6
 8004086:	bf2c      	ite	cs
 8004088:	2600      	movcs	r6, #0
 800408a:	2601      	movcc	r6, #1
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800408c:	b920      	cbnz	r0, 8004098 <VL53L0X_get_pal_range_status+0x138>
		if (NoneFlag == 1) {
 800408e:	9b00      	ldr	r3, [sp, #0]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d03f      	beq.n	8004114 <VL53L0X_get_pal_range_status+0x1b4>
			*pPalRangeStatus = 255;	 /* NONE */
 8004094:	22ff      	movs	r2, #255	; 0xff
			*pPalRangeStatus = 3;  /* Min range */
		} else if (DeviceRangeStatusInternal == 4 ||
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
		} else if (SigmaLimitflag == 1) {
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 8004096:	703a      	strb	r2, [r7, #0]
			*pPalRangeStatus = 0; /* Range Valid */
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 8004098:	783a      	ldrb	r2, [r7, #0]
 800409a:	b90a      	cbnz	r2, 80040a0 <VL53L0X_get_pal_range_status+0x140>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 800409c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800409e:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80040a0:	f10d 020f 	add.w	r2, sp, #15
 80040a4:	2101      	movs	r1, #1
 80040a6:	4628      	mov	r0, r5
 80040a8:	f7fd ffdf 	bl	800206a <VL53L0X_GetLimitCheckEnable>
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 80040ac:	bb30      	cbnz	r0, 80040fc <VL53L0X_get_pal_range_status+0x19c>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 80040ae:	f89d 200e 	ldrb.w	r2, [sp, #14]
 80040b2:	2a00      	cmp	r2, #0
 80040b4:	bf08      	it	eq
 80040b6:	2401      	moveq	r4, #1
		else
			Temp8 = 0;
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 80040b8:	f1b8 0f04 	cmp.w	r8, #4
 80040bc:	bf1d      	ittte	ne
 80040be:	f89d 200f 	ldrbne.w	r2, [sp, #15]
 80040c2:	fab2 f282 	clzne	r2, r2
 80040c6:	0952      	lsrne	r2, r2, #5
 80040c8:	2201      	moveq	r2, #1
				(SignalRateFinalRangeLimitCheckEnable == 0))
			Temp8 = 1;
		else
			Temp8 = 0;
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80040ca:	f885 202f 	strb.w	r2, [r5, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 80040ce:	f89d 2010 	ldrb.w	r2, [sp, #16]
 80040d2:	2a00      	cmp	r2, #0
 80040d4:	bf08      	it	eq
 80040d6:	f04f 0901 	moveq.w	r9, #1
					(SignalRefClipflag == 1))
			Temp8 = 1;
		else
			Temp8 = 0;

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80040da:	f009 0301 	and.w	r3, r9, #1
 80040de:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 80040e2:	f89d 3011 	ldrb.w	r3, [sp, #17]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	bf08      	it	eq
 80040ea:	2601      	moveq	r6, #1
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80040ec:	f004 0401 	and.w	r4, r4, #1
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
		else
			Temp8 = 0;

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80040f0:	f006 0601 	and.w	r6, r6, #1
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80040f4:	f885 402e 	strb.w	r4, [r5, #46]	; 0x2e
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80040f8:	f885 6031 	strb.w	r6, [r5, #49]	; 0x31
	}

	LOG_FUNCTION_END(Status);
	return Status;

}
 80040fc:	b00b      	add	sp, #44	; 0x2c
 80040fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004102:	464c      	mov	r4, r9
 8004104:	e776      	b.n	8003ff4 <VL53L0X_get_pal_range_status+0x94>
 8004106:	4634      	mov	r4, r6
 8004108:	e774      	b.n	8003ff4 <VL53L0X_get_pal_range_status+0x94>
	uint8_t SignalRefClipflag = 0;
 800410a:	4699      	mov	r9, r3
 800410c:	e7a0      	b.n	8004050 <VL53L0X_get_pal_range_status+0xf0>
 800410e:	f04f 0900 	mov.w	r9, #0
 8004112:	e7a4      	b.n	800405e <VL53L0X_get_pal_range_status+0xfe>
		} else if (DeviceRangeStatusInternal == 1 ||
 8004114:	f108 32ff 	add.w	r2, r8, #4294967295
 8004118:	2a02      	cmp	r2, #2
 800411a:	d801      	bhi.n	8004120 <VL53L0X_get_pal_range_status+0x1c0>
			*pPalRangeStatus = 5; /* HW fail */
 800411c:	2205      	movs	r2, #5
 800411e:	e7ba      	b.n	8004096 <VL53L0X_get_pal_range_status+0x136>
		} else if (DeviceRangeStatusInternal == 6 ||
 8004120:	f1b8 0f06 	cmp.w	r8, #6
 8004124:	d002      	beq.n	800412c <VL53L0X_get_pal_range_status+0x1cc>
 8004126:	f1b8 0f09 	cmp.w	r8, #9
 800412a:	d101      	bne.n	8004130 <VL53L0X_get_pal_range_status+0x1d0>
			*pPalRangeStatus = 4;  /* Phase fail */
 800412c:	2204      	movs	r2, #4
 800412e:	e7b2      	b.n	8004096 <VL53L0X_get_pal_range_status+0x136>
		} else if (DeviceRangeStatusInternal == 8 ||
 8004130:	f00a 0a0d 	and.w	sl, sl, #13
 8004134:	f1ba 0f08 	cmp.w	sl, #8
 8004138:	d002      	beq.n	8004140 <VL53L0X_get_pal_range_status+0x1e0>
					DeviceRangeStatusInternal == 10 ||
 800413a:	f1b9 0f01 	cmp.w	r9, #1
 800413e:	d101      	bne.n	8004144 <VL53L0X_get_pal_range_status+0x1e4>
			*pPalRangeStatus = 3;  /* Min range */
 8004140:	2203      	movs	r2, #3
 8004142:	e7a8      	b.n	8004096 <VL53L0X_get_pal_range_status+0x136>
		} else if (DeviceRangeStatusInternal == 4 ||
 8004144:	f1b8 0f04 	cmp.w	r8, #4
 8004148:	d001      	beq.n	800414e <VL53L0X_get_pal_range_status+0x1ee>
 800414a:	2e01      	cmp	r6, #1
 800414c:	d101      	bne.n	8004152 <VL53L0X_get_pal_range_status+0x1f2>
			*pPalRangeStatus = 2;  /* Signal Fail */
 800414e:	2202      	movs	r2, #2
 8004150:	e7a1      	b.n	8004096 <VL53L0X_get_pal_range_status+0x136>
		} else if (SigmaLimitflag == 1) {
 8004152:	2c01      	cmp	r4, #1
 8004154:	d101      	bne.n	800415a <VL53L0X_get_pal_range_status+0x1fa>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 8004156:	2201      	movs	r2, #1
 8004158:	e79d      	b.n	8004096 <VL53L0X_get_pal_range_status+0x136>
			*pPalRangeStatus = 0; /* Range Valid */
 800415a:	2200      	movs	r2, #0
 800415c:	703a      	strb	r2, [r7, #0]
 800415e:	4626      	mov	r6, r4
 8004160:	e79a      	b.n	8004098 <VL53L0X_get_pal_range_status+0x138>
	uint8_t RangeIgnoreThresholdflag = 0;
 8004162:	2600      	movs	r6, #0
 8004164:	e798      	b.n	8004098 <VL53L0X_get_pal_range_status+0x138>
	...

08004168 <i2c_write>:
int32_t VL53L0X_i2c_close(void)
{
    return VL53L0X_ERROR_NOT_IMPLEMENTED;
}

static int i2c_write(int addr, uint8_t cmd, uint8_t * data, uint8_t len) {
 8004168:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    HAL_StatusTypeDef ret = HAL_I2C_Mem_Write(&hi2c1, (uint16_t)addr, cmd, 1, data, len, 10);
 800416a:	240a      	movs	r4, #10
 800416c:	e88d 001c 	stmia.w	sp, {r2, r3, r4}
 8004170:	460a      	mov	r2, r1
 8004172:	2301      	movs	r3, #1
 8004174:	b281      	uxth	r1, r0
 8004176:	4805      	ldr	r0, [pc, #20]	; (800418c <i2c_write+0x24>)
 8004178:	f7fc fdf6 	bl	8000d68 <HAL_I2C_Mem_Write>
    if (ret == HAL_OK)
 800417c:	2800      	cmp	r0, #0
        return VL53L0X_ERROR_NONE;
    else
        return VL53L0X_ERROR_CONTROL_INTERFACE;
}
 800417e:	bf14      	ite	ne
 8004180:	f06f 0013 	mvnne.w	r0, #19
 8004184:	2000      	moveq	r0, #0
 8004186:	b004      	add	sp, #16
 8004188:	bd10      	pop	{r4, pc}
 800418a:	bf00      	nop
 800418c:	20000350 	.word	0x20000350

08004190 <i2c_read>:

static int i2c_read(int addr, uint8_t cmd, uint8_t * data, uint8_t len){
 8004190:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    HAL_StatusTypeDef ret = HAL_I2C_Mem_Read(&hi2c1, (uint16_t)addr, cmd, 1, data, len, 10);
 8004192:	240a      	movs	r4, #10
 8004194:	e88d 001c 	stmia.w	sp, {r2, r3, r4}
 8004198:	460a      	mov	r2, r1
 800419a:	2301      	movs	r3, #1
 800419c:	b281      	uxth	r1, r0
 800419e:	4805      	ldr	r0, [pc, #20]	; (80041b4 <i2c_read+0x24>)
 80041a0:	f7fc fe78 	bl	8000e94 <HAL_I2C_Mem_Read>
    if (ret == HAL_OK)
 80041a4:	2800      	cmp	r0, #0
        return VL53L0X_ERROR_NONE;
    else
        return VL53L0X_ERROR_CONTROL_INTERFACE;
}
 80041a6:	bf14      	ite	ne
 80041a8:	f06f 0013 	mvnne.w	r0, #19
 80041ac:	2000      	moveq	r0, #0
 80041ae:	b004      	add	sp, #16
 80041b0:	bd10      	pop	{r4, pc}
 80041b2:	bf00      	nop
 80041b4:	20000350 	.word	0x20000350

080041b8 <VL53L0X_i2c_init>:
}
 80041b8:	2000      	movs	r0, #0
 80041ba:	4770      	bx	lr

080041bc <VL53L0X_WriteMulti>:
VL53L0X_Error VL53L0X_UnlockSequenceAccess(VL53L0X_DEV Dev){
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    return Status;
}

VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count){
 80041bc:	b508      	push	{r3, lr}
    return i2c_write(Dev->addr, index, pdata, count);
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	f890 015c 	ldrb.w	r0, [r0, #348]	; 0x15c
 80041c4:	f7ff ffd0 	bl	8004168 <i2c_write>
}
 80041c8:	b240      	sxtb	r0, r0
 80041ca:	bd08      	pop	{r3, pc}

080041cc <VL53L0X_ReadMulti>:

VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count){
 80041cc:	b508      	push	{r3, lr}
    return i2c_read(Dev->addr, index, pdata, count);
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	f890 015c 	ldrb.w	r0, [r0, #348]	; 0x15c
 80041d4:	f7ff ffdc 	bl	8004190 <i2c_read>
}
 80041d8:	b240      	sxtb	r0, r0
 80041da:	bd08      	pop	{r3, pc}

080041dc <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data){
 80041dc:	b513      	push	{r0, r1, r4, lr}
 80041de:	ac02      	add	r4, sp, #8
	return i2c_write(Dev->addr, index, &data, 1);
 80041e0:	2301      	movs	r3, #1
VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data){
 80041e2:	f804 2d01 	strb.w	r2, [r4, #-1]!
	return i2c_write(Dev->addr, index, &data, 1);
 80041e6:	f890 015c 	ldrb.w	r0, [r0, #348]	; 0x15c
 80041ea:	4622      	mov	r2, r4
 80041ec:	f7ff ffbc 	bl	8004168 <i2c_write>
}
 80041f0:	b240      	sxtb	r0, r0
 80041f2:	b002      	add	sp, #8
 80041f4:	bd10      	pop	{r4, pc}

080041f6 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data){
 80041f6:	b507      	push	{r0, r1, r2, lr}
    uint8_t buf[4];
    buf[1] = data>>0&0xFF;
    buf[0] = data>>8&0xFF;
 80041f8:	0a13      	lsrs	r3, r2, #8
    buf[1] = data>>0&0xFF;
 80041fa:	f88d 2005 	strb.w	r2, [sp, #5]
    buf[0] = data>>8&0xFF;
 80041fe:	aa02      	add	r2, sp, #8
    return i2c_write(Dev->addr, index, buf, 2);
 8004200:	f890 015c 	ldrb.w	r0, [r0, #348]	; 0x15c
    buf[0] = data>>8&0xFF;
 8004204:	f802 3d04 	strb.w	r3, [r2, #-4]!
    return i2c_write(Dev->addr, index, buf, 2);
 8004208:	2302      	movs	r3, #2
 800420a:	f7ff ffad 	bl	8004168 <i2c_write>
}
 800420e:	b240      	sxtb	r0, r0
 8004210:	b003      	add	sp, #12
 8004212:	f85d fb04 	ldr.w	pc, [sp], #4

08004216 <VL53L0X_UpdateByte>:
    buf[1] = data>>16&0xFF;
    buf[0] = data>>24&0xFF;
    return i2c_write(Dev->addr, index, buf, 4);
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData){
 8004216:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004218:	4606      	mov	r6, r0
 800421a:	4615      	mov	r5, r2
 800421c:	461c      	mov	r4, r3

    int32_t status_int;
    uint8_t data;

    status_int = i2c_read(Dev->addr, index, &data, 1);
 800421e:	f10d 0207 	add.w	r2, sp, #7
 8004222:	2301      	movs	r3, #1
 8004224:	f890 015c 	ldrb.w	r0, [r0, #348]	; 0x15c
VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData){
 8004228:	460f      	mov	r7, r1
    status_int = i2c_read(Dev->addr, index, &data, 1);
 800422a:	f7ff ffb1 	bl	8004190 <i2c_read>

    if (status_int != 0){
 800422e:	b110      	cbz	r0, 8004236 <VL53L0X_UpdateByte+0x20>
        return  status_int;
    }

    data = (data & AndData) | OrData;
    return i2c_write(Dev->addr, index, &data, 1);
 8004230:	b240      	sxtb	r0, r0
}
 8004232:	b003      	add	sp, #12
 8004234:	bdf0      	pop	{r4, r5, r6, r7, pc}
    data = (data & AndData) | OrData;
 8004236:	f89d 3007 	ldrb.w	r3, [sp, #7]
    return i2c_write(Dev->addr, index, &data, 1);
 800423a:	f896 015c 	ldrb.w	r0, [r6, #348]	; 0x15c
    data = (data & AndData) | OrData;
 800423e:	401d      	ands	r5, r3
 8004240:	432c      	orrs	r4, r5
    return i2c_write(Dev->addr, index, &data, 1);
 8004242:	2301      	movs	r3, #1
 8004244:	f10d 0207 	add.w	r2, sp, #7
 8004248:	4639      	mov	r1, r7
    data = (data & AndData) | OrData;
 800424a:	f88d 4007 	strb.w	r4, [sp, #7]
    return i2c_write(Dev->addr, index, &data, 1);
 800424e:	f7ff ff8b 	bl	8004168 <i2c_write>
 8004252:	e7ed      	b.n	8004230 <VL53L0X_UpdateByte+0x1a>

08004254 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data){
 8004254:	b513      	push	{r0, r1, r4, lr}
 8004256:	4614      	mov	r4, r2
    uint8_t tmp = 0;
 8004258:	aa02      	add	r2, sp, #8
 800425a:	2300      	movs	r3, #0
 800425c:	f802 3d01 	strb.w	r3, [r2, #-1]!
    int ret = i2c_read(Dev->addr, index, &tmp, 1);
 8004260:	f890 015c 	ldrb.w	r0, [r0, #348]	; 0x15c
 8004264:	2301      	movs	r3, #1
 8004266:	f7ff ff93 	bl	8004190 <i2c_read>
    *data = tmp;
 800426a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800426e:	7023      	strb	r3, [r4, #0]
    // printf("%u\n", tmp);
    return ret;
}
 8004270:	b240      	sxtb	r0, r0
 8004272:	b002      	add	sp, #8
 8004274:	bd10      	pop	{r4, pc}

08004276 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data){
 8004276:	b513      	push	{r0, r1, r4, lr}
    uint8_t buf[2];
    int ret = i2c_read(Dev->addr, index, buf, 2);
 8004278:	2302      	movs	r3, #2
VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data){
 800427a:	4614      	mov	r4, r2
    int ret = i2c_read(Dev->addr, index, buf, 2);
 800427c:	f890 015c 	ldrb.w	r0, [r0, #348]	; 0x15c
 8004280:	aa01      	add	r2, sp, #4
 8004282:	f7ff ff85 	bl	8004190 <i2c_read>
    uint16_t tmp = 0;
    tmp |= buf[1]<<0;
    tmp |= buf[0]<<8;
 8004286:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800428a:	f89d 3005 	ldrb.w	r3, [sp, #5]
    // printf("%u\n", tmp);
    *data = tmp;
    return ret;
}
 800428e:	b240      	sxtb	r0, r0
    tmp |= buf[0]<<8;
 8004290:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    *data = tmp;
 8004294:	8023      	strh	r3, [r4, #0]
}
 8004296:	b002      	add	sp, #8
 8004298:	bd10      	pop	{r4, pc}

0800429a <VL53L0X_RdDWord>:

VL53L0X_Error  VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data){
 800429a:	b513      	push	{r0, r1, r4, lr}
    uint8_t buf[4];
    int ret = i2c_read(Dev->addr, index, buf, 4);
 800429c:	2304      	movs	r3, #4
VL53L0X_Error  VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data){
 800429e:	4614      	mov	r4, r2
    int ret = i2c_read(Dev->addr, index, buf, 4);
 80042a0:	f890 015c 	ldrb.w	r0, [r0, #348]	; 0x15c
 80042a4:	eb0d 0203 	add.w	r2, sp, r3
 80042a8:	f7ff ff72 	bl	8004190 <i2c_read>
 80042ac:	9b01      	ldr	r3, [sp, #4]
    tmp |= buf[1]<<16;
    tmp |= buf[0]<<24;
    *data = tmp;
    // printf("%zu\n", tmp);
    return ret;
}
 80042ae:	b240      	sxtb	r0, r0
 80042b0:	ba1b      	rev	r3, r3
    *data = tmp;
 80042b2:	6023      	str	r3, [r4, #0]
}
 80042b4:	b002      	add	sp, #8
 80042b6:	bd10      	pop	{r4, pc}

080042b8 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev){
    return VL53L0X_ERROR_NONE;
}
 80042b8:	2000      	movs	r0, #0
 80042ba:	4770      	bx	lr

080042bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80042bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80042f4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80042c0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80042c2:	e003      	b.n	80042cc <LoopCopyDataInit>

080042c4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80042c4:	4b0c      	ldr	r3, [pc, #48]	; (80042f8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80042c6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80042c8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80042ca:	3104      	adds	r1, #4

080042cc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80042cc:	480b      	ldr	r0, [pc, #44]	; (80042fc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80042ce:	4b0c      	ldr	r3, [pc, #48]	; (8004300 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80042d0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80042d2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80042d4:	d3f6      	bcc.n	80042c4 <CopyDataInit>
  ldr  r2, =_sbss
 80042d6:	4a0b      	ldr	r2, [pc, #44]	; (8004304 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80042d8:	e002      	b.n	80042e0 <LoopFillZerobss>

080042da <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80042da:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80042dc:	f842 3b04 	str.w	r3, [r2], #4

080042e0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80042e0:	4b09      	ldr	r3, [pc, #36]	; (8004308 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80042e2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80042e4:	d3f9      	bcc.n	80042da <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80042e6:	f7fd fd41 	bl	8001d6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80042ea:	f000 f811 	bl	8004310 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80042ee:	f7fd fc5f 	bl	8001bb0 <main>
  bx  lr    
 80042f2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80042f4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80042f8:	080053c4 	.word	0x080053c4
  ldr  r0, =_sdata
 80042fc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004300:	20000324 	.word	0x20000324
  ldr  r2, =_sbss
 8004304:	20000324 	.word	0x20000324
  ldr  r3, = _ebss
 8004308:	200003e8 	.word	0x200003e8

0800430c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800430c:	e7fe      	b.n	800430c <ADC_IRQHandler>
	...

08004310 <__libc_init_array>:
 8004310:	b570      	push	{r4, r5, r6, lr}
 8004312:	4e0d      	ldr	r6, [pc, #52]	; (8004348 <__libc_init_array+0x38>)
 8004314:	4c0d      	ldr	r4, [pc, #52]	; (800434c <__libc_init_array+0x3c>)
 8004316:	1ba4      	subs	r4, r4, r6
 8004318:	10a4      	asrs	r4, r4, #2
 800431a:	2500      	movs	r5, #0
 800431c:	42a5      	cmp	r5, r4
 800431e:	d109      	bne.n	8004334 <__libc_init_array+0x24>
 8004320:	4e0b      	ldr	r6, [pc, #44]	; (8004350 <__libc_init_array+0x40>)
 8004322:	4c0c      	ldr	r4, [pc, #48]	; (8004354 <__libc_init_array+0x44>)
 8004324:	f000 ff5e 	bl	80051e4 <_init>
 8004328:	1ba4      	subs	r4, r4, r6
 800432a:	10a4      	asrs	r4, r4, #2
 800432c:	2500      	movs	r5, #0
 800432e:	42a5      	cmp	r5, r4
 8004330:	d105      	bne.n	800433e <__libc_init_array+0x2e>
 8004332:	bd70      	pop	{r4, r5, r6, pc}
 8004334:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004338:	4798      	blx	r3
 800433a:	3501      	adds	r5, #1
 800433c:	e7ee      	b.n	800431c <__libc_init_array+0xc>
 800433e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004342:	4798      	blx	r3
 8004344:	3501      	adds	r5, #1
 8004346:	e7f2      	b.n	800432e <__libc_init_array+0x1e>
 8004348:	080053bc 	.word	0x080053bc
 800434c:	080053bc 	.word	0x080053bc
 8004350:	080053bc 	.word	0x080053bc
 8004354:	080053c0 	.word	0x080053c0

08004358 <memset>:
 8004358:	4402      	add	r2, r0
 800435a:	4603      	mov	r3, r0
 800435c:	4293      	cmp	r3, r2
 800435e:	d100      	bne.n	8004362 <memset+0xa>
 8004360:	4770      	bx	lr
 8004362:	f803 1b01 	strb.w	r1, [r3], #1
 8004366:	e7f9      	b.n	800435c <memset+0x4>

08004368 <iprintf>:
 8004368:	b40f      	push	{r0, r1, r2, r3}
 800436a:	4b0a      	ldr	r3, [pc, #40]	; (8004394 <iprintf+0x2c>)
 800436c:	b513      	push	{r0, r1, r4, lr}
 800436e:	681c      	ldr	r4, [r3, #0]
 8004370:	b124      	cbz	r4, 800437c <iprintf+0x14>
 8004372:	69a3      	ldr	r3, [r4, #24]
 8004374:	b913      	cbnz	r3, 800437c <iprintf+0x14>
 8004376:	4620      	mov	r0, r4
 8004378:	f000 f856 	bl	8004428 <__sinit>
 800437c:	ab05      	add	r3, sp, #20
 800437e:	9a04      	ldr	r2, [sp, #16]
 8004380:	68a1      	ldr	r1, [r4, #8]
 8004382:	9301      	str	r3, [sp, #4]
 8004384:	4620      	mov	r0, r4
 8004386:	f000 f961 	bl	800464c <_vfiprintf_r>
 800438a:	b002      	add	sp, #8
 800438c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004390:	b004      	add	sp, #16
 8004392:	4770      	bx	lr
 8004394:	200002c0 	.word	0x200002c0

08004398 <strcpy>:
 8004398:	4603      	mov	r3, r0
 800439a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800439e:	f803 2b01 	strb.w	r2, [r3], #1
 80043a2:	2a00      	cmp	r2, #0
 80043a4:	d1f9      	bne.n	800439a <strcpy+0x2>
 80043a6:	4770      	bx	lr

080043a8 <_cleanup_r>:
 80043a8:	4901      	ldr	r1, [pc, #4]	; (80043b0 <_cleanup_r+0x8>)
 80043aa:	f000 b8a9 	b.w	8004500 <_fwalk_reent>
 80043ae:	bf00      	nop
 80043b0:	08004f21 	.word	0x08004f21

080043b4 <std.isra.0>:
 80043b4:	2300      	movs	r3, #0
 80043b6:	b510      	push	{r4, lr}
 80043b8:	4604      	mov	r4, r0
 80043ba:	6003      	str	r3, [r0, #0]
 80043bc:	6043      	str	r3, [r0, #4]
 80043be:	6083      	str	r3, [r0, #8]
 80043c0:	8181      	strh	r1, [r0, #12]
 80043c2:	6643      	str	r3, [r0, #100]	; 0x64
 80043c4:	81c2      	strh	r2, [r0, #14]
 80043c6:	6103      	str	r3, [r0, #16]
 80043c8:	6143      	str	r3, [r0, #20]
 80043ca:	6183      	str	r3, [r0, #24]
 80043cc:	4619      	mov	r1, r3
 80043ce:	2208      	movs	r2, #8
 80043d0:	305c      	adds	r0, #92	; 0x5c
 80043d2:	f7ff ffc1 	bl	8004358 <memset>
 80043d6:	4b05      	ldr	r3, [pc, #20]	; (80043ec <std.isra.0+0x38>)
 80043d8:	6263      	str	r3, [r4, #36]	; 0x24
 80043da:	4b05      	ldr	r3, [pc, #20]	; (80043f0 <std.isra.0+0x3c>)
 80043dc:	62a3      	str	r3, [r4, #40]	; 0x28
 80043de:	4b05      	ldr	r3, [pc, #20]	; (80043f4 <std.isra.0+0x40>)
 80043e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80043e2:	4b05      	ldr	r3, [pc, #20]	; (80043f8 <std.isra.0+0x44>)
 80043e4:	6224      	str	r4, [r4, #32]
 80043e6:	6323      	str	r3, [r4, #48]	; 0x30
 80043e8:	bd10      	pop	{r4, pc}
 80043ea:	bf00      	nop
 80043ec:	08004bc5 	.word	0x08004bc5
 80043f0:	08004be7 	.word	0x08004be7
 80043f4:	08004c1f 	.word	0x08004c1f
 80043f8:	08004c43 	.word	0x08004c43

080043fc <__sfmoreglue>:
 80043fc:	b570      	push	{r4, r5, r6, lr}
 80043fe:	1e4a      	subs	r2, r1, #1
 8004400:	2568      	movs	r5, #104	; 0x68
 8004402:	4355      	muls	r5, r2
 8004404:	460e      	mov	r6, r1
 8004406:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800440a:	f000 f897 	bl	800453c <_malloc_r>
 800440e:	4604      	mov	r4, r0
 8004410:	b140      	cbz	r0, 8004424 <__sfmoreglue+0x28>
 8004412:	2100      	movs	r1, #0
 8004414:	e880 0042 	stmia.w	r0, {r1, r6}
 8004418:	300c      	adds	r0, #12
 800441a:	60a0      	str	r0, [r4, #8]
 800441c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004420:	f7ff ff9a 	bl	8004358 <memset>
 8004424:	4620      	mov	r0, r4
 8004426:	bd70      	pop	{r4, r5, r6, pc}

08004428 <__sinit>:
 8004428:	6983      	ldr	r3, [r0, #24]
 800442a:	b510      	push	{r4, lr}
 800442c:	4604      	mov	r4, r0
 800442e:	bb33      	cbnz	r3, 800447e <__sinit+0x56>
 8004430:	6483      	str	r3, [r0, #72]	; 0x48
 8004432:	64c3      	str	r3, [r0, #76]	; 0x4c
 8004434:	6503      	str	r3, [r0, #80]	; 0x50
 8004436:	4b12      	ldr	r3, [pc, #72]	; (8004480 <__sinit+0x58>)
 8004438:	4a12      	ldr	r2, [pc, #72]	; (8004484 <__sinit+0x5c>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	6282      	str	r2, [r0, #40]	; 0x28
 800443e:	4298      	cmp	r0, r3
 8004440:	bf04      	itt	eq
 8004442:	2301      	moveq	r3, #1
 8004444:	6183      	streq	r3, [r0, #24]
 8004446:	f000 f81f 	bl	8004488 <__sfp>
 800444a:	6060      	str	r0, [r4, #4]
 800444c:	4620      	mov	r0, r4
 800444e:	f000 f81b 	bl	8004488 <__sfp>
 8004452:	60a0      	str	r0, [r4, #8]
 8004454:	4620      	mov	r0, r4
 8004456:	f000 f817 	bl	8004488 <__sfp>
 800445a:	2200      	movs	r2, #0
 800445c:	60e0      	str	r0, [r4, #12]
 800445e:	2104      	movs	r1, #4
 8004460:	6860      	ldr	r0, [r4, #4]
 8004462:	f7ff ffa7 	bl	80043b4 <std.isra.0>
 8004466:	2201      	movs	r2, #1
 8004468:	2109      	movs	r1, #9
 800446a:	68a0      	ldr	r0, [r4, #8]
 800446c:	f7ff ffa2 	bl	80043b4 <std.isra.0>
 8004470:	2202      	movs	r2, #2
 8004472:	2112      	movs	r1, #18
 8004474:	68e0      	ldr	r0, [r4, #12]
 8004476:	f7ff ff9d 	bl	80043b4 <std.isra.0>
 800447a:	2301      	movs	r3, #1
 800447c:	61a3      	str	r3, [r4, #24]
 800447e:	bd10      	pop	{r4, pc}
 8004480:	0800537c 	.word	0x0800537c
 8004484:	080043a9 	.word	0x080043a9

08004488 <__sfp>:
 8004488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800448a:	4b1c      	ldr	r3, [pc, #112]	; (80044fc <__sfp+0x74>)
 800448c:	681e      	ldr	r6, [r3, #0]
 800448e:	69b3      	ldr	r3, [r6, #24]
 8004490:	4607      	mov	r7, r0
 8004492:	b913      	cbnz	r3, 800449a <__sfp+0x12>
 8004494:	4630      	mov	r0, r6
 8004496:	f7ff ffc7 	bl	8004428 <__sinit>
 800449a:	3648      	adds	r6, #72	; 0x48
 800449c:	68b4      	ldr	r4, [r6, #8]
 800449e:	6873      	ldr	r3, [r6, #4]
 80044a0:	3b01      	subs	r3, #1
 80044a2:	d503      	bpl.n	80044ac <__sfp+0x24>
 80044a4:	6833      	ldr	r3, [r6, #0]
 80044a6:	b133      	cbz	r3, 80044b6 <__sfp+0x2e>
 80044a8:	6836      	ldr	r6, [r6, #0]
 80044aa:	e7f7      	b.n	800449c <__sfp+0x14>
 80044ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80044b0:	b16d      	cbz	r5, 80044ce <__sfp+0x46>
 80044b2:	3468      	adds	r4, #104	; 0x68
 80044b4:	e7f4      	b.n	80044a0 <__sfp+0x18>
 80044b6:	2104      	movs	r1, #4
 80044b8:	4638      	mov	r0, r7
 80044ba:	f7ff ff9f 	bl	80043fc <__sfmoreglue>
 80044be:	6030      	str	r0, [r6, #0]
 80044c0:	2800      	cmp	r0, #0
 80044c2:	d1f1      	bne.n	80044a8 <__sfp+0x20>
 80044c4:	230c      	movs	r3, #12
 80044c6:	603b      	str	r3, [r7, #0]
 80044c8:	4604      	mov	r4, r0
 80044ca:	4620      	mov	r0, r4
 80044cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80044d2:	81e3      	strh	r3, [r4, #14]
 80044d4:	2301      	movs	r3, #1
 80044d6:	81a3      	strh	r3, [r4, #12]
 80044d8:	6665      	str	r5, [r4, #100]	; 0x64
 80044da:	6025      	str	r5, [r4, #0]
 80044dc:	60a5      	str	r5, [r4, #8]
 80044de:	6065      	str	r5, [r4, #4]
 80044e0:	6125      	str	r5, [r4, #16]
 80044e2:	6165      	str	r5, [r4, #20]
 80044e4:	61a5      	str	r5, [r4, #24]
 80044e6:	2208      	movs	r2, #8
 80044e8:	4629      	mov	r1, r5
 80044ea:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80044ee:	f7ff ff33 	bl	8004358 <memset>
 80044f2:	6365      	str	r5, [r4, #52]	; 0x34
 80044f4:	63a5      	str	r5, [r4, #56]	; 0x38
 80044f6:	64a5      	str	r5, [r4, #72]	; 0x48
 80044f8:	64e5      	str	r5, [r4, #76]	; 0x4c
 80044fa:	e7e6      	b.n	80044ca <__sfp+0x42>
 80044fc:	0800537c 	.word	0x0800537c

08004500 <_fwalk_reent>:
 8004500:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004504:	4680      	mov	r8, r0
 8004506:	4689      	mov	r9, r1
 8004508:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800450c:	2600      	movs	r6, #0
 800450e:	b914      	cbnz	r4, 8004516 <_fwalk_reent+0x16>
 8004510:	4630      	mov	r0, r6
 8004512:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004516:	68a5      	ldr	r5, [r4, #8]
 8004518:	6867      	ldr	r7, [r4, #4]
 800451a:	3f01      	subs	r7, #1
 800451c:	d501      	bpl.n	8004522 <_fwalk_reent+0x22>
 800451e:	6824      	ldr	r4, [r4, #0]
 8004520:	e7f5      	b.n	800450e <_fwalk_reent+0xe>
 8004522:	89ab      	ldrh	r3, [r5, #12]
 8004524:	2b01      	cmp	r3, #1
 8004526:	d907      	bls.n	8004538 <_fwalk_reent+0x38>
 8004528:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800452c:	3301      	adds	r3, #1
 800452e:	d003      	beq.n	8004538 <_fwalk_reent+0x38>
 8004530:	4629      	mov	r1, r5
 8004532:	4640      	mov	r0, r8
 8004534:	47c8      	blx	r9
 8004536:	4306      	orrs	r6, r0
 8004538:	3568      	adds	r5, #104	; 0x68
 800453a:	e7ee      	b.n	800451a <_fwalk_reent+0x1a>

0800453c <_malloc_r>:
 800453c:	b570      	push	{r4, r5, r6, lr}
 800453e:	1ccd      	adds	r5, r1, #3
 8004540:	f025 0503 	bic.w	r5, r5, #3
 8004544:	3508      	adds	r5, #8
 8004546:	2d0c      	cmp	r5, #12
 8004548:	bf38      	it	cc
 800454a:	250c      	movcc	r5, #12
 800454c:	2d00      	cmp	r5, #0
 800454e:	4606      	mov	r6, r0
 8004550:	db01      	blt.n	8004556 <_malloc_r+0x1a>
 8004552:	42a9      	cmp	r1, r5
 8004554:	d903      	bls.n	800455e <_malloc_r+0x22>
 8004556:	230c      	movs	r3, #12
 8004558:	6033      	str	r3, [r6, #0]
 800455a:	2000      	movs	r0, #0
 800455c:	bd70      	pop	{r4, r5, r6, pc}
 800455e:	f000 fd7f 	bl	8005060 <__malloc_lock>
 8004562:	4a23      	ldr	r2, [pc, #140]	; (80045f0 <_malloc_r+0xb4>)
 8004564:	6814      	ldr	r4, [r2, #0]
 8004566:	4621      	mov	r1, r4
 8004568:	b991      	cbnz	r1, 8004590 <_malloc_r+0x54>
 800456a:	4c22      	ldr	r4, [pc, #136]	; (80045f4 <_malloc_r+0xb8>)
 800456c:	6823      	ldr	r3, [r4, #0]
 800456e:	b91b      	cbnz	r3, 8004578 <_malloc_r+0x3c>
 8004570:	4630      	mov	r0, r6
 8004572:	f000 fb17 	bl	8004ba4 <_sbrk_r>
 8004576:	6020      	str	r0, [r4, #0]
 8004578:	4629      	mov	r1, r5
 800457a:	4630      	mov	r0, r6
 800457c:	f000 fb12 	bl	8004ba4 <_sbrk_r>
 8004580:	1c43      	adds	r3, r0, #1
 8004582:	d126      	bne.n	80045d2 <_malloc_r+0x96>
 8004584:	230c      	movs	r3, #12
 8004586:	6033      	str	r3, [r6, #0]
 8004588:	4630      	mov	r0, r6
 800458a:	f000 fd6a 	bl	8005062 <__malloc_unlock>
 800458e:	e7e4      	b.n	800455a <_malloc_r+0x1e>
 8004590:	680b      	ldr	r3, [r1, #0]
 8004592:	1b5b      	subs	r3, r3, r5
 8004594:	d41a      	bmi.n	80045cc <_malloc_r+0x90>
 8004596:	2b0b      	cmp	r3, #11
 8004598:	d90f      	bls.n	80045ba <_malloc_r+0x7e>
 800459a:	600b      	str	r3, [r1, #0]
 800459c:	50cd      	str	r5, [r1, r3]
 800459e:	18cc      	adds	r4, r1, r3
 80045a0:	4630      	mov	r0, r6
 80045a2:	f000 fd5e 	bl	8005062 <__malloc_unlock>
 80045a6:	f104 000b 	add.w	r0, r4, #11
 80045aa:	1d23      	adds	r3, r4, #4
 80045ac:	f020 0007 	bic.w	r0, r0, #7
 80045b0:	1ac3      	subs	r3, r0, r3
 80045b2:	d01b      	beq.n	80045ec <_malloc_r+0xb0>
 80045b4:	425a      	negs	r2, r3
 80045b6:	50e2      	str	r2, [r4, r3]
 80045b8:	bd70      	pop	{r4, r5, r6, pc}
 80045ba:	428c      	cmp	r4, r1
 80045bc:	bf0d      	iteet	eq
 80045be:	6863      	ldreq	r3, [r4, #4]
 80045c0:	684b      	ldrne	r3, [r1, #4]
 80045c2:	6063      	strne	r3, [r4, #4]
 80045c4:	6013      	streq	r3, [r2, #0]
 80045c6:	bf18      	it	ne
 80045c8:	460c      	movne	r4, r1
 80045ca:	e7e9      	b.n	80045a0 <_malloc_r+0x64>
 80045cc:	460c      	mov	r4, r1
 80045ce:	6849      	ldr	r1, [r1, #4]
 80045d0:	e7ca      	b.n	8004568 <_malloc_r+0x2c>
 80045d2:	1cc4      	adds	r4, r0, #3
 80045d4:	f024 0403 	bic.w	r4, r4, #3
 80045d8:	42a0      	cmp	r0, r4
 80045da:	d005      	beq.n	80045e8 <_malloc_r+0xac>
 80045dc:	1a21      	subs	r1, r4, r0
 80045de:	4630      	mov	r0, r6
 80045e0:	f000 fae0 	bl	8004ba4 <_sbrk_r>
 80045e4:	3001      	adds	r0, #1
 80045e6:	d0cd      	beq.n	8004584 <_malloc_r+0x48>
 80045e8:	6025      	str	r5, [r4, #0]
 80045ea:	e7d9      	b.n	80045a0 <_malloc_r+0x64>
 80045ec:	bd70      	pop	{r4, r5, r6, pc}
 80045ee:	bf00      	nop
 80045f0:	20000340 	.word	0x20000340
 80045f4:	20000344 	.word	0x20000344

080045f8 <__sfputc_r>:
 80045f8:	6893      	ldr	r3, [r2, #8]
 80045fa:	3b01      	subs	r3, #1
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	b410      	push	{r4}
 8004600:	6093      	str	r3, [r2, #8]
 8004602:	da09      	bge.n	8004618 <__sfputc_r+0x20>
 8004604:	6994      	ldr	r4, [r2, #24]
 8004606:	42a3      	cmp	r3, r4
 8004608:	db02      	blt.n	8004610 <__sfputc_r+0x18>
 800460a:	b2cb      	uxtb	r3, r1
 800460c:	2b0a      	cmp	r3, #10
 800460e:	d103      	bne.n	8004618 <__sfputc_r+0x20>
 8004610:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004614:	f000 bb1a 	b.w	8004c4c <__swbuf_r>
 8004618:	6813      	ldr	r3, [r2, #0]
 800461a:	1c58      	adds	r0, r3, #1
 800461c:	6010      	str	r0, [r2, #0]
 800461e:	7019      	strb	r1, [r3, #0]
 8004620:	b2c8      	uxtb	r0, r1
 8004622:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004626:	4770      	bx	lr

08004628 <__sfputs_r>:
 8004628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800462a:	4606      	mov	r6, r0
 800462c:	460f      	mov	r7, r1
 800462e:	4614      	mov	r4, r2
 8004630:	18d5      	adds	r5, r2, r3
 8004632:	42ac      	cmp	r4, r5
 8004634:	d101      	bne.n	800463a <__sfputs_r+0x12>
 8004636:	2000      	movs	r0, #0
 8004638:	e007      	b.n	800464a <__sfputs_r+0x22>
 800463a:	463a      	mov	r2, r7
 800463c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004640:	4630      	mov	r0, r6
 8004642:	f7ff ffd9 	bl	80045f8 <__sfputc_r>
 8004646:	1c43      	adds	r3, r0, #1
 8004648:	d1f3      	bne.n	8004632 <__sfputs_r+0xa>
 800464a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800464c <_vfiprintf_r>:
 800464c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004650:	b09d      	sub	sp, #116	; 0x74
 8004652:	460c      	mov	r4, r1
 8004654:	4617      	mov	r7, r2
 8004656:	9303      	str	r3, [sp, #12]
 8004658:	4606      	mov	r6, r0
 800465a:	b118      	cbz	r0, 8004664 <_vfiprintf_r+0x18>
 800465c:	6983      	ldr	r3, [r0, #24]
 800465e:	b90b      	cbnz	r3, 8004664 <_vfiprintf_r+0x18>
 8004660:	f7ff fee2 	bl	8004428 <__sinit>
 8004664:	4b7c      	ldr	r3, [pc, #496]	; (8004858 <_vfiprintf_r+0x20c>)
 8004666:	429c      	cmp	r4, r3
 8004668:	d157      	bne.n	800471a <_vfiprintf_r+0xce>
 800466a:	6874      	ldr	r4, [r6, #4]
 800466c:	89a3      	ldrh	r3, [r4, #12]
 800466e:	0718      	lsls	r0, r3, #28
 8004670:	d55d      	bpl.n	800472e <_vfiprintf_r+0xe2>
 8004672:	6923      	ldr	r3, [r4, #16]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d05a      	beq.n	800472e <_vfiprintf_r+0xe2>
 8004678:	2300      	movs	r3, #0
 800467a:	9309      	str	r3, [sp, #36]	; 0x24
 800467c:	2320      	movs	r3, #32
 800467e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004682:	2330      	movs	r3, #48	; 0x30
 8004684:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004688:	f04f 0b01 	mov.w	fp, #1
 800468c:	46b8      	mov	r8, r7
 800468e:	4645      	mov	r5, r8
 8004690:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004694:	2b00      	cmp	r3, #0
 8004696:	d155      	bne.n	8004744 <_vfiprintf_r+0xf8>
 8004698:	ebb8 0a07 	subs.w	sl, r8, r7
 800469c:	d00b      	beq.n	80046b6 <_vfiprintf_r+0x6a>
 800469e:	4653      	mov	r3, sl
 80046a0:	463a      	mov	r2, r7
 80046a2:	4621      	mov	r1, r4
 80046a4:	4630      	mov	r0, r6
 80046a6:	f7ff ffbf 	bl	8004628 <__sfputs_r>
 80046aa:	3001      	adds	r0, #1
 80046ac:	f000 80c4 	beq.w	8004838 <_vfiprintf_r+0x1ec>
 80046b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046b2:	4453      	add	r3, sl
 80046b4:	9309      	str	r3, [sp, #36]	; 0x24
 80046b6:	f898 3000 	ldrb.w	r3, [r8]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	f000 80bc 	beq.w	8004838 <_vfiprintf_r+0x1ec>
 80046c0:	2300      	movs	r3, #0
 80046c2:	f04f 32ff 	mov.w	r2, #4294967295
 80046c6:	9304      	str	r3, [sp, #16]
 80046c8:	9307      	str	r3, [sp, #28]
 80046ca:	9205      	str	r2, [sp, #20]
 80046cc:	9306      	str	r3, [sp, #24]
 80046ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80046d2:	931a      	str	r3, [sp, #104]	; 0x68
 80046d4:	2205      	movs	r2, #5
 80046d6:	7829      	ldrb	r1, [r5, #0]
 80046d8:	4860      	ldr	r0, [pc, #384]	; (800485c <_vfiprintf_r+0x210>)
 80046da:	f7fb fd79 	bl	80001d0 <memchr>
 80046de:	f105 0801 	add.w	r8, r5, #1
 80046e2:	9b04      	ldr	r3, [sp, #16]
 80046e4:	2800      	cmp	r0, #0
 80046e6:	d131      	bne.n	800474c <_vfiprintf_r+0x100>
 80046e8:	06d9      	lsls	r1, r3, #27
 80046ea:	bf44      	itt	mi
 80046ec:	2220      	movmi	r2, #32
 80046ee:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80046f2:	071a      	lsls	r2, r3, #28
 80046f4:	bf44      	itt	mi
 80046f6:	222b      	movmi	r2, #43	; 0x2b
 80046f8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80046fc:	782a      	ldrb	r2, [r5, #0]
 80046fe:	2a2a      	cmp	r2, #42	; 0x2a
 8004700:	d02c      	beq.n	800475c <_vfiprintf_r+0x110>
 8004702:	9a07      	ldr	r2, [sp, #28]
 8004704:	2100      	movs	r1, #0
 8004706:	200a      	movs	r0, #10
 8004708:	46a8      	mov	r8, r5
 800470a:	3501      	adds	r5, #1
 800470c:	f898 3000 	ldrb.w	r3, [r8]
 8004710:	3b30      	subs	r3, #48	; 0x30
 8004712:	2b09      	cmp	r3, #9
 8004714:	d96d      	bls.n	80047f2 <_vfiprintf_r+0x1a6>
 8004716:	b371      	cbz	r1, 8004776 <_vfiprintf_r+0x12a>
 8004718:	e026      	b.n	8004768 <_vfiprintf_r+0x11c>
 800471a:	4b51      	ldr	r3, [pc, #324]	; (8004860 <_vfiprintf_r+0x214>)
 800471c:	429c      	cmp	r4, r3
 800471e:	d101      	bne.n	8004724 <_vfiprintf_r+0xd8>
 8004720:	68b4      	ldr	r4, [r6, #8]
 8004722:	e7a3      	b.n	800466c <_vfiprintf_r+0x20>
 8004724:	4b4f      	ldr	r3, [pc, #316]	; (8004864 <_vfiprintf_r+0x218>)
 8004726:	429c      	cmp	r4, r3
 8004728:	bf08      	it	eq
 800472a:	68f4      	ldreq	r4, [r6, #12]
 800472c:	e79e      	b.n	800466c <_vfiprintf_r+0x20>
 800472e:	4621      	mov	r1, r4
 8004730:	4630      	mov	r0, r6
 8004732:	f000 faef 	bl	8004d14 <__swsetup_r>
 8004736:	2800      	cmp	r0, #0
 8004738:	d09e      	beq.n	8004678 <_vfiprintf_r+0x2c>
 800473a:	f04f 30ff 	mov.w	r0, #4294967295
 800473e:	b01d      	add	sp, #116	; 0x74
 8004740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004744:	2b25      	cmp	r3, #37	; 0x25
 8004746:	d0a7      	beq.n	8004698 <_vfiprintf_r+0x4c>
 8004748:	46a8      	mov	r8, r5
 800474a:	e7a0      	b.n	800468e <_vfiprintf_r+0x42>
 800474c:	4a43      	ldr	r2, [pc, #268]	; (800485c <_vfiprintf_r+0x210>)
 800474e:	1a80      	subs	r0, r0, r2
 8004750:	fa0b f000 	lsl.w	r0, fp, r0
 8004754:	4318      	orrs	r0, r3
 8004756:	9004      	str	r0, [sp, #16]
 8004758:	4645      	mov	r5, r8
 800475a:	e7bb      	b.n	80046d4 <_vfiprintf_r+0x88>
 800475c:	9a03      	ldr	r2, [sp, #12]
 800475e:	1d11      	adds	r1, r2, #4
 8004760:	6812      	ldr	r2, [r2, #0]
 8004762:	9103      	str	r1, [sp, #12]
 8004764:	2a00      	cmp	r2, #0
 8004766:	db01      	blt.n	800476c <_vfiprintf_r+0x120>
 8004768:	9207      	str	r2, [sp, #28]
 800476a:	e004      	b.n	8004776 <_vfiprintf_r+0x12a>
 800476c:	4252      	negs	r2, r2
 800476e:	f043 0302 	orr.w	r3, r3, #2
 8004772:	9207      	str	r2, [sp, #28]
 8004774:	9304      	str	r3, [sp, #16]
 8004776:	f898 3000 	ldrb.w	r3, [r8]
 800477a:	2b2e      	cmp	r3, #46	; 0x2e
 800477c:	d110      	bne.n	80047a0 <_vfiprintf_r+0x154>
 800477e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8004782:	2b2a      	cmp	r3, #42	; 0x2a
 8004784:	f108 0101 	add.w	r1, r8, #1
 8004788:	d137      	bne.n	80047fa <_vfiprintf_r+0x1ae>
 800478a:	9b03      	ldr	r3, [sp, #12]
 800478c:	1d1a      	adds	r2, r3, #4
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	9203      	str	r2, [sp, #12]
 8004792:	2b00      	cmp	r3, #0
 8004794:	bfb8      	it	lt
 8004796:	f04f 33ff 	movlt.w	r3, #4294967295
 800479a:	f108 0802 	add.w	r8, r8, #2
 800479e:	9305      	str	r3, [sp, #20]
 80047a0:	4d31      	ldr	r5, [pc, #196]	; (8004868 <_vfiprintf_r+0x21c>)
 80047a2:	f898 1000 	ldrb.w	r1, [r8]
 80047a6:	2203      	movs	r2, #3
 80047a8:	4628      	mov	r0, r5
 80047aa:	f7fb fd11 	bl	80001d0 <memchr>
 80047ae:	b140      	cbz	r0, 80047c2 <_vfiprintf_r+0x176>
 80047b0:	2340      	movs	r3, #64	; 0x40
 80047b2:	1b40      	subs	r0, r0, r5
 80047b4:	fa03 f000 	lsl.w	r0, r3, r0
 80047b8:	9b04      	ldr	r3, [sp, #16]
 80047ba:	4303      	orrs	r3, r0
 80047bc:	9304      	str	r3, [sp, #16]
 80047be:	f108 0801 	add.w	r8, r8, #1
 80047c2:	f898 1000 	ldrb.w	r1, [r8]
 80047c6:	4829      	ldr	r0, [pc, #164]	; (800486c <_vfiprintf_r+0x220>)
 80047c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80047cc:	2206      	movs	r2, #6
 80047ce:	f108 0701 	add.w	r7, r8, #1
 80047d2:	f7fb fcfd 	bl	80001d0 <memchr>
 80047d6:	2800      	cmp	r0, #0
 80047d8:	d034      	beq.n	8004844 <_vfiprintf_r+0x1f8>
 80047da:	4b25      	ldr	r3, [pc, #148]	; (8004870 <_vfiprintf_r+0x224>)
 80047dc:	bb03      	cbnz	r3, 8004820 <_vfiprintf_r+0x1d4>
 80047de:	9b03      	ldr	r3, [sp, #12]
 80047e0:	3307      	adds	r3, #7
 80047e2:	f023 0307 	bic.w	r3, r3, #7
 80047e6:	3308      	adds	r3, #8
 80047e8:	9303      	str	r3, [sp, #12]
 80047ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047ec:	444b      	add	r3, r9
 80047ee:	9309      	str	r3, [sp, #36]	; 0x24
 80047f0:	e74c      	b.n	800468c <_vfiprintf_r+0x40>
 80047f2:	fb00 3202 	mla	r2, r0, r2, r3
 80047f6:	2101      	movs	r1, #1
 80047f8:	e786      	b.n	8004708 <_vfiprintf_r+0xbc>
 80047fa:	2300      	movs	r3, #0
 80047fc:	9305      	str	r3, [sp, #20]
 80047fe:	4618      	mov	r0, r3
 8004800:	250a      	movs	r5, #10
 8004802:	4688      	mov	r8, r1
 8004804:	3101      	adds	r1, #1
 8004806:	f898 2000 	ldrb.w	r2, [r8]
 800480a:	3a30      	subs	r2, #48	; 0x30
 800480c:	2a09      	cmp	r2, #9
 800480e:	d903      	bls.n	8004818 <_vfiprintf_r+0x1cc>
 8004810:	2b00      	cmp	r3, #0
 8004812:	d0c5      	beq.n	80047a0 <_vfiprintf_r+0x154>
 8004814:	9005      	str	r0, [sp, #20]
 8004816:	e7c3      	b.n	80047a0 <_vfiprintf_r+0x154>
 8004818:	fb05 2000 	mla	r0, r5, r0, r2
 800481c:	2301      	movs	r3, #1
 800481e:	e7f0      	b.n	8004802 <_vfiprintf_r+0x1b6>
 8004820:	ab03      	add	r3, sp, #12
 8004822:	9300      	str	r3, [sp, #0]
 8004824:	4622      	mov	r2, r4
 8004826:	4b13      	ldr	r3, [pc, #76]	; (8004874 <_vfiprintf_r+0x228>)
 8004828:	a904      	add	r1, sp, #16
 800482a:	4630      	mov	r0, r6
 800482c:	f3af 8000 	nop.w
 8004830:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004834:	4681      	mov	r9, r0
 8004836:	d1d8      	bne.n	80047ea <_vfiprintf_r+0x19e>
 8004838:	89a3      	ldrh	r3, [r4, #12]
 800483a:	065b      	lsls	r3, r3, #25
 800483c:	f53f af7d 	bmi.w	800473a <_vfiprintf_r+0xee>
 8004840:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004842:	e77c      	b.n	800473e <_vfiprintf_r+0xf2>
 8004844:	ab03      	add	r3, sp, #12
 8004846:	9300      	str	r3, [sp, #0]
 8004848:	4622      	mov	r2, r4
 800484a:	4b0a      	ldr	r3, [pc, #40]	; (8004874 <_vfiprintf_r+0x228>)
 800484c:	a904      	add	r1, sp, #16
 800484e:	4630      	mov	r0, r6
 8004850:	f000 f888 	bl	8004964 <_printf_i>
 8004854:	e7ec      	b.n	8004830 <_vfiprintf_r+0x1e4>
 8004856:	bf00      	nop
 8004858:	0800533c 	.word	0x0800533c
 800485c:	08005380 	.word	0x08005380
 8004860:	0800535c 	.word	0x0800535c
 8004864:	0800531c 	.word	0x0800531c
 8004868:	08005386 	.word	0x08005386
 800486c:	0800538a 	.word	0x0800538a
 8004870:	00000000 	.word	0x00000000
 8004874:	08004629 	.word	0x08004629

08004878 <_printf_common>:
 8004878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800487c:	4691      	mov	r9, r2
 800487e:	461f      	mov	r7, r3
 8004880:	688a      	ldr	r2, [r1, #8]
 8004882:	690b      	ldr	r3, [r1, #16]
 8004884:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004888:	4293      	cmp	r3, r2
 800488a:	bfb8      	it	lt
 800488c:	4613      	movlt	r3, r2
 800488e:	f8c9 3000 	str.w	r3, [r9]
 8004892:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004896:	4606      	mov	r6, r0
 8004898:	460c      	mov	r4, r1
 800489a:	b112      	cbz	r2, 80048a2 <_printf_common+0x2a>
 800489c:	3301      	adds	r3, #1
 800489e:	f8c9 3000 	str.w	r3, [r9]
 80048a2:	6823      	ldr	r3, [r4, #0]
 80048a4:	0699      	lsls	r1, r3, #26
 80048a6:	bf42      	ittt	mi
 80048a8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80048ac:	3302      	addmi	r3, #2
 80048ae:	f8c9 3000 	strmi.w	r3, [r9]
 80048b2:	6825      	ldr	r5, [r4, #0]
 80048b4:	f015 0506 	ands.w	r5, r5, #6
 80048b8:	d107      	bne.n	80048ca <_printf_common+0x52>
 80048ba:	f104 0a19 	add.w	sl, r4, #25
 80048be:	68e3      	ldr	r3, [r4, #12]
 80048c0:	f8d9 2000 	ldr.w	r2, [r9]
 80048c4:	1a9b      	subs	r3, r3, r2
 80048c6:	429d      	cmp	r5, r3
 80048c8:	db29      	blt.n	800491e <_printf_common+0xa6>
 80048ca:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80048ce:	6822      	ldr	r2, [r4, #0]
 80048d0:	3300      	adds	r3, #0
 80048d2:	bf18      	it	ne
 80048d4:	2301      	movne	r3, #1
 80048d6:	0692      	lsls	r2, r2, #26
 80048d8:	d42e      	bmi.n	8004938 <_printf_common+0xc0>
 80048da:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80048de:	4639      	mov	r1, r7
 80048e0:	4630      	mov	r0, r6
 80048e2:	47c0      	blx	r8
 80048e4:	3001      	adds	r0, #1
 80048e6:	d021      	beq.n	800492c <_printf_common+0xb4>
 80048e8:	6823      	ldr	r3, [r4, #0]
 80048ea:	68e5      	ldr	r5, [r4, #12]
 80048ec:	f8d9 2000 	ldr.w	r2, [r9]
 80048f0:	f003 0306 	and.w	r3, r3, #6
 80048f4:	2b04      	cmp	r3, #4
 80048f6:	bf08      	it	eq
 80048f8:	1aad      	subeq	r5, r5, r2
 80048fa:	68a3      	ldr	r3, [r4, #8]
 80048fc:	6922      	ldr	r2, [r4, #16]
 80048fe:	bf0c      	ite	eq
 8004900:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004904:	2500      	movne	r5, #0
 8004906:	4293      	cmp	r3, r2
 8004908:	bfc4      	itt	gt
 800490a:	1a9b      	subgt	r3, r3, r2
 800490c:	18ed      	addgt	r5, r5, r3
 800490e:	f04f 0900 	mov.w	r9, #0
 8004912:	341a      	adds	r4, #26
 8004914:	454d      	cmp	r5, r9
 8004916:	d11b      	bne.n	8004950 <_printf_common+0xd8>
 8004918:	2000      	movs	r0, #0
 800491a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800491e:	2301      	movs	r3, #1
 8004920:	4652      	mov	r2, sl
 8004922:	4639      	mov	r1, r7
 8004924:	4630      	mov	r0, r6
 8004926:	47c0      	blx	r8
 8004928:	3001      	adds	r0, #1
 800492a:	d103      	bne.n	8004934 <_printf_common+0xbc>
 800492c:	f04f 30ff 	mov.w	r0, #4294967295
 8004930:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004934:	3501      	adds	r5, #1
 8004936:	e7c2      	b.n	80048be <_printf_common+0x46>
 8004938:	18e1      	adds	r1, r4, r3
 800493a:	1c5a      	adds	r2, r3, #1
 800493c:	2030      	movs	r0, #48	; 0x30
 800493e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004942:	4422      	add	r2, r4
 8004944:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004948:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800494c:	3302      	adds	r3, #2
 800494e:	e7c4      	b.n	80048da <_printf_common+0x62>
 8004950:	2301      	movs	r3, #1
 8004952:	4622      	mov	r2, r4
 8004954:	4639      	mov	r1, r7
 8004956:	4630      	mov	r0, r6
 8004958:	47c0      	blx	r8
 800495a:	3001      	adds	r0, #1
 800495c:	d0e6      	beq.n	800492c <_printf_common+0xb4>
 800495e:	f109 0901 	add.w	r9, r9, #1
 8004962:	e7d7      	b.n	8004914 <_printf_common+0x9c>

08004964 <_printf_i>:
 8004964:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004968:	4617      	mov	r7, r2
 800496a:	7e0a      	ldrb	r2, [r1, #24]
 800496c:	b085      	sub	sp, #20
 800496e:	2a6e      	cmp	r2, #110	; 0x6e
 8004970:	4698      	mov	r8, r3
 8004972:	4606      	mov	r6, r0
 8004974:	460c      	mov	r4, r1
 8004976:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004978:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800497c:	f000 80bc 	beq.w	8004af8 <_printf_i+0x194>
 8004980:	d81a      	bhi.n	80049b8 <_printf_i+0x54>
 8004982:	2a63      	cmp	r2, #99	; 0x63
 8004984:	d02e      	beq.n	80049e4 <_printf_i+0x80>
 8004986:	d80a      	bhi.n	800499e <_printf_i+0x3a>
 8004988:	2a00      	cmp	r2, #0
 800498a:	f000 80c8 	beq.w	8004b1e <_printf_i+0x1ba>
 800498e:	2a58      	cmp	r2, #88	; 0x58
 8004990:	f000 808a 	beq.w	8004aa8 <_printf_i+0x144>
 8004994:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004998:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800499c:	e02a      	b.n	80049f4 <_printf_i+0x90>
 800499e:	2a64      	cmp	r2, #100	; 0x64
 80049a0:	d001      	beq.n	80049a6 <_printf_i+0x42>
 80049a2:	2a69      	cmp	r2, #105	; 0x69
 80049a4:	d1f6      	bne.n	8004994 <_printf_i+0x30>
 80049a6:	6821      	ldr	r1, [r4, #0]
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	f011 0f80 	tst.w	r1, #128	; 0x80
 80049ae:	d023      	beq.n	80049f8 <_printf_i+0x94>
 80049b0:	1d11      	adds	r1, r2, #4
 80049b2:	6019      	str	r1, [r3, #0]
 80049b4:	6813      	ldr	r3, [r2, #0]
 80049b6:	e027      	b.n	8004a08 <_printf_i+0xa4>
 80049b8:	2a73      	cmp	r2, #115	; 0x73
 80049ba:	f000 80b4 	beq.w	8004b26 <_printf_i+0x1c2>
 80049be:	d808      	bhi.n	80049d2 <_printf_i+0x6e>
 80049c0:	2a6f      	cmp	r2, #111	; 0x6f
 80049c2:	d02a      	beq.n	8004a1a <_printf_i+0xb6>
 80049c4:	2a70      	cmp	r2, #112	; 0x70
 80049c6:	d1e5      	bne.n	8004994 <_printf_i+0x30>
 80049c8:	680a      	ldr	r2, [r1, #0]
 80049ca:	f042 0220 	orr.w	r2, r2, #32
 80049ce:	600a      	str	r2, [r1, #0]
 80049d0:	e003      	b.n	80049da <_printf_i+0x76>
 80049d2:	2a75      	cmp	r2, #117	; 0x75
 80049d4:	d021      	beq.n	8004a1a <_printf_i+0xb6>
 80049d6:	2a78      	cmp	r2, #120	; 0x78
 80049d8:	d1dc      	bne.n	8004994 <_printf_i+0x30>
 80049da:	2278      	movs	r2, #120	; 0x78
 80049dc:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80049e0:	496e      	ldr	r1, [pc, #440]	; (8004b9c <_printf_i+0x238>)
 80049e2:	e064      	b.n	8004aae <_printf_i+0x14a>
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80049ea:	1d11      	adds	r1, r2, #4
 80049ec:	6019      	str	r1, [r3, #0]
 80049ee:	6813      	ldr	r3, [r2, #0]
 80049f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80049f4:	2301      	movs	r3, #1
 80049f6:	e0a3      	b.n	8004b40 <_printf_i+0x1dc>
 80049f8:	f011 0f40 	tst.w	r1, #64	; 0x40
 80049fc:	f102 0104 	add.w	r1, r2, #4
 8004a00:	6019      	str	r1, [r3, #0]
 8004a02:	d0d7      	beq.n	80049b4 <_printf_i+0x50>
 8004a04:	f9b2 3000 	ldrsh.w	r3, [r2]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	da03      	bge.n	8004a14 <_printf_i+0xb0>
 8004a0c:	222d      	movs	r2, #45	; 0x2d
 8004a0e:	425b      	negs	r3, r3
 8004a10:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004a14:	4962      	ldr	r1, [pc, #392]	; (8004ba0 <_printf_i+0x23c>)
 8004a16:	220a      	movs	r2, #10
 8004a18:	e017      	b.n	8004a4a <_printf_i+0xe6>
 8004a1a:	6820      	ldr	r0, [r4, #0]
 8004a1c:	6819      	ldr	r1, [r3, #0]
 8004a1e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8004a22:	d003      	beq.n	8004a2c <_printf_i+0xc8>
 8004a24:	1d08      	adds	r0, r1, #4
 8004a26:	6018      	str	r0, [r3, #0]
 8004a28:	680b      	ldr	r3, [r1, #0]
 8004a2a:	e006      	b.n	8004a3a <_printf_i+0xd6>
 8004a2c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004a30:	f101 0004 	add.w	r0, r1, #4
 8004a34:	6018      	str	r0, [r3, #0]
 8004a36:	d0f7      	beq.n	8004a28 <_printf_i+0xc4>
 8004a38:	880b      	ldrh	r3, [r1, #0]
 8004a3a:	4959      	ldr	r1, [pc, #356]	; (8004ba0 <_printf_i+0x23c>)
 8004a3c:	2a6f      	cmp	r2, #111	; 0x6f
 8004a3e:	bf14      	ite	ne
 8004a40:	220a      	movne	r2, #10
 8004a42:	2208      	moveq	r2, #8
 8004a44:	2000      	movs	r0, #0
 8004a46:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8004a4a:	6865      	ldr	r5, [r4, #4]
 8004a4c:	60a5      	str	r5, [r4, #8]
 8004a4e:	2d00      	cmp	r5, #0
 8004a50:	f2c0 809c 	blt.w	8004b8c <_printf_i+0x228>
 8004a54:	6820      	ldr	r0, [r4, #0]
 8004a56:	f020 0004 	bic.w	r0, r0, #4
 8004a5a:	6020      	str	r0, [r4, #0]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d13f      	bne.n	8004ae0 <_printf_i+0x17c>
 8004a60:	2d00      	cmp	r5, #0
 8004a62:	f040 8095 	bne.w	8004b90 <_printf_i+0x22c>
 8004a66:	4675      	mov	r5, lr
 8004a68:	2a08      	cmp	r2, #8
 8004a6a:	d10b      	bne.n	8004a84 <_printf_i+0x120>
 8004a6c:	6823      	ldr	r3, [r4, #0]
 8004a6e:	07da      	lsls	r2, r3, #31
 8004a70:	d508      	bpl.n	8004a84 <_printf_i+0x120>
 8004a72:	6923      	ldr	r3, [r4, #16]
 8004a74:	6862      	ldr	r2, [r4, #4]
 8004a76:	429a      	cmp	r2, r3
 8004a78:	bfde      	ittt	le
 8004a7a:	2330      	movle	r3, #48	; 0x30
 8004a7c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004a80:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004a84:	ebae 0305 	sub.w	r3, lr, r5
 8004a88:	6123      	str	r3, [r4, #16]
 8004a8a:	f8cd 8000 	str.w	r8, [sp]
 8004a8e:	463b      	mov	r3, r7
 8004a90:	aa03      	add	r2, sp, #12
 8004a92:	4621      	mov	r1, r4
 8004a94:	4630      	mov	r0, r6
 8004a96:	f7ff feef 	bl	8004878 <_printf_common>
 8004a9a:	3001      	adds	r0, #1
 8004a9c:	d155      	bne.n	8004b4a <_printf_i+0x1e6>
 8004a9e:	f04f 30ff 	mov.w	r0, #4294967295
 8004aa2:	b005      	add	sp, #20
 8004aa4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004aa8:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8004aac:	493c      	ldr	r1, [pc, #240]	; (8004ba0 <_printf_i+0x23c>)
 8004aae:	6822      	ldr	r2, [r4, #0]
 8004ab0:	6818      	ldr	r0, [r3, #0]
 8004ab2:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004ab6:	f100 0504 	add.w	r5, r0, #4
 8004aba:	601d      	str	r5, [r3, #0]
 8004abc:	d001      	beq.n	8004ac2 <_printf_i+0x15e>
 8004abe:	6803      	ldr	r3, [r0, #0]
 8004ac0:	e002      	b.n	8004ac8 <_printf_i+0x164>
 8004ac2:	0655      	lsls	r5, r2, #25
 8004ac4:	d5fb      	bpl.n	8004abe <_printf_i+0x15a>
 8004ac6:	8803      	ldrh	r3, [r0, #0]
 8004ac8:	07d0      	lsls	r0, r2, #31
 8004aca:	bf44      	itt	mi
 8004acc:	f042 0220 	orrmi.w	r2, r2, #32
 8004ad0:	6022      	strmi	r2, [r4, #0]
 8004ad2:	b91b      	cbnz	r3, 8004adc <_printf_i+0x178>
 8004ad4:	6822      	ldr	r2, [r4, #0]
 8004ad6:	f022 0220 	bic.w	r2, r2, #32
 8004ada:	6022      	str	r2, [r4, #0]
 8004adc:	2210      	movs	r2, #16
 8004ade:	e7b1      	b.n	8004a44 <_printf_i+0xe0>
 8004ae0:	4675      	mov	r5, lr
 8004ae2:	fbb3 f0f2 	udiv	r0, r3, r2
 8004ae6:	fb02 3310 	mls	r3, r2, r0, r3
 8004aea:	5ccb      	ldrb	r3, [r1, r3]
 8004aec:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004af0:	4603      	mov	r3, r0
 8004af2:	2800      	cmp	r0, #0
 8004af4:	d1f5      	bne.n	8004ae2 <_printf_i+0x17e>
 8004af6:	e7b7      	b.n	8004a68 <_printf_i+0x104>
 8004af8:	6808      	ldr	r0, [r1, #0]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	6949      	ldr	r1, [r1, #20]
 8004afe:	f010 0f80 	tst.w	r0, #128	; 0x80
 8004b02:	d004      	beq.n	8004b0e <_printf_i+0x1aa>
 8004b04:	1d10      	adds	r0, r2, #4
 8004b06:	6018      	str	r0, [r3, #0]
 8004b08:	6813      	ldr	r3, [r2, #0]
 8004b0a:	6019      	str	r1, [r3, #0]
 8004b0c:	e007      	b.n	8004b1e <_printf_i+0x1ba>
 8004b0e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004b12:	f102 0004 	add.w	r0, r2, #4
 8004b16:	6018      	str	r0, [r3, #0]
 8004b18:	6813      	ldr	r3, [r2, #0]
 8004b1a:	d0f6      	beq.n	8004b0a <_printf_i+0x1a6>
 8004b1c:	8019      	strh	r1, [r3, #0]
 8004b1e:	2300      	movs	r3, #0
 8004b20:	6123      	str	r3, [r4, #16]
 8004b22:	4675      	mov	r5, lr
 8004b24:	e7b1      	b.n	8004a8a <_printf_i+0x126>
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	1d11      	adds	r1, r2, #4
 8004b2a:	6019      	str	r1, [r3, #0]
 8004b2c:	6815      	ldr	r5, [r2, #0]
 8004b2e:	6862      	ldr	r2, [r4, #4]
 8004b30:	2100      	movs	r1, #0
 8004b32:	4628      	mov	r0, r5
 8004b34:	f7fb fb4c 	bl	80001d0 <memchr>
 8004b38:	b108      	cbz	r0, 8004b3e <_printf_i+0x1da>
 8004b3a:	1b40      	subs	r0, r0, r5
 8004b3c:	6060      	str	r0, [r4, #4]
 8004b3e:	6863      	ldr	r3, [r4, #4]
 8004b40:	6123      	str	r3, [r4, #16]
 8004b42:	2300      	movs	r3, #0
 8004b44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b48:	e79f      	b.n	8004a8a <_printf_i+0x126>
 8004b4a:	6923      	ldr	r3, [r4, #16]
 8004b4c:	462a      	mov	r2, r5
 8004b4e:	4639      	mov	r1, r7
 8004b50:	4630      	mov	r0, r6
 8004b52:	47c0      	blx	r8
 8004b54:	3001      	adds	r0, #1
 8004b56:	d0a2      	beq.n	8004a9e <_printf_i+0x13a>
 8004b58:	6823      	ldr	r3, [r4, #0]
 8004b5a:	079b      	lsls	r3, r3, #30
 8004b5c:	d507      	bpl.n	8004b6e <_printf_i+0x20a>
 8004b5e:	2500      	movs	r5, #0
 8004b60:	f104 0919 	add.w	r9, r4, #25
 8004b64:	68e3      	ldr	r3, [r4, #12]
 8004b66:	9a03      	ldr	r2, [sp, #12]
 8004b68:	1a9b      	subs	r3, r3, r2
 8004b6a:	429d      	cmp	r5, r3
 8004b6c:	db05      	blt.n	8004b7a <_printf_i+0x216>
 8004b6e:	68e0      	ldr	r0, [r4, #12]
 8004b70:	9b03      	ldr	r3, [sp, #12]
 8004b72:	4298      	cmp	r0, r3
 8004b74:	bfb8      	it	lt
 8004b76:	4618      	movlt	r0, r3
 8004b78:	e793      	b.n	8004aa2 <_printf_i+0x13e>
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	464a      	mov	r2, r9
 8004b7e:	4639      	mov	r1, r7
 8004b80:	4630      	mov	r0, r6
 8004b82:	47c0      	blx	r8
 8004b84:	3001      	adds	r0, #1
 8004b86:	d08a      	beq.n	8004a9e <_printf_i+0x13a>
 8004b88:	3501      	adds	r5, #1
 8004b8a:	e7eb      	b.n	8004b64 <_printf_i+0x200>
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d1a7      	bne.n	8004ae0 <_printf_i+0x17c>
 8004b90:	780b      	ldrb	r3, [r1, #0]
 8004b92:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b96:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b9a:	e765      	b.n	8004a68 <_printf_i+0x104>
 8004b9c:	080053a2 	.word	0x080053a2
 8004ba0:	08005391 	.word	0x08005391

08004ba4 <_sbrk_r>:
 8004ba4:	b538      	push	{r3, r4, r5, lr}
 8004ba6:	4c06      	ldr	r4, [pc, #24]	; (8004bc0 <_sbrk_r+0x1c>)
 8004ba8:	2300      	movs	r3, #0
 8004baa:	4605      	mov	r5, r0
 8004bac:	4608      	mov	r0, r1
 8004bae:	6023      	str	r3, [r4, #0]
 8004bb0:	f000 fb02 	bl	80051b8 <_sbrk>
 8004bb4:	1c43      	adds	r3, r0, #1
 8004bb6:	d102      	bne.n	8004bbe <_sbrk_r+0x1a>
 8004bb8:	6823      	ldr	r3, [r4, #0]
 8004bba:	b103      	cbz	r3, 8004bbe <_sbrk_r+0x1a>
 8004bbc:	602b      	str	r3, [r5, #0]
 8004bbe:	bd38      	pop	{r3, r4, r5, pc}
 8004bc0:	200003e4 	.word	0x200003e4

08004bc4 <__sread>:
 8004bc4:	b510      	push	{r4, lr}
 8004bc6:	460c      	mov	r4, r1
 8004bc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bcc:	f000 fa98 	bl	8005100 <_read_r>
 8004bd0:	2800      	cmp	r0, #0
 8004bd2:	bfab      	itete	ge
 8004bd4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004bd6:	89a3      	ldrhlt	r3, [r4, #12]
 8004bd8:	181b      	addge	r3, r3, r0
 8004bda:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004bde:	bfac      	ite	ge
 8004be0:	6563      	strge	r3, [r4, #84]	; 0x54
 8004be2:	81a3      	strhlt	r3, [r4, #12]
 8004be4:	bd10      	pop	{r4, pc}

08004be6 <__swrite>:
 8004be6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bea:	461f      	mov	r7, r3
 8004bec:	898b      	ldrh	r3, [r1, #12]
 8004bee:	05db      	lsls	r3, r3, #23
 8004bf0:	4605      	mov	r5, r0
 8004bf2:	460c      	mov	r4, r1
 8004bf4:	4616      	mov	r6, r2
 8004bf6:	d505      	bpl.n	8004c04 <__swrite+0x1e>
 8004bf8:	2302      	movs	r3, #2
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c00:	f000 f9b8 	bl	8004f74 <_lseek_r>
 8004c04:	89a3      	ldrh	r3, [r4, #12]
 8004c06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c0e:	81a3      	strh	r3, [r4, #12]
 8004c10:	4632      	mov	r2, r6
 8004c12:	463b      	mov	r3, r7
 8004c14:	4628      	mov	r0, r5
 8004c16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c1a:	f000 b869 	b.w	8004cf0 <_write_r>

08004c1e <__sseek>:
 8004c1e:	b510      	push	{r4, lr}
 8004c20:	460c      	mov	r4, r1
 8004c22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c26:	f000 f9a5 	bl	8004f74 <_lseek_r>
 8004c2a:	1c43      	adds	r3, r0, #1
 8004c2c:	89a3      	ldrh	r3, [r4, #12]
 8004c2e:	bf15      	itete	ne
 8004c30:	6560      	strne	r0, [r4, #84]	; 0x54
 8004c32:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004c36:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004c3a:	81a3      	strheq	r3, [r4, #12]
 8004c3c:	bf18      	it	ne
 8004c3e:	81a3      	strhne	r3, [r4, #12]
 8004c40:	bd10      	pop	{r4, pc}

08004c42 <__sclose>:
 8004c42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c46:	f000 b8d3 	b.w	8004df0 <_close_r>
	...

08004c4c <__swbuf_r>:
 8004c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c4e:	460e      	mov	r6, r1
 8004c50:	4614      	mov	r4, r2
 8004c52:	4605      	mov	r5, r0
 8004c54:	b118      	cbz	r0, 8004c5e <__swbuf_r+0x12>
 8004c56:	6983      	ldr	r3, [r0, #24]
 8004c58:	b90b      	cbnz	r3, 8004c5e <__swbuf_r+0x12>
 8004c5a:	f7ff fbe5 	bl	8004428 <__sinit>
 8004c5e:	4b21      	ldr	r3, [pc, #132]	; (8004ce4 <__swbuf_r+0x98>)
 8004c60:	429c      	cmp	r4, r3
 8004c62:	d12a      	bne.n	8004cba <__swbuf_r+0x6e>
 8004c64:	686c      	ldr	r4, [r5, #4]
 8004c66:	69a3      	ldr	r3, [r4, #24]
 8004c68:	60a3      	str	r3, [r4, #8]
 8004c6a:	89a3      	ldrh	r3, [r4, #12]
 8004c6c:	071a      	lsls	r2, r3, #28
 8004c6e:	d52e      	bpl.n	8004cce <__swbuf_r+0x82>
 8004c70:	6923      	ldr	r3, [r4, #16]
 8004c72:	b363      	cbz	r3, 8004cce <__swbuf_r+0x82>
 8004c74:	6923      	ldr	r3, [r4, #16]
 8004c76:	6820      	ldr	r0, [r4, #0]
 8004c78:	1ac0      	subs	r0, r0, r3
 8004c7a:	6963      	ldr	r3, [r4, #20]
 8004c7c:	b2f6      	uxtb	r6, r6
 8004c7e:	4298      	cmp	r0, r3
 8004c80:	4637      	mov	r7, r6
 8004c82:	db04      	blt.n	8004c8e <__swbuf_r+0x42>
 8004c84:	4621      	mov	r1, r4
 8004c86:	4628      	mov	r0, r5
 8004c88:	f000 f94a 	bl	8004f20 <_fflush_r>
 8004c8c:	bb28      	cbnz	r0, 8004cda <__swbuf_r+0x8e>
 8004c8e:	68a3      	ldr	r3, [r4, #8]
 8004c90:	3b01      	subs	r3, #1
 8004c92:	60a3      	str	r3, [r4, #8]
 8004c94:	6823      	ldr	r3, [r4, #0]
 8004c96:	1c5a      	adds	r2, r3, #1
 8004c98:	6022      	str	r2, [r4, #0]
 8004c9a:	701e      	strb	r6, [r3, #0]
 8004c9c:	6963      	ldr	r3, [r4, #20]
 8004c9e:	3001      	adds	r0, #1
 8004ca0:	4298      	cmp	r0, r3
 8004ca2:	d004      	beq.n	8004cae <__swbuf_r+0x62>
 8004ca4:	89a3      	ldrh	r3, [r4, #12]
 8004ca6:	07db      	lsls	r3, r3, #31
 8004ca8:	d519      	bpl.n	8004cde <__swbuf_r+0x92>
 8004caa:	2e0a      	cmp	r6, #10
 8004cac:	d117      	bne.n	8004cde <__swbuf_r+0x92>
 8004cae:	4621      	mov	r1, r4
 8004cb0:	4628      	mov	r0, r5
 8004cb2:	f000 f935 	bl	8004f20 <_fflush_r>
 8004cb6:	b190      	cbz	r0, 8004cde <__swbuf_r+0x92>
 8004cb8:	e00f      	b.n	8004cda <__swbuf_r+0x8e>
 8004cba:	4b0b      	ldr	r3, [pc, #44]	; (8004ce8 <__swbuf_r+0x9c>)
 8004cbc:	429c      	cmp	r4, r3
 8004cbe:	d101      	bne.n	8004cc4 <__swbuf_r+0x78>
 8004cc0:	68ac      	ldr	r4, [r5, #8]
 8004cc2:	e7d0      	b.n	8004c66 <__swbuf_r+0x1a>
 8004cc4:	4b09      	ldr	r3, [pc, #36]	; (8004cec <__swbuf_r+0xa0>)
 8004cc6:	429c      	cmp	r4, r3
 8004cc8:	bf08      	it	eq
 8004cca:	68ec      	ldreq	r4, [r5, #12]
 8004ccc:	e7cb      	b.n	8004c66 <__swbuf_r+0x1a>
 8004cce:	4621      	mov	r1, r4
 8004cd0:	4628      	mov	r0, r5
 8004cd2:	f000 f81f 	bl	8004d14 <__swsetup_r>
 8004cd6:	2800      	cmp	r0, #0
 8004cd8:	d0cc      	beq.n	8004c74 <__swbuf_r+0x28>
 8004cda:	f04f 37ff 	mov.w	r7, #4294967295
 8004cde:	4638      	mov	r0, r7
 8004ce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ce2:	bf00      	nop
 8004ce4:	0800533c 	.word	0x0800533c
 8004ce8:	0800535c 	.word	0x0800535c
 8004cec:	0800531c 	.word	0x0800531c

08004cf0 <_write_r>:
 8004cf0:	b538      	push	{r3, r4, r5, lr}
 8004cf2:	4c07      	ldr	r4, [pc, #28]	; (8004d10 <_write_r+0x20>)
 8004cf4:	4605      	mov	r5, r0
 8004cf6:	4608      	mov	r0, r1
 8004cf8:	4611      	mov	r1, r2
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	6022      	str	r2, [r4, #0]
 8004cfe:	461a      	mov	r2, r3
 8004d00:	f000 fa68 	bl	80051d4 <_write>
 8004d04:	1c43      	adds	r3, r0, #1
 8004d06:	d102      	bne.n	8004d0e <_write_r+0x1e>
 8004d08:	6823      	ldr	r3, [r4, #0]
 8004d0a:	b103      	cbz	r3, 8004d0e <_write_r+0x1e>
 8004d0c:	602b      	str	r3, [r5, #0]
 8004d0e:	bd38      	pop	{r3, r4, r5, pc}
 8004d10:	200003e4 	.word	0x200003e4

08004d14 <__swsetup_r>:
 8004d14:	4b32      	ldr	r3, [pc, #200]	; (8004de0 <__swsetup_r+0xcc>)
 8004d16:	b570      	push	{r4, r5, r6, lr}
 8004d18:	681d      	ldr	r5, [r3, #0]
 8004d1a:	4606      	mov	r6, r0
 8004d1c:	460c      	mov	r4, r1
 8004d1e:	b125      	cbz	r5, 8004d2a <__swsetup_r+0x16>
 8004d20:	69ab      	ldr	r3, [r5, #24]
 8004d22:	b913      	cbnz	r3, 8004d2a <__swsetup_r+0x16>
 8004d24:	4628      	mov	r0, r5
 8004d26:	f7ff fb7f 	bl	8004428 <__sinit>
 8004d2a:	4b2e      	ldr	r3, [pc, #184]	; (8004de4 <__swsetup_r+0xd0>)
 8004d2c:	429c      	cmp	r4, r3
 8004d2e:	d10f      	bne.n	8004d50 <__swsetup_r+0x3c>
 8004d30:	686c      	ldr	r4, [r5, #4]
 8004d32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d36:	b29a      	uxth	r2, r3
 8004d38:	0715      	lsls	r5, r2, #28
 8004d3a:	d42c      	bmi.n	8004d96 <__swsetup_r+0x82>
 8004d3c:	06d0      	lsls	r0, r2, #27
 8004d3e:	d411      	bmi.n	8004d64 <__swsetup_r+0x50>
 8004d40:	2209      	movs	r2, #9
 8004d42:	6032      	str	r2, [r6, #0]
 8004d44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d48:	81a3      	strh	r3, [r4, #12]
 8004d4a:	f04f 30ff 	mov.w	r0, #4294967295
 8004d4e:	bd70      	pop	{r4, r5, r6, pc}
 8004d50:	4b25      	ldr	r3, [pc, #148]	; (8004de8 <__swsetup_r+0xd4>)
 8004d52:	429c      	cmp	r4, r3
 8004d54:	d101      	bne.n	8004d5a <__swsetup_r+0x46>
 8004d56:	68ac      	ldr	r4, [r5, #8]
 8004d58:	e7eb      	b.n	8004d32 <__swsetup_r+0x1e>
 8004d5a:	4b24      	ldr	r3, [pc, #144]	; (8004dec <__swsetup_r+0xd8>)
 8004d5c:	429c      	cmp	r4, r3
 8004d5e:	bf08      	it	eq
 8004d60:	68ec      	ldreq	r4, [r5, #12]
 8004d62:	e7e6      	b.n	8004d32 <__swsetup_r+0x1e>
 8004d64:	0751      	lsls	r1, r2, #29
 8004d66:	d512      	bpl.n	8004d8e <__swsetup_r+0x7a>
 8004d68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d6a:	b141      	cbz	r1, 8004d7e <__swsetup_r+0x6a>
 8004d6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004d70:	4299      	cmp	r1, r3
 8004d72:	d002      	beq.n	8004d7a <__swsetup_r+0x66>
 8004d74:	4630      	mov	r0, r6
 8004d76:	f000 f975 	bl	8005064 <_free_r>
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	6363      	str	r3, [r4, #52]	; 0x34
 8004d7e:	89a3      	ldrh	r3, [r4, #12]
 8004d80:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004d84:	81a3      	strh	r3, [r4, #12]
 8004d86:	2300      	movs	r3, #0
 8004d88:	6063      	str	r3, [r4, #4]
 8004d8a:	6923      	ldr	r3, [r4, #16]
 8004d8c:	6023      	str	r3, [r4, #0]
 8004d8e:	89a3      	ldrh	r3, [r4, #12]
 8004d90:	f043 0308 	orr.w	r3, r3, #8
 8004d94:	81a3      	strh	r3, [r4, #12]
 8004d96:	6923      	ldr	r3, [r4, #16]
 8004d98:	b94b      	cbnz	r3, 8004dae <__swsetup_r+0x9a>
 8004d9a:	89a3      	ldrh	r3, [r4, #12]
 8004d9c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004da0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004da4:	d003      	beq.n	8004dae <__swsetup_r+0x9a>
 8004da6:	4621      	mov	r1, r4
 8004da8:	4630      	mov	r0, r6
 8004daa:	f000 f919 	bl	8004fe0 <__smakebuf_r>
 8004dae:	89a2      	ldrh	r2, [r4, #12]
 8004db0:	f012 0301 	ands.w	r3, r2, #1
 8004db4:	d00c      	beq.n	8004dd0 <__swsetup_r+0xbc>
 8004db6:	2300      	movs	r3, #0
 8004db8:	60a3      	str	r3, [r4, #8]
 8004dba:	6963      	ldr	r3, [r4, #20]
 8004dbc:	425b      	negs	r3, r3
 8004dbe:	61a3      	str	r3, [r4, #24]
 8004dc0:	6923      	ldr	r3, [r4, #16]
 8004dc2:	b953      	cbnz	r3, 8004dda <__swsetup_r+0xc6>
 8004dc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004dc8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004dcc:	d1ba      	bne.n	8004d44 <__swsetup_r+0x30>
 8004dce:	bd70      	pop	{r4, r5, r6, pc}
 8004dd0:	0792      	lsls	r2, r2, #30
 8004dd2:	bf58      	it	pl
 8004dd4:	6963      	ldrpl	r3, [r4, #20]
 8004dd6:	60a3      	str	r3, [r4, #8]
 8004dd8:	e7f2      	b.n	8004dc0 <__swsetup_r+0xac>
 8004dda:	2000      	movs	r0, #0
 8004ddc:	e7f7      	b.n	8004dce <__swsetup_r+0xba>
 8004dde:	bf00      	nop
 8004de0:	200002c0 	.word	0x200002c0
 8004de4:	0800533c 	.word	0x0800533c
 8004de8:	0800535c 	.word	0x0800535c
 8004dec:	0800531c 	.word	0x0800531c

08004df0 <_close_r>:
 8004df0:	b538      	push	{r3, r4, r5, lr}
 8004df2:	4c06      	ldr	r4, [pc, #24]	; (8004e0c <_close_r+0x1c>)
 8004df4:	2300      	movs	r3, #0
 8004df6:	4605      	mov	r5, r0
 8004df8:	4608      	mov	r0, r1
 8004dfa:	6023      	str	r3, [r4, #0]
 8004dfc:	f000 f9b4 	bl	8005168 <_close>
 8004e00:	1c43      	adds	r3, r0, #1
 8004e02:	d102      	bne.n	8004e0a <_close_r+0x1a>
 8004e04:	6823      	ldr	r3, [r4, #0]
 8004e06:	b103      	cbz	r3, 8004e0a <_close_r+0x1a>
 8004e08:	602b      	str	r3, [r5, #0]
 8004e0a:	bd38      	pop	{r3, r4, r5, pc}
 8004e0c:	200003e4 	.word	0x200003e4

08004e10 <__sflush_r>:
 8004e10:	898a      	ldrh	r2, [r1, #12]
 8004e12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e16:	4605      	mov	r5, r0
 8004e18:	0710      	lsls	r0, r2, #28
 8004e1a:	460c      	mov	r4, r1
 8004e1c:	d45a      	bmi.n	8004ed4 <__sflush_r+0xc4>
 8004e1e:	684b      	ldr	r3, [r1, #4]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	dc05      	bgt.n	8004e30 <__sflush_r+0x20>
 8004e24:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	dc02      	bgt.n	8004e30 <__sflush_r+0x20>
 8004e2a:	2000      	movs	r0, #0
 8004e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004e32:	2e00      	cmp	r6, #0
 8004e34:	d0f9      	beq.n	8004e2a <__sflush_r+0x1a>
 8004e36:	2300      	movs	r3, #0
 8004e38:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004e3c:	682f      	ldr	r7, [r5, #0]
 8004e3e:	602b      	str	r3, [r5, #0]
 8004e40:	d033      	beq.n	8004eaa <__sflush_r+0x9a>
 8004e42:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004e44:	89a3      	ldrh	r3, [r4, #12]
 8004e46:	075a      	lsls	r2, r3, #29
 8004e48:	d505      	bpl.n	8004e56 <__sflush_r+0x46>
 8004e4a:	6863      	ldr	r3, [r4, #4]
 8004e4c:	1ac0      	subs	r0, r0, r3
 8004e4e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004e50:	b10b      	cbz	r3, 8004e56 <__sflush_r+0x46>
 8004e52:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004e54:	1ac0      	subs	r0, r0, r3
 8004e56:	2300      	movs	r3, #0
 8004e58:	4602      	mov	r2, r0
 8004e5a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004e5c:	6a21      	ldr	r1, [r4, #32]
 8004e5e:	4628      	mov	r0, r5
 8004e60:	47b0      	blx	r6
 8004e62:	1c43      	adds	r3, r0, #1
 8004e64:	89a3      	ldrh	r3, [r4, #12]
 8004e66:	d106      	bne.n	8004e76 <__sflush_r+0x66>
 8004e68:	6829      	ldr	r1, [r5, #0]
 8004e6a:	291d      	cmp	r1, #29
 8004e6c:	d84b      	bhi.n	8004f06 <__sflush_r+0xf6>
 8004e6e:	4a2b      	ldr	r2, [pc, #172]	; (8004f1c <__sflush_r+0x10c>)
 8004e70:	40ca      	lsrs	r2, r1
 8004e72:	07d6      	lsls	r6, r2, #31
 8004e74:	d547      	bpl.n	8004f06 <__sflush_r+0xf6>
 8004e76:	2200      	movs	r2, #0
 8004e78:	6062      	str	r2, [r4, #4]
 8004e7a:	04d9      	lsls	r1, r3, #19
 8004e7c:	6922      	ldr	r2, [r4, #16]
 8004e7e:	6022      	str	r2, [r4, #0]
 8004e80:	d504      	bpl.n	8004e8c <__sflush_r+0x7c>
 8004e82:	1c42      	adds	r2, r0, #1
 8004e84:	d101      	bne.n	8004e8a <__sflush_r+0x7a>
 8004e86:	682b      	ldr	r3, [r5, #0]
 8004e88:	b903      	cbnz	r3, 8004e8c <__sflush_r+0x7c>
 8004e8a:	6560      	str	r0, [r4, #84]	; 0x54
 8004e8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e8e:	602f      	str	r7, [r5, #0]
 8004e90:	2900      	cmp	r1, #0
 8004e92:	d0ca      	beq.n	8004e2a <__sflush_r+0x1a>
 8004e94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004e98:	4299      	cmp	r1, r3
 8004e9a:	d002      	beq.n	8004ea2 <__sflush_r+0x92>
 8004e9c:	4628      	mov	r0, r5
 8004e9e:	f000 f8e1 	bl	8005064 <_free_r>
 8004ea2:	2000      	movs	r0, #0
 8004ea4:	6360      	str	r0, [r4, #52]	; 0x34
 8004ea6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004eaa:	6a21      	ldr	r1, [r4, #32]
 8004eac:	2301      	movs	r3, #1
 8004eae:	4628      	mov	r0, r5
 8004eb0:	47b0      	blx	r6
 8004eb2:	1c41      	adds	r1, r0, #1
 8004eb4:	d1c6      	bne.n	8004e44 <__sflush_r+0x34>
 8004eb6:	682b      	ldr	r3, [r5, #0]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d0c3      	beq.n	8004e44 <__sflush_r+0x34>
 8004ebc:	2b1d      	cmp	r3, #29
 8004ebe:	d001      	beq.n	8004ec4 <__sflush_r+0xb4>
 8004ec0:	2b16      	cmp	r3, #22
 8004ec2:	d101      	bne.n	8004ec8 <__sflush_r+0xb8>
 8004ec4:	602f      	str	r7, [r5, #0]
 8004ec6:	e7b0      	b.n	8004e2a <__sflush_r+0x1a>
 8004ec8:	89a3      	ldrh	r3, [r4, #12]
 8004eca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ece:	81a3      	strh	r3, [r4, #12]
 8004ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ed4:	690f      	ldr	r7, [r1, #16]
 8004ed6:	2f00      	cmp	r7, #0
 8004ed8:	d0a7      	beq.n	8004e2a <__sflush_r+0x1a>
 8004eda:	0793      	lsls	r3, r2, #30
 8004edc:	680e      	ldr	r6, [r1, #0]
 8004ede:	bf08      	it	eq
 8004ee0:	694b      	ldreq	r3, [r1, #20]
 8004ee2:	600f      	str	r7, [r1, #0]
 8004ee4:	bf18      	it	ne
 8004ee6:	2300      	movne	r3, #0
 8004ee8:	eba6 0807 	sub.w	r8, r6, r7
 8004eec:	608b      	str	r3, [r1, #8]
 8004eee:	f1b8 0f00 	cmp.w	r8, #0
 8004ef2:	dd9a      	ble.n	8004e2a <__sflush_r+0x1a>
 8004ef4:	4643      	mov	r3, r8
 8004ef6:	463a      	mov	r2, r7
 8004ef8:	6a21      	ldr	r1, [r4, #32]
 8004efa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004efc:	4628      	mov	r0, r5
 8004efe:	47b0      	blx	r6
 8004f00:	2800      	cmp	r0, #0
 8004f02:	dc07      	bgt.n	8004f14 <__sflush_r+0x104>
 8004f04:	89a3      	ldrh	r3, [r4, #12]
 8004f06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f0a:	81a3      	strh	r3, [r4, #12]
 8004f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8004f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f14:	4407      	add	r7, r0
 8004f16:	eba8 0800 	sub.w	r8, r8, r0
 8004f1a:	e7e8      	b.n	8004eee <__sflush_r+0xde>
 8004f1c:	20400001 	.word	0x20400001

08004f20 <_fflush_r>:
 8004f20:	b538      	push	{r3, r4, r5, lr}
 8004f22:	690b      	ldr	r3, [r1, #16]
 8004f24:	4605      	mov	r5, r0
 8004f26:	460c      	mov	r4, r1
 8004f28:	b1db      	cbz	r3, 8004f62 <_fflush_r+0x42>
 8004f2a:	b118      	cbz	r0, 8004f34 <_fflush_r+0x14>
 8004f2c:	6983      	ldr	r3, [r0, #24]
 8004f2e:	b90b      	cbnz	r3, 8004f34 <_fflush_r+0x14>
 8004f30:	f7ff fa7a 	bl	8004428 <__sinit>
 8004f34:	4b0c      	ldr	r3, [pc, #48]	; (8004f68 <_fflush_r+0x48>)
 8004f36:	429c      	cmp	r4, r3
 8004f38:	d109      	bne.n	8004f4e <_fflush_r+0x2e>
 8004f3a:	686c      	ldr	r4, [r5, #4]
 8004f3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f40:	b17b      	cbz	r3, 8004f62 <_fflush_r+0x42>
 8004f42:	4621      	mov	r1, r4
 8004f44:	4628      	mov	r0, r5
 8004f46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f4a:	f7ff bf61 	b.w	8004e10 <__sflush_r>
 8004f4e:	4b07      	ldr	r3, [pc, #28]	; (8004f6c <_fflush_r+0x4c>)
 8004f50:	429c      	cmp	r4, r3
 8004f52:	d101      	bne.n	8004f58 <_fflush_r+0x38>
 8004f54:	68ac      	ldr	r4, [r5, #8]
 8004f56:	e7f1      	b.n	8004f3c <_fflush_r+0x1c>
 8004f58:	4b05      	ldr	r3, [pc, #20]	; (8004f70 <_fflush_r+0x50>)
 8004f5a:	429c      	cmp	r4, r3
 8004f5c:	bf08      	it	eq
 8004f5e:	68ec      	ldreq	r4, [r5, #12]
 8004f60:	e7ec      	b.n	8004f3c <_fflush_r+0x1c>
 8004f62:	2000      	movs	r0, #0
 8004f64:	bd38      	pop	{r3, r4, r5, pc}
 8004f66:	bf00      	nop
 8004f68:	0800533c 	.word	0x0800533c
 8004f6c:	0800535c 	.word	0x0800535c
 8004f70:	0800531c 	.word	0x0800531c

08004f74 <_lseek_r>:
 8004f74:	b538      	push	{r3, r4, r5, lr}
 8004f76:	4c07      	ldr	r4, [pc, #28]	; (8004f94 <_lseek_r+0x20>)
 8004f78:	4605      	mov	r5, r0
 8004f7a:	4608      	mov	r0, r1
 8004f7c:	4611      	mov	r1, r2
 8004f7e:	2200      	movs	r2, #0
 8004f80:	6022      	str	r2, [r4, #0]
 8004f82:	461a      	mov	r2, r3
 8004f84:	f000 f908 	bl	8005198 <_lseek>
 8004f88:	1c43      	adds	r3, r0, #1
 8004f8a:	d102      	bne.n	8004f92 <_lseek_r+0x1e>
 8004f8c:	6823      	ldr	r3, [r4, #0]
 8004f8e:	b103      	cbz	r3, 8004f92 <_lseek_r+0x1e>
 8004f90:	602b      	str	r3, [r5, #0]
 8004f92:	bd38      	pop	{r3, r4, r5, pc}
 8004f94:	200003e4 	.word	0x200003e4

08004f98 <__swhatbuf_r>:
 8004f98:	b570      	push	{r4, r5, r6, lr}
 8004f9a:	460e      	mov	r6, r1
 8004f9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fa0:	2900      	cmp	r1, #0
 8004fa2:	b090      	sub	sp, #64	; 0x40
 8004fa4:	4614      	mov	r4, r2
 8004fa6:	461d      	mov	r5, r3
 8004fa8:	da07      	bge.n	8004fba <__swhatbuf_r+0x22>
 8004faa:	2300      	movs	r3, #0
 8004fac:	602b      	str	r3, [r5, #0]
 8004fae:	89b3      	ldrh	r3, [r6, #12]
 8004fb0:	061a      	lsls	r2, r3, #24
 8004fb2:	d410      	bmi.n	8004fd6 <__swhatbuf_r+0x3e>
 8004fb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004fb8:	e00e      	b.n	8004fd8 <__swhatbuf_r+0x40>
 8004fba:	aa01      	add	r2, sp, #4
 8004fbc:	f000 f8b2 	bl	8005124 <_fstat_r>
 8004fc0:	2800      	cmp	r0, #0
 8004fc2:	dbf2      	blt.n	8004faa <__swhatbuf_r+0x12>
 8004fc4:	9a02      	ldr	r2, [sp, #8]
 8004fc6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004fca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004fce:	425a      	negs	r2, r3
 8004fd0:	415a      	adcs	r2, r3
 8004fd2:	602a      	str	r2, [r5, #0]
 8004fd4:	e7ee      	b.n	8004fb4 <__swhatbuf_r+0x1c>
 8004fd6:	2340      	movs	r3, #64	; 0x40
 8004fd8:	2000      	movs	r0, #0
 8004fda:	6023      	str	r3, [r4, #0]
 8004fdc:	b010      	add	sp, #64	; 0x40
 8004fde:	bd70      	pop	{r4, r5, r6, pc}

08004fe0 <__smakebuf_r>:
 8004fe0:	898b      	ldrh	r3, [r1, #12]
 8004fe2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004fe4:	079d      	lsls	r5, r3, #30
 8004fe6:	4606      	mov	r6, r0
 8004fe8:	460c      	mov	r4, r1
 8004fea:	d507      	bpl.n	8004ffc <__smakebuf_r+0x1c>
 8004fec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004ff0:	6023      	str	r3, [r4, #0]
 8004ff2:	6123      	str	r3, [r4, #16]
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	6163      	str	r3, [r4, #20]
 8004ff8:	b002      	add	sp, #8
 8004ffa:	bd70      	pop	{r4, r5, r6, pc}
 8004ffc:	ab01      	add	r3, sp, #4
 8004ffe:	466a      	mov	r2, sp
 8005000:	f7ff ffca 	bl	8004f98 <__swhatbuf_r>
 8005004:	9900      	ldr	r1, [sp, #0]
 8005006:	4605      	mov	r5, r0
 8005008:	4630      	mov	r0, r6
 800500a:	f7ff fa97 	bl	800453c <_malloc_r>
 800500e:	b948      	cbnz	r0, 8005024 <__smakebuf_r+0x44>
 8005010:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005014:	059a      	lsls	r2, r3, #22
 8005016:	d4ef      	bmi.n	8004ff8 <__smakebuf_r+0x18>
 8005018:	f023 0303 	bic.w	r3, r3, #3
 800501c:	f043 0302 	orr.w	r3, r3, #2
 8005020:	81a3      	strh	r3, [r4, #12]
 8005022:	e7e3      	b.n	8004fec <__smakebuf_r+0xc>
 8005024:	4b0d      	ldr	r3, [pc, #52]	; (800505c <__smakebuf_r+0x7c>)
 8005026:	62b3      	str	r3, [r6, #40]	; 0x28
 8005028:	89a3      	ldrh	r3, [r4, #12]
 800502a:	6020      	str	r0, [r4, #0]
 800502c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005030:	81a3      	strh	r3, [r4, #12]
 8005032:	9b00      	ldr	r3, [sp, #0]
 8005034:	6163      	str	r3, [r4, #20]
 8005036:	9b01      	ldr	r3, [sp, #4]
 8005038:	6120      	str	r0, [r4, #16]
 800503a:	b15b      	cbz	r3, 8005054 <__smakebuf_r+0x74>
 800503c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005040:	4630      	mov	r0, r6
 8005042:	f000 f881 	bl	8005148 <_isatty_r>
 8005046:	b128      	cbz	r0, 8005054 <__smakebuf_r+0x74>
 8005048:	89a3      	ldrh	r3, [r4, #12]
 800504a:	f023 0303 	bic.w	r3, r3, #3
 800504e:	f043 0301 	orr.w	r3, r3, #1
 8005052:	81a3      	strh	r3, [r4, #12]
 8005054:	89a3      	ldrh	r3, [r4, #12]
 8005056:	431d      	orrs	r5, r3
 8005058:	81a5      	strh	r5, [r4, #12]
 800505a:	e7cd      	b.n	8004ff8 <__smakebuf_r+0x18>
 800505c:	080043a9 	.word	0x080043a9

08005060 <__malloc_lock>:
 8005060:	4770      	bx	lr

08005062 <__malloc_unlock>:
 8005062:	4770      	bx	lr

08005064 <_free_r>:
 8005064:	b538      	push	{r3, r4, r5, lr}
 8005066:	4605      	mov	r5, r0
 8005068:	2900      	cmp	r1, #0
 800506a:	d045      	beq.n	80050f8 <_free_r+0x94>
 800506c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005070:	1f0c      	subs	r4, r1, #4
 8005072:	2b00      	cmp	r3, #0
 8005074:	bfb8      	it	lt
 8005076:	18e4      	addlt	r4, r4, r3
 8005078:	f7ff fff2 	bl	8005060 <__malloc_lock>
 800507c:	4a1f      	ldr	r2, [pc, #124]	; (80050fc <_free_r+0x98>)
 800507e:	6813      	ldr	r3, [r2, #0]
 8005080:	4610      	mov	r0, r2
 8005082:	b933      	cbnz	r3, 8005092 <_free_r+0x2e>
 8005084:	6063      	str	r3, [r4, #4]
 8005086:	6014      	str	r4, [r2, #0]
 8005088:	4628      	mov	r0, r5
 800508a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800508e:	f7ff bfe8 	b.w	8005062 <__malloc_unlock>
 8005092:	42a3      	cmp	r3, r4
 8005094:	d90c      	bls.n	80050b0 <_free_r+0x4c>
 8005096:	6821      	ldr	r1, [r4, #0]
 8005098:	1862      	adds	r2, r4, r1
 800509a:	4293      	cmp	r3, r2
 800509c:	bf04      	itt	eq
 800509e:	681a      	ldreq	r2, [r3, #0]
 80050a0:	685b      	ldreq	r3, [r3, #4]
 80050a2:	6063      	str	r3, [r4, #4]
 80050a4:	bf04      	itt	eq
 80050a6:	1852      	addeq	r2, r2, r1
 80050a8:	6022      	streq	r2, [r4, #0]
 80050aa:	6004      	str	r4, [r0, #0]
 80050ac:	e7ec      	b.n	8005088 <_free_r+0x24>
 80050ae:	4613      	mov	r3, r2
 80050b0:	685a      	ldr	r2, [r3, #4]
 80050b2:	b10a      	cbz	r2, 80050b8 <_free_r+0x54>
 80050b4:	42a2      	cmp	r2, r4
 80050b6:	d9fa      	bls.n	80050ae <_free_r+0x4a>
 80050b8:	6819      	ldr	r1, [r3, #0]
 80050ba:	1858      	adds	r0, r3, r1
 80050bc:	42a0      	cmp	r0, r4
 80050be:	d10b      	bne.n	80050d8 <_free_r+0x74>
 80050c0:	6820      	ldr	r0, [r4, #0]
 80050c2:	4401      	add	r1, r0
 80050c4:	1858      	adds	r0, r3, r1
 80050c6:	4282      	cmp	r2, r0
 80050c8:	6019      	str	r1, [r3, #0]
 80050ca:	d1dd      	bne.n	8005088 <_free_r+0x24>
 80050cc:	6810      	ldr	r0, [r2, #0]
 80050ce:	6852      	ldr	r2, [r2, #4]
 80050d0:	605a      	str	r2, [r3, #4]
 80050d2:	4401      	add	r1, r0
 80050d4:	6019      	str	r1, [r3, #0]
 80050d6:	e7d7      	b.n	8005088 <_free_r+0x24>
 80050d8:	d902      	bls.n	80050e0 <_free_r+0x7c>
 80050da:	230c      	movs	r3, #12
 80050dc:	602b      	str	r3, [r5, #0]
 80050de:	e7d3      	b.n	8005088 <_free_r+0x24>
 80050e0:	6820      	ldr	r0, [r4, #0]
 80050e2:	1821      	adds	r1, r4, r0
 80050e4:	428a      	cmp	r2, r1
 80050e6:	bf04      	itt	eq
 80050e8:	6811      	ldreq	r1, [r2, #0]
 80050ea:	6852      	ldreq	r2, [r2, #4]
 80050ec:	6062      	str	r2, [r4, #4]
 80050ee:	bf04      	itt	eq
 80050f0:	1809      	addeq	r1, r1, r0
 80050f2:	6021      	streq	r1, [r4, #0]
 80050f4:	605c      	str	r4, [r3, #4]
 80050f6:	e7c7      	b.n	8005088 <_free_r+0x24>
 80050f8:	bd38      	pop	{r3, r4, r5, pc}
 80050fa:	bf00      	nop
 80050fc:	20000340 	.word	0x20000340

08005100 <_read_r>:
 8005100:	b538      	push	{r3, r4, r5, lr}
 8005102:	4c07      	ldr	r4, [pc, #28]	; (8005120 <_read_r+0x20>)
 8005104:	4605      	mov	r5, r0
 8005106:	4608      	mov	r0, r1
 8005108:	4611      	mov	r1, r2
 800510a:	2200      	movs	r2, #0
 800510c:	6022      	str	r2, [r4, #0]
 800510e:	461a      	mov	r2, r3
 8005110:	f000 f84a 	bl	80051a8 <_read>
 8005114:	1c43      	adds	r3, r0, #1
 8005116:	d102      	bne.n	800511e <_read_r+0x1e>
 8005118:	6823      	ldr	r3, [r4, #0]
 800511a:	b103      	cbz	r3, 800511e <_read_r+0x1e>
 800511c:	602b      	str	r3, [r5, #0]
 800511e:	bd38      	pop	{r3, r4, r5, pc}
 8005120:	200003e4 	.word	0x200003e4

08005124 <_fstat_r>:
 8005124:	b538      	push	{r3, r4, r5, lr}
 8005126:	4c07      	ldr	r4, [pc, #28]	; (8005144 <_fstat_r+0x20>)
 8005128:	2300      	movs	r3, #0
 800512a:	4605      	mov	r5, r0
 800512c:	4608      	mov	r0, r1
 800512e:	4611      	mov	r1, r2
 8005130:	6023      	str	r3, [r4, #0]
 8005132:	f000 f821 	bl	8005178 <_fstat>
 8005136:	1c43      	adds	r3, r0, #1
 8005138:	d102      	bne.n	8005140 <_fstat_r+0x1c>
 800513a:	6823      	ldr	r3, [r4, #0]
 800513c:	b103      	cbz	r3, 8005140 <_fstat_r+0x1c>
 800513e:	602b      	str	r3, [r5, #0]
 8005140:	bd38      	pop	{r3, r4, r5, pc}
 8005142:	bf00      	nop
 8005144:	200003e4 	.word	0x200003e4

08005148 <_isatty_r>:
 8005148:	b538      	push	{r3, r4, r5, lr}
 800514a:	4c06      	ldr	r4, [pc, #24]	; (8005164 <_isatty_r+0x1c>)
 800514c:	2300      	movs	r3, #0
 800514e:	4605      	mov	r5, r0
 8005150:	4608      	mov	r0, r1
 8005152:	6023      	str	r3, [r4, #0]
 8005154:	f000 f818 	bl	8005188 <_isatty>
 8005158:	1c43      	adds	r3, r0, #1
 800515a:	d102      	bne.n	8005162 <_isatty_r+0x1a>
 800515c:	6823      	ldr	r3, [r4, #0]
 800515e:	b103      	cbz	r3, 8005162 <_isatty_r+0x1a>
 8005160:	602b      	str	r3, [r5, #0]
 8005162:	bd38      	pop	{r3, r4, r5, pc}
 8005164:	200003e4 	.word	0x200003e4

08005168 <_close>:
 8005168:	4b02      	ldr	r3, [pc, #8]	; (8005174 <_close+0xc>)
 800516a:	2258      	movs	r2, #88	; 0x58
 800516c:	601a      	str	r2, [r3, #0]
 800516e:	f04f 30ff 	mov.w	r0, #4294967295
 8005172:	4770      	bx	lr
 8005174:	200003e4 	.word	0x200003e4

08005178 <_fstat>:
 8005178:	4b02      	ldr	r3, [pc, #8]	; (8005184 <_fstat+0xc>)
 800517a:	2258      	movs	r2, #88	; 0x58
 800517c:	601a      	str	r2, [r3, #0]
 800517e:	f04f 30ff 	mov.w	r0, #4294967295
 8005182:	4770      	bx	lr
 8005184:	200003e4 	.word	0x200003e4

08005188 <_isatty>:
 8005188:	4b02      	ldr	r3, [pc, #8]	; (8005194 <_isatty+0xc>)
 800518a:	2258      	movs	r2, #88	; 0x58
 800518c:	601a      	str	r2, [r3, #0]
 800518e:	2000      	movs	r0, #0
 8005190:	4770      	bx	lr
 8005192:	bf00      	nop
 8005194:	200003e4 	.word	0x200003e4

08005198 <_lseek>:
 8005198:	4b02      	ldr	r3, [pc, #8]	; (80051a4 <_lseek+0xc>)
 800519a:	2258      	movs	r2, #88	; 0x58
 800519c:	601a      	str	r2, [r3, #0]
 800519e:	f04f 30ff 	mov.w	r0, #4294967295
 80051a2:	4770      	bx	lr
 80051a4:	200003e4 	.word	0x200003e4

080051a8 <_read>:
 80051a8:	4b02      	ldr	r3, [pc, #8]	; (80051b4 <_read+0xc>)
 80051aa:	2258      	movs	r2, #88	; 0x58
 80051ac:	601a      	str	r2, [r3, #0]
 80051ae:	f04f 30ff 	mov.w	r0, #4294967295
 80051b2:	4770      	bx	lr
 80051b4:	200003e4 	.word	0x200003e4

080051b8 <_sbrk>:
 80051b8:	4b04      	ldr	r3, [pc, #16]	; (80051cc <_sbrk+0x14>)
 80051ba:	6819      	ldr	r1, [r3, #0]
 80051bc:	4602      	mov	r2, r0
 80051be:	b909      	cbnz	r1, 80051c4 <_sbrk+0xc>
 80051c0:	4903      	ldr	r1, [pc, #12]	; (80051d0 <_sbrk+0x18>)
 80051c2:	6019      	str	r1, [r3, #0]
 80051c4:	6818      	ldr	r0, [r3, #0]
 80051c6:	4402      	add	r2, r0
 80051c8:	601a      	str	r2, [r3, #0]
 80051ca:	4770      	bx	lr
 80051cc:	20000348 	.word	0x20000348
 80051d0:	200003e8 	.word	0x200003e8

080051d4 <_write>:
 80051d4:	4b02      	ldr	r3, [pc, #8]	; (80051e0 <_write+0xc>)
 80051d6:	2258      	movs	r2, #88	; 0x58
 80051d8:	601a      	str	r2, [r3, #0]
 80051da:	f04f 30ff 	mov.w	r0, #4294967295
 80051de:	4770      	bx	lr
 80051e0:	200003e4 	.word	0x200003e4

080051e4 <_init>:
 80051e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051e6:	bf00      	nop
 80051e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051ea:	bc08      	pop	{r3}
 80051ec:	469e      	mov	lr, r3
 80051ee:	4770      	bx	lr

080051f0 <_fini>:
 80051f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051f2:	bf00      	nop
 80051f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051f6:	bc08      	pop	{r3}
 80051f8:	469e      	mov	lr, r3
 80051fa:	4770      	bx	lr
