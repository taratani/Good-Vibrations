
acceptance_test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a34  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08006bbc  08006bbc  00016bbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08006bd4  08006bd4  00016bd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08006bd8  08006bd8  00016bd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000340  20000000  08006bdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020340  2**0
                  CONTENTS
  7 .bss          00000074  20000340  20000340  00020340  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  200003b4  200003b4  00020340  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020340  2**0
                  CONTENTS, READONLY
 10 .debug_info   00011d9f  00000000  00000000  00020370  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001fb2  00000000  00000000  0003210f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001158  00000000  00000000  000340c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001058  00000000  00000000  00035220  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00005c65  00000000  00000000  00036278  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000695f  00000000  00000000  0003bedd  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0004283c  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004dac  00000000  00000000  000428b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  00047664  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000340 	.word	0x20000340
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006ba4 	.word	0x08006ba4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000344 	.word	0x20000344
 80001c4:	08006ba4 	.word	0x08006ba4

080001c8 <ADC_SoftwareStartConv>:
  * @brief  Enables the selected ADC software start conversion of the regular channels.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_SoftwareStartConv(ADC_TypeDef* ADCx)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Enable the selected ADC conversion for regular group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	689b      	ldr	r3, [r3, #8]
 80001d4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	609a      	str	r2, [r3, #8]
}
 80001dc:	bf00      	nop
 80001de:	370c      	adds	r7, #12
 80001e0:	46bd      	mov	sp, r7
 80001e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001e6:	4770      	bx	lr

080001e8 <ADC_GetConversionValue>:
  * @brief  Returns the last ADCx conversion result data for regular channel.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The Data conversion value.
  */
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80001f4:	b29b      	uxth	r3, r3
}
 80001f6:	4618      	mov	r0, r3
 80001f8:	370c      	adds	r7, #12
 80001fa:	46bd      	mov	sp, r7
 80001fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000200:	4770      	bx	lr

08000202 <ADC_GetFlagStatus>:
  *            @arg ADC_FLAG_STRT: Start of regular group conversion flag
  *            @arg ADC_FLAG_OVR: Overrun flag                                                 
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
{
 8000202:	b480      	push	{r7}
 8000204:	b085      	sub	sp, #20
 8000206:	af00      	add	r7, sp, #0
 8000208:	6078      	str	r0, [r7, #4]
 800020a:	460b      	mov	r3, r1
 800020c:	70fb      	strb	r3, [r7, #3]
  FlagStatus bitstatus = RESET;
 800020e:	2300      	movs	r3, #0
 8000210:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));

  /* Check the status of the specified ADC flag */
  if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	681a      	ldr	r2, [r3, #0]
 8000216:	78fb      	ldrb	r3, [r7, #3]
 8000218:	4013      	ands	r3, r2
 800021a:	2b00      	cmp	r3, #0
 800021c:	d002      	beq.n	8000224 <ADC_GetFlagStatus+0x22>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
 800021e:	2301      	movs	r3, #1
 8000220:	73fb      	strb	r3, [r7, #15]
 8000222:	e001      	b.n	8000228 <ADC_GetFlagStatus+0x26>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
 8000224:	2300      	movs	r3, #0
 8000226:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
 8000228:	7bfb      	ldrb	r3, [r7, #15]
}
 800022a:	4618      	mov	r0, r3
 800022c:	3714      	adds	r7, #20
 800022e:	46bd      	mov	sp, r7
 8000230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000234:	4770      	bx	lr
	...

08000238 <EXTI_GetITStatus>:
  * @param  EXTI_Line: specifies the EXTI line to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 8000238:	b480      	push	{r7}
 800023a:	b085      	sub	sp, #20
 800023c:	af00      	add	r7, sp, #0
 800023e:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 8000240:	2300      	movs	r3, #0
 8000242:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 8000244:	2300      	movs	r3, #0
 8000246:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 8000248:	4b0c      	ldr	r3, [pc, #48]	; (800027c <EXTI_GetITStatus+0x44>)
 800024a:	681a      	ldr	r2, [r3, #0]
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	4013      	ands	r3, r2
 8000250:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8000252:	4b0a      	ldr	r3, [pc, #40]	; (800027c <EXTI_GetITStatus+0x44>)
 8000254:	695a      	ldr	r2, [r3, #20]
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	4013      	ands	r3, r2
 800025a:	2b00      	cmp	r3, #0
 800025c:	d005      	beq.n	800026a <EXTI_GetITStatus+0x32>
 800025e:	68bb      	ldr	r3, [r7, #8]
 8000260:	2b00      	cmp	r3, #0
 8000262:	d002      	beq.n	800026a <EXTI_GetITStatus+0x32>
  {
    bitstatus = SET;
 8000264:	2301      	movs	r3, #1
 8000266:	73fb      	strb	r3, [r7, #15]
 8000268:	e001      	b.n	800026e <EXTI_GetITStatus+0x36>
  }
  else
  {
    bitstatus = RESET;
 800026a:	2300      	movs	r3, #0
 800026c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800026e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000270:	4618      	mov	r0, r3
 8000272:	3714      	adds	r7, #20
 8000274:	46bd      	mov	sp, r7
 8000276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027a:	4770      	bx	lr
 800027c:	40013c00 	.word	0x40013c00

08000280 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8000288:	4a04      	ldr	r2, [pc, #16]	; (800029c <EXTI_ClearITPendingBit+0x1c>)
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	6153      	str	r3, [r2, #20]
}
 800028e:	bf00      	nop
 8000290:	370c      	adds	r7, #12
 8000292:	46bd      	mov	sp, r7
 8000294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000298:	4770      	bx	lr
 800029a:	bf00      	nop
 800029c:	40013c00 	.word	0x40013c00

080002a0 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80002a0:	b480      	push	{r7}
 80002a2:	b087      	sub	sp, #28
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
 80002a8:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80002aa:	2300      	movs	r3, #0
 80002ac:	617b      	str	r3, [r7, #20]
 80002ae:	2300      	movs	r3, #0
 80002b0:	613b      	str	r3, [r7, #16]
 80002b2:	2300      	movs	r3, #0
 80002b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80002b6:	2300      	movs	r3, #0
 80002b8:	617b      	str	r3, [r7, #20]
 80002ba:	e076      	b.n	80003aa <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80002bc:	2201      	movs	r2, #1
 80002be:	697b      	ldr	r3, [r7, #20]
 80002c0:	fa02 f303 	lsl.w	r3, r2, r3
 80002c4:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80002c6:	683b      	ldr	r3, [r7, #0]
 80002c8:	681a      	ldr	r2, [r3, #0]
 80002ca:	693b      	ldr	r3, [r7, #16]
 80002cc:	4013      	ands	r3, r2
 80002ce:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80002d0:	68fa      	ldr	r2, [r7, #12]
 80002d2:	693b      	ldr	r3, [r7, #16]
 80002d4:	429a      	cmp	r2, r3
 80002d6:	d165      	bne.n	80003a4 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	681a      	ldr	r2, [r3, #0]
 80002dc:	697b      	ldr	r3, [r7, #20]
 80002de:	005b      	lsls	r3, r3, #1
 80002e0:	2103      	movs	r1, #3
 80002e2:	fa01 f303 	lsl.w	r3, r1, r3
 80002e6:	43db      	mvns	r3, r3
 80002e8:	401a      	ands	r2, r3
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	681a      	ldr	r2, [r3, #0]
 80002f2:	683b      	ldr	r3, [r7, #0]
 80002f4:	791b      	ldrb	r3, [r3, #4]
 80002f6:	4619      	mov	r1, r3
 80002f8:	697b      	ldr	r3, [r7, #20]
 80002fa:	005b      	lsls	r3, r3, #1
 80002fc:	fa01 f303 	lsl.w	r3, r1, r3
 8000300:	431a      	orrs	r2, r3
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000306:	683b      	ldr	r3, [r7, #0]
 8000308:	791b      	ldrb	r3, [r3, #4]
 800030a:	2b01      	cmp	r3, #1
 800030c:	d003      	beq.n	8000316 <GPIO_Init+0x76>
 800030e:	683b      	ldr	r3, [r7, #0]
 8000310:	791b      	ldrb	r3, [r3, #4]
 8000312:	2b02      	cmp	r3, #2
 8000314:	d12e      	bne.n	8000374 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	689a      	ldr	r2, [r3, #8]
 800031a:	697b      	ldr	r3, [r7, #20]
 800031c:	005b      	lsls	r3, r3, #1
 800031e:	2103      	movs	r1, #3
 8000320:	fa01 f303 	lsl.w	r3, r1, r3
 8000324:	43db      	mvns	r3, r3
 8000326:	401a      	ands	r2, r3
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	689a      	ldr	r2, [r3, #8]
 8000330:	683b      	ldr	r3, [r7, #0]
 8000332:	795b      	ldrb	r3, [r3, #5]
 8000334:	4619      	mov	r1, r3
 8000336:	697b      	ldr	r3, [r7, #20]
 8000338:	005b      	lsls	r3, r3, #1
 800033a:	fa01 f303 	lsl.w	r3, r1, r3
 800033e:	431a      	orrs	r2, r3
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	685a      	ldr	r2, [r3, #4]
 8000348:	697b      	ldr	r3, [r7, #20]
 800034a:	b29b      	uxth	r3, r3
 800034c:	4619      	mov	r1, r3
 800034e:	2301      	movs	r3, #1
 8000350:	408b      	lsls	r3, r1
 8000352:	43db      	mvns	r3, r3
 8000354:	401a      	ands	r2, r3
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	685b      	ldr	r3, [r3, #4]
 800035e:	683a      	ldr	r2, [r7, #0]
 8000360:	7992      	ldrb	r2, [r2, #6]
 8000362:	4611      	mov	r1, r2
 8000364:	697a      	ldr	r2, [r7, #20]
 8000366:	b292      	uxth	r2, r2
 8000368:	fa01 f202 	lsl.w	r2, r1, r2
 800036c:	b292      	uxth	r2, r2
 800036e:	431a      	orrs	r2, r3
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	68da      	ldr	r2, [r3, #12]
 8000378:	697b      	ldr	r3, [r7, #20]
 800037a:	b29b      	uxth	r3, r3
 800037c:	005b      	lsls	r3, r3, #1
 800037e:	2103      	movs	r1, #3
 8000380:	fa01 f303 	lsl.w	r3, r1, r3
 8000384:	43db      	mvns	r3, r3
 8000386:	401a      	ands	r2, r3
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	68da      	ldr	r2, [r3, #12]
 8000390:	683b      	ldr	r3, [r7, #0]
 8000392:	79db      	ldrb	r3, [r3, #7]
 8000394:	4619      	mov	r1, r3
 8000396:	697b      	ldr	r3, [r7, #20]
 8000398:	005b      	lsls	r3, r3, #1
 800039a:	fa01 f303 	lsl.w	r3, r1, r3
 800039e:	431a      	orrs	r2, r3
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80003a4:	697b      	ldr	r3, [r7, #20]
 80003a6:	3301      	adds	r3, #1
 80003a8:	617b      	str	r3, [r7, #20]
 80003aa:	697b      	ldr	r3, [r7, #20]
 80003ac:	2b0f      	cmp	r3, #15
 80003ae:	d985      	bls.n	80002bc <GPIO_Init+0x1c>
    }
  }
}
 80003b0:	bf00      	nop
 80003b2:	371c      	adds	r7, #28
 80003b4:	46bd      	mov	sp, r7
 80003b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ba:	4770      	bx	lr

080003bc <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80003bc:	b480      	push	{r7}
 80003be:	b085      	sub	sp, #20
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
 80003c4:	460b      	mov	r3, r1
 80003c6:	807b      	strh	r3, [r7, #2]
 80003c8:	4613      	mov	r3, r2
 80003ca:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 80003cc:	2300      	movs	r3, #0
 80003ce:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 80003d0:	2300      	movs	r3, #0
 80003d2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80003d4:	787a      	ldrb	r2, [r7, #1]
 80003d6:	887b      	ldrh	r3, [r7, #2]
 80003d8:	f003 0307 	and.w	r3, r3, #7
 80003dc:	009b      	lsls	r3, r3, #2
 80003de:	fa02 f303 	lsl.w	r3, r2, r3
 80003e2:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80003e4:	887b      	ldrh	r3, [r7, #2]
 80003e6:	08db      	lsrs	r3, r3, #3
 80003e8:	b29b      	uxth	r3, r3
 80003ea:	4618      	mov	r0, r3
 80003ec:	887b      	ldrh	r3, [r7, #2]
 80003ee:	08db      	lsrs	r3, r3, #3
 80003f0:	b29b      	uxth	r3, r3
 80003f2:	461a      	mov	r2, r3
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	3208      	adds	r2, #8
 80003f8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80003fc:	887b      	ldrh	r3, [r7, #2]
 80003fe:	f003 0307 	and.w	r3, r3, #7
 8000402:	009b      	lsls	r3, r3, #2
 8000404:	210f      	movs	r1, #15
 8000406:	fa01 f303 	lsl.w	r3, r1, r3
 800040a:	43db      	mvns	r3, r3
 800040c:	ea02 0103 	and.w	r1, r2, r3
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	f100 0208 	add.w	r2, r0, #8
 8000416:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 800041a:	887b      	ldrh	r3, [r7, #2]
 800041c:	08db      	lsrs	r3, r3, #3
 800041e:	b29b      	uxth	r3, r3
 8000420:	461a      	mov	r2, r3
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	3208      	adds	r2, #8
 8000426:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800042a:	68fb      	ldr	r3, [r7, #12]
 800042c:	4313      	orrs	r3, r2
 800042e:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000430:	887b      	ldrh	r3, [r7, #2]
 8000432:	08db      	lsrs	r3, r3, #3
 8000434:	b29b      	uxth	r3, r3
 8000436:	461a      	mov	r2, r3
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	3208      	adds	r2, #8
 800043c:	68b9      	ldr	r1, [r7, #8]
 800043e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000442:	bf00      	nop
 8000444:	3714      	adds	r7, #20
 8000446:	46bd      	mov	sp, r7
 8000448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044c:	4770      	bx	lr
	...

08000450 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b08a      	sub	sp, #40	; 0x28
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
 8000458:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, freqrange = 0;
 800045a:	2300      	movs	r3, #0
 800045c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800045e:	2300      	movs	r3, #0
 8000460:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t result = 0x04;
 8000462:	2304      	movs	r3, #4
 8000464:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint32_t pclk1 = 8000000;
 8000466:	4b57      	ldr	r3, [pc, #348]	; (80005c4 <I2C_Init+0x174>)
 8000468:	61fb      	str	r3, [r7, #28]
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	889b      	ldrh	r3, [r3, #4]
 800046e:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 8000470:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000472:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000476:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 8000478:	f107 030c 	add.w	r3, r7, #12
 800047c:	4618      	mov	r0, r3
 800047e:	f000 f8d9 	bl	8000634 <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 8000482:	697b      	ldr	r3, [r7, #20]
 8000484:	61fb      	str	r3, [r7, #28]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 8000486:	69fb      	ldr	r3, [r7, #28]
 8000488:	4a4f      	ldr	r2, [pc, #316]	; (80005c8 <I2C_Init+0x178>)
 800048a:	fba2 2303 	umull	r2, r3, r2, r3
 800048e:	0c9b      	lsrs	r3, r3, #18
 8000490:	847b      	strh	r3, [r7, #34]	; 0x22
  tmpreg |= freqrange;
 8000492:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000494:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000496:	4313      	orrs	r3, r2
 8000498:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800049e:	809a      	strh	r2, [r3, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	881b      	ldrh	r3, [r3, #0]
 80004a4:	b29b      	uxth	r3, r3
 80004a6:	f023 0301 	bic.w	r3, r3, #1
 80004aa:	b29a      	uxth	r2, r3
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	801a      	strh	r2, [r3, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;
 80004b0:	2300      	movs	r3, #0
 80004b2:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 80004b4:	683b      	ldr	r3, [r7, #0]
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	4a44      	ldr	r2, [pc, #272]	; (80005cc <I2C_Init+0x17c>)
 80004ba:	4293      	cmp	r3, r2
 80004bc:	d815      	bhi.n	80004ea <I2C_Init+0x9a>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 80004be:	683b      	ldr	r3, [r7, #0]
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	005b      	lsls	r3, r3, #1
 80004c4:	69fa      	ldr	r2, [r7, #28]
 80004c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80004ca:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 80004cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80004ce:	2b03      	cmp	r3, #3
 80004d0:	d801      	bhi.n	80004d6 <I2C_Init+0x86>
    {
      /* Set minimum allowed value */
      result = 0x04;  
 80004d2:	2304      	movs	r3, #4
 80004d4:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 80004d6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80004d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80004da:	4313      	orrs	r3, r2
 80004dc:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 80004de:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80004e0:	3301      	adds	r3, #1
 80004e2:	b29a      	uxth	r2, r3
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	841a      	strh	r2, [r3, #32]
 80004e8:	e040      	b.n	800056c <I2C_Init+0x11c>
  /* Configure speed in fast mode */
  /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
     input clock) must be a multiple of 10 MHz */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 80004ea:	683b      	ldr	r3, [r7, #0]
 80004ec:	88db      	ldrh	r3, [r3, #6]
 80004ee:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 80004f2:	4293      	cmp	r3, r2
 80004f4:	d109      	bne.n	800050a <I2C_Init+0xba>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 80004f6:	683b      	ldr	r3, [r7, #0]
 80004f8:	681a      	ldr	r2, [r3, #0]
 80004fa:	4613      	mov	r3, r2
 80004fc:	005b      	lsls	r3, r3, #1
 80004fe:	4413      	add	r3, r2
 8000500:	69fa      	ldr	r2, [r7, #28]
 8000502:	fbb2 f3f3 	udiv	r3, r2, r3
 8000506:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000508:	e00e      	b.n	8000528 <I2C_Init+0xd8>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 800050a:	683b      	ldr	r3, [r7, #0]
 800050c:	681a      	ldr	r2, [r3, #0]
 800050e:	4613      	mov	r3, r2
 8000510:	009b      	lsls	r3, r3, #2
 8000512:	4413      	add	r3, r2
 8000514:	009a      	lsls	r2, r3, #2
 8000516:	4413      	add	r3, r2
 8000518:	69fa      	ldr	r2, [r7, #28]
 800051a:	fbb2 f3f3 	udiv	r3, r2, r3
 800051e:	84bb      	strh	r3, [r7, #36]	; 0x24
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 8000520:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000522:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000526:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
 8000528:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800052a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800052e:	2b00      	cmp	r3, #0
 8000530:	d103      	bne.n	800053a <I2C_Init+0xea>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 8000532:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000534:	f043 0301 	orr.w	r3, r3, #1
 8000538:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 800053a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800053c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800053e:	4313      	orrs	r3, r2
 8000540:	b29b      	uxth	r3, r3
 8000542:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000546:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800054a:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 800054c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800054e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000552:	fb02 f303 	mul.w	r3, r2, r3
 8000556:	4a1e      	ldr	r2, [pc, #120]	; (80005d0 <I2C_Init+0x180>)
 8000558:	fb82 1203 	smull	r1, r2, r2, r3
 800055c:	1192      	asrs	r2, r2, #6
 800055e:	17db      	asrs	r3, r3, #31
 8000560:	1ad3      	subs	r3, r2, r3
 8000562:	b29b      	uxth	r3, r3
 8000564:	3301      	adds	r3, #1
 8000566:	b29a      	uxth	r2, r3
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	841a      	strh	r2, [r3, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000570:	839a      	strh	r2, [r3, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	881b      	ldrh	r3, [r3, #0]
 8000576:	b29b      	uxth	r3, r3
 8000578:	f043 0301 	orr.w	r3, r3, #1
 800057c:	b29a      	uxth	r2, r3
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	881b      	ldrh	r3, [r3, #0]
 8000586:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 8000588:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800058a:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 800058e:	f023 0302 	bic.w	r3, r3, #2
 8000592:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	889a      	ldrh	r2, [r3, #4]
 8000598:	683b      	ldr	r3, [r7, #0]
 800059a:	895b      	ldrh	r3, [r3, #10]
 800059c:	4313      	orrs	r3, r2
 800059e:	b29a      	uxth	r2, r3
 80005a0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80005a2:	4313      	orrs	r3, r2
 80005a4:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80005aa:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 80005ac:	683b      	ldr	r3, [r7, #0]
 80005ae:	899a      	ldrh	r2, [r3, #12]
 80005b0:	683b      	ldr	r3, [r7, #0]
 80005b2:	891b      	ldrh	r3, [r3, #8]
 80005b4:	4313      	orrs	r3, r2
 80005b6:	b29a      	uxth	r2, r3
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	811a      	strh	r2, [r3, #8]
}
 80005bc:	bf00      	nop
 80005be:	3728      	adds	r7, #40	; 0x28
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	007a1200 	.word	0x007a1200
 80005c8:	431bde83 	.word	0x431bde83
 80005cc:	000186a0 	.word	0x000186a0
 80005d0:	10624dd3 	.word	0x10624dd3

080005d4 <I2C_CheckEvent>:
  * @retval An ErrorStatus enumeration value:
  *           - SUCCESS: Last event is equal to the I2C_EVENT
  *           - ERROR: Last event is different from the I2C_EVENT
  */
ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b087      	sub	sp, #28
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
 80005dc:	6039      	str	r1, [r7, #0]
  uint32_t lastevent = 0;
 80005de:	2300      	movs	r3, #0
 80005e0:	613b      	str	r3, [r7, #16]
  uint32_t flag1 = 0, flag2 = 0;
 80005e2:	2300      	movs	r3, #0
 80005e4:	60fb      	str	r3, [r7, #12]
 80005e6:	2300      	movs	r3, #0
 80005e8:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 80005ea:	2300      	movs	r3, #0
 80005ec:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	8a9b      	ldrh	r3, [r3, #20]
 80005f2:	b29b      	uxth	r3, r3
 80005f4:	60fb      	str	r3, [r7, #12]
  flag2 = I2Cx->SR2;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	8b1b      	ldrh	r3, [r3, #24]
 80005fa:	b29b      	uxth	r3, r3
 80005fc:	60bb      	str	r3, [r7, #8]
  flag2 = flag2 << 16;
 80005fe:	68bb      	ldr	r3, [r7, #8]
 8000600:	041b      	lsls	r3, r3, #16
 8000602:	60bb      	str	r3, [r7, #8]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 8000604:	68fa      	ldr	r2, [r7, #12]
 8000606:	68bb      	ldr	r3, [r7, #8]
 8000608:	4313      	orrs	r3, r2
 800060a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800060e:	613b      	str	r3, [r7, #16]

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 8000610:	693a      	ldr	r2, [r7, #16]
 8000612:	683b      	ldr	r3, [r7, #0]
 8000614:	401a      	ands	r2, r3
 8000616:	683b      	ldr	r3, [r7, #0]
 8000618:	429a      	cmp	r2, r3
 800061a:	d102      	bne.n	8000622 <I2C_CheckEvent+0x4e>
  {
    /* SUCCESS: last event is equal to I2C_EVENT */
    status = SUCCESS;
 800061c:	2301      	movs	r3, #1
 800061e:	75fb      	strb	r3, [r7, #23]
 8000620:	e001      	b.n	8000626 <I2C_CheckEvent+0x52>
  }
  else
  {
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
 8000622:	2300      	movs	r3, #0
 8000624:	75fb      	strb	r3, [r7, #23]
  }
  /* Return status */
  return status;
 8000626:	7dfb      	ldrb	r3, [r7, #23]
}
 8000628:	4618      	mov	r0, r3
 800062a:	371c      	adds	r7, #28
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr

08000634 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000634:	b480      	push	{r7}
 8000636:	b089      	sub	sp, #36	; 0x24
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800063c:	2300      	movs	r3, #0
 800063e:	61bb      	str	r3, [r7, #24]
 8000640:	2300      	movs	r3, #0
 8000642:	617b      	str	r3, [r7, #20]
 8000644:	2300      	movs	r3, #0
 8000646:	61fb      	str	r3, [r7, #28]
 8000648:	2302      	movs	r3, #2
 800064a:	613b      	str	r3, [r7, #16]
 800064c:	2300      	movs	r3, #0
 800064e:	60fb      	str	r3, [r7, #12]
 8000650:	2302      	movs	r3, #2
 8000652:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000654:	4b47      	ldr	r3, [pc, #284]	; (8000774 <RCC_GetClocksFreq+0x140>)
 8000656:	689b      	ldr	r3, [r3, #8]
 8000658:	f003 030c 	and.w	r3, r3, #12
 800065c:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 800065e:	69bb      	ldr	r3, [r7, #24]
 8000660:	2b04      	cmp	r3, #4
 8000662:	d007      	beq.n	8000674 <RCC_GetClocksFreq+0x40>
 8000664:	2b08      	cmp	r3, #8
 8000666:	d009      	beq.n	800067c <RCC_GetClocksFreq+0x48>
 8000668:	2b00      	cmp	r3, #0
 800066a:	d13d      	bne.n	80006e8 <RCC_GetClocksFreq+0xb4>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	4a42      	ldr	r2, [pc, #264]	; (8000778 <RCC_GetClocksFreq+0x144>)
 8000670:	601a      	str	r2, [r3, #0]
      break;
 8000672:	e03d      	b.n	80006f0 <RCC_GetClocksFreq+0xbc>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	4a41      	ldr	r2, [pc, #260]	; (800077c <RCC_GetClocksFreq+0x148>)
 8000678:	601a      	str	r2, [r3, #0]
      break;
 800067a:	e039      	b.n	80006f0 <RCC_GetClocksFreq+0xbc>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800067c:	4b3d      	ldr	r3, [pc, #244]	; (8000774 <RCC_GetClocksFreq+0x140>)
 800067e:	685b      	ldr	r3, [r3, #4]
 8000680:	0d9b      	lsrs	r3, r3, #22
 8000682:	f003 0301 	and.w	r3, r3, #1
 8000686:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000688:	4b3a      	ldr	r3, [pc, #232]	; (8000774 <RCC_GetClocksFreq+0x140>)
 800068a:	685b      	ldr	r3, [r3, #4]
 800068c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000690:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d00c      	beq.n	80006b2 <RCC_GetClocksFreq+0x7e>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000698:	4a38      	ldr	r2, [pc, #224]	; (800077c <RCC_GetClocksFreq+0x148>)
 800069a:	68bb      	ldr	r3, [r7, #8]
 800069c:	fbb2 f3f3 	udiv	r3, r2, r3
 80006a0:	4a34      	ldr	r2, [pc, #208]	; (8000774 <RCC_GetClocksFreq+0x140>)
 80006a2:	6852      	ldr	r2, [r2, #4]
 80006a4:	0992      	lsrs	r2, r2, #6
 80006a6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80006aa:	fb02 f303 	mul.w	r3, r2, r3
 80006ae:	61fb      	str	r3, [r7, #28]
 80006b0:	e00b      	b.n	80006ca <RCC_GetClocksFreq+0x96>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80006b2:	4a31      	ldr	r2, [pc, #196]	; (8000778 <RCC_GetClocksFreq+0x144>)
 80006b4:	68bb      	ldr	r3, [r7, #8]
 80006b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80006ba:	4a2e      	ldr	r2, [pc, #184]	; (8000774 <RCC_GetClocksFreq+0x140>)
 80006bc:	6852      	ldr	r2, [r2, #4]
 80006be:	0992      	lsrs	r2, r2, #6
 80006c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80006c4:	fb02 f303 	mul.w	r3, r2, r3
 80006c8:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80006ca:	4b2a      	ldr	r3, [pc, #168]	; (8000774 <RCC_GetClocksFreq+0x140>)
 80006cc:	685b      	ldr	r3, [r3, #4]
 80006ce:	0c1b      	lsrs	r3, r3, #16
 80006d0:	f003 0303 	and.w	r3, r3, #3
 80006d4:	3301      	adds	r3, #1
 80006d6:	005b      	lsls	r3, r3, #1
 80006d8:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 80006da:	69fa      	ldr	r2, [r7, #28]
 80006dc:	693b      	ldr	r3, [r7, #16]
 80006de:	fbb2 f2f3 	udiv	r2, r2, r3
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	601a      	str	r2, [r3, #0]
      break;
 80006e6:	e003      	b.n	80006f0 <RCC_GetClocksFreq+0xbc>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	4a23      	ldr	r2, [pc, #140]	; (8000778 <RCC_GetClocksFreq+0x144>)
 80006ec:	601a      	str	r2, [r3, #0]
      break;
 80006ee:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80006f0:	4b20      	ldr	r3, [pc, #128]	; (8000774 <RCC_GetClocksFreq+0x140>)
 80006f2:	689b      	ldr	r3, [r3, #8]
 80006f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80006f8:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 80006fa:	69bb      	ldr	r3, [r7, #24]
 80006fc:	091b      	lsrs	r3, r3, #4
 80006fe:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000700:	4a1f      	ldr	r2, [pc, #124]	; (8000780 <RCC_GetClocksFreq+0x14c>)
 8000702:	69bb      	ldr	r3, [r7, #24]
 8000704:	4413      	add	r3, r2
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	b2db      	uxtb	r3, r3
 800070a:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681a      	ldr	r2, [r3, #0]
 8000710:	697b      	ldr	r3, [r7, #20]
 8000712:	40da      	lsrs	r2, r3
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000718:	4b16      	ldr	r3, [pc, #88]	; (8000774 <RCC_GetClocksFreq+0x140>)
 800071a:	689b      	ldr	r3, [r3, #8]
 800071c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000720:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8000722:	69bb      	ldr	r3, [r7, #24]
 8000724:	0a9b      	lsrs	r3, r3, #10
 8000726:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000728:	4a15      	ldr	r2, [pc, #84]	; (8000780 <RCC_GetClocksFreq+0x14c>)
 800072a:	69bb      	ldr	r3, [r7, #24]
 800072c:	4413      	add	r3, r2
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	b2db      	uxtb	r3, r3
 8000732:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	685a      	ldr	r2, [r3, #4]
 8000738:	697b      	ldr	r3, [r7, #20]
 800073a:	40da      	lsrs	r2, r3
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000740:	4b0c      	ldr	r3, [pc, #48]	; (8000774 <RCC_GetClocksFreq+0x140>)
 8000742:	689b      	ldr	r3, [r3, #8]
 8000744:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000748:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 800074a:	69bb      	ldr	r3, [r7, #24]
 800074c:	0b5b      	lsrs	r3, r3, #13
 800074e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000750:	4a0b      	ldr	r2, [pc, #44]	; (8000780 <RCC_GetClocksFreq+0x14c>)
 8000752:	69bb      	ldr	r3, [r7, #24]
 8000754:	4413      	add	r3, r2
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	b2db      	uxtb	r3, r3
 800075a:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	685a      	ldr	r2, [r3, #4]
 8000760:	697b      	ldr	r3, [r7, #20]
 8000762:	40da      	lsrs	r2, r3
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	60da      	str	r2, [r3, #12]
}
 8000768:	bf00      	nop
 800076a:	3724      	adds	r7, #36	; 0x24
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr
 8000774:	40023800 	.word	0x40023800
 8000778:	00f42400 	.word	0x00f42400
 800077c:	017d7840 	.word	0x017d7840
 8000780:	20000000 	.word	0x20000000

08000784 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000784:	b480      	push	{r7}
 8000786:	b083      	sub	sp, #12
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
 800078c:	460b      	mov	r3, r1
 800078e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000790:	78fb      	ldrb	r3, [r7, #3]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d006      	beq.n	80007a4 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000796:	490a      	ldr	r1, [pc, #40]	; (80007c0 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000798:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <RCC_AHB1PeriphClockCmd+0x3c>)
 800079a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	4313      	orrs	r3, r2
 80007a0:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 80007a2:	e006      	b.n	80007b2 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80007a4:	4906      	ldr	r1, [pc, #24]	; (80007c0 <RCC_AHB1PeriphClockCmd+0x3c>)
 80007a6:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <RCC_AHB1PeriphClockCmd+0x3c>)
 80007a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	43db      	mvns	r3, r3
 80007ae:	4013      	ands	r3, r2
 80007b0:	630b      	str	r3, [r1, #48]	; 0x30
}
 80007b2:	bf00      	nop
 80007b4:	370c      	adds	r7, #12
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	40023800 	.word	0x40023800

080007c4 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b083      	sub	sp, #12
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
 80007cc:	460b      	mov	r3, r1
 80007ce:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80007d0:	78fb      	ldrb	r3, [r7, #3]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d006      	beq.n	80007e4 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80007d6:	490a      	ldr	r1, [pc, #40]	; (8000800 <RCC_APB1PeriphClockCmd+0x3c>)
 80007d8:	4b09      	ldr	r3, [pc, #36]	; (8000800 <RCC_APB1PeriphClockCmd+0x3c>)
 80007da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	4313      	orrs	r3, r2
 80007e0:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 80007e2:	e006      	b.n	80007f2 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80007e4:	4906      	ldr	r1, [pc, #24]	; (8000800 <RCC_APB1PeriphClockCmd+0x3c>)
 80007e6:	4b06      	ldr	r3, [pc, #24]	; (8000800 <RCC_APB1PeriphClockCmd+0x3c>)
 80007e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	43db      	mvns	r3, r3
 80007ee:	4013      	ands	r3, r2
 80007f0:	640b      	str	r3, [r1, #64]	; 0x40
}
 80007f2:	bf00      	nop
 80007f4:	370c      	adds	r7, #12
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	40023800 	.word	0x40023800

08000804 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8000804:	b480      	push	{r7}
 8000806:	b085      	sub	sp, #20
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
 800080c:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 800080e:	2300      	movs	r3, #0
 8000810:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	881b      	ldrh	r3, [r3, #0]
 8000816:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	4a29      	ldr	r2, [pc, #164]	; (80008c0 <TIM_TimeBaseInit+0xbc>)
 800081c:	4293      	cmp	r3, r2
 800081e:	d013      	beq.n	8000848 <TIM_TimeBaseInit+0x44>
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	4a28      	ldr	r2, [pc, #160]	; (80008c4 <TIM_TimeBaseInit+0xc0>)
 8000824:	4293      	cmp	r3, r2
 8000826:	d00f      	beq.n	8000848 <TIM_TimeBaseInit+0x44>
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800082e:	d00b      	beq.n	8000848 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	4a25      	ldr	r2, [pc, #148]	; (80008c8 <TIM_TimeBaseInit+0xc4>)
 8000834:	4293      	cmp	r3, r2
 8000836:	d007      	beq.n	8000848 <TIM_TimeBaseInit+0x44>
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	4a24      	ldr	r2, [pc, #144]	; (80008cc <TIM_TimeBaseInit+0xc8>)
 800083c:	4293      	cmp	r3, r2
 800083e:	d003      	beq.n	8000848 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	4a23      	ldr	r2, [pc, #140]	; (80008d0 <TIM_TimeBaseInit+0xcc>)
 8000844:	4293      	cmp	r3, r2
 8000846:	d108      	bne.n	800085a <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8000848:	89fb      	ldrh	r3, [r7, #14]
 800084a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800084e:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	885a      	ldrh	r2, [r3, #2]
 8000854:	89fb      	ldrh	r3, [r7, #14]
 8000856:	4313      	orrs	r3, r2
 8000858:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	4a1d      	ldr	r2, [pc, #116]	; (80008d4 <TIM_TimeBaseInit+0xd0>)
 800085e:	4293      	cmp	r3, r2
 8000860:	d00c      	beq.n	800087c <TIM_TimeBaseInit+0x78>
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	4a1c      	ldr	r2, [pc, #112]	; (80008d8 <TIM_TimeBaseInit+0xd4>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d008      	beq.n	800087c <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 800086a:	89fb      	ldrh	r3, [r7, #14]
 800086c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000870:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	891a      	ldrh	r2, [r3, #8]
 8000876:	89fb      	ldrh	r3, [r7, #14]
 8000878:	4313      	orrs	r3, r2
 800087a:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	89fa      	ldrh	r2, [r7, #14]
 8000880:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	685a      	ldr	r2, [r3, #4]
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	881a      	ldrh	r2, [r3, #0]
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	4a0a      	ldr	r2, [pc, #40]	; (80008c0 <TIM_TimeBaseInit+0xbc>)
 8000896:	4293      	cmp	r3, r2
 8000898:	d003      	beq.n	80008a2 <TIM_TimeBaseInit+0x9e>
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	4a09      	ldr	r2, [pc, #36]	; (80008c4 <TIM_TimeBaseInit+0xc0>)
 800089e:	4293      	cmp	r3, r2
 80008a0:	d104      	bne.n	80008ac <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	7a9b      	ldrb	r3, [r3, #10]
 80008a6:	b29a      	uxth	r2, r3
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	2201      	movs	r2, #1
 80008b0:	829a      	strh	r2, [r3, #20]
}
 80008b2:	bf00      	nop
 80008b4:	3714      	adds	r7, #20
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	40010000 	.word	0x40010000
 80008c4:	40010400 	.word	0x40010400
 80008c8:	40000400 	.word	0x40000400
 80008cc:	40000800 	.word	0x40000800
 80008d0:	40000c00 	.word	0x40000c00
 80008d4:	40001000 	.word	0x40001000
 80008d8:	40001400 	.word	0x40001400

080008dc <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
 80008e4:	460b      	mov	r3, r1
 80008e6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80008e8:	78fb      	ldrb	r3, [r7, #3]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d008      	beq.n	8000900 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	881b      	ldrh	r3, [r3, #0]
 80008f2:	b29b      	uxth	r3, r3
 80008f4:	f043 0301 	orr.w	r3, r3, #1
 80008f8:	b29a      	uxth	r2, r3
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 80008fe:	e007      	b.n	8000910 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	881b      	ldrh	r3, [r3, #0]
 8000904:	b29b      	uxth	r3, r3
 8000906:	f023 0301 	bic.w	r3, r3, #1
 800090a:	b29a      	uxth	r2, r3
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	801a      	strh	r2, [r3, #0]
}
 8000910:	bf00      	nop
 8000912:	370c      	adds	r7, #12
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr

0800091c <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800091c:	b480      	push	{r7}
 800091e:	b085      	sub	sp, #20
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
 8000924:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8000926:	2300      	movs	r3, #0
 8000928:	817b      	strh	r3, [r7, #10]
 800092a:	2300      	movs	r3, #0
 800092c:	81fb      	strh	r3, [r7, #14]
 800092e:	2300      	movs	r3, #0
 8000930:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	8c1b      	ldrh	r3, [r3, #32]
 8000936:	b29b      	uxth	r3, r3
 8000938:	f023 0301 	bic.w	r3, r3, #1
 800093c:	b29a      	uxth	r2, r3
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	8c1b      	ldrh	r3, [r3, #32]
 8000946:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	889b      	ldrh	r3, [r3, #4]
 800094c:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	8b1b      	ldrh	r3, [r3, #24]
 8000952:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
 8000954:	897b      	ldrh	r3, [r7, #10]
 8000956:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800095a:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 800095c:	897b      	ldrh	r3, [r7, #10]
 800095e:	f023 0303 	bic.w	r3, r3, #3
 8000962:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	881a      	ldrh	r2, [r3, #0]
 8000968:	897b      	ldrh	r3, [r7, #10]
 800096a:	4313      	orrs	r3, r2
 800096c:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 800096e:	89fb      	ldrh	r3, [r7, #14]
 8000970:	f023 0302 	bic.w	r3, r3, #2
 8000974:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	899a      	ldrh	r2, [r3, #12]
 800097a:	89fb      	ldrh	r3, [r7, #14]
 800097c:	4313      	orrs	r3, r2
 800097e:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	885a      	ldrh	r2, [r3, #2]
 8000984:	89fb      	ldrh	r3, [r7, #14]
 8000986:	4313      	orrs	r3, r2
 8000988:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	4a1e      	ldr	r2, [pc, #120]	; (8000a08 <TIM_OC1Init+0xec>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d003      	beq.n	800099a <TIM_OC1Init+0x7e>
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	4a1d      	ldr	r2, [pc, #116]	; (8000a0c <TIM_OC1Init+0xf0>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d123      	bne.n	80009e2 <TIM_OC1Init+0xc6>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 800099a:	89fb      	ldrh	r3, [r7, #14]
 800099c:	f023 0308 	bic.w	r3, r3, #8
 80009a0:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	89da      	ldrh	r2, [r3, #14]
 80009a6:	89fb      	ldrh	r3, [r7, #14]
 80009a8:	4313      	orrs	r3, r2
 80009aa:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
 80009ac:	89fb      	ldrh	r3, [r7, #14]
 80009ae:	f023 0304 	bic.w	r3, r3, #4
 80009b2:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	889a      	ldrh	r2, [r3, #4]
 80009b8:	89fb      	ldrh	r3, [r7, #14]
 80009ba:	4313      	orrs	r3, r2
 80009bc:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
 80009be:	89bb      	ldrh	r3, [r7, #12]
 80009c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80009c4:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
 80009c6:	89bb      	ldrh	r3, [r7, #12]
 80009c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80009cc:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	8a1a      	ldrh	r2, [r3, #16]
 80009d2:	89bb      	ldrh	r3, [r7, #12]
 80009d4:	4313      	orrs	r3, r2
 80009d6:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	8a5a      	ldrh	r2, [r3, #18]
 80009dc:	89bb      	ldrh	r3, [r7, #12]
 80009de:	4313      	orrs	r3, r2
 80009e0:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	89ba      	ldrh	r2, [r7, #12]
 80009e6:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	897a      	ldrh	r2, [r7, #10]
 80009ec:	831a      	strh	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	689a      	ldr	r2, [r3, #8]
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	89fa      	ldrh	r2, [r7, #14]
 80009fa:	841a      	strh	r2, [r3, #32]
}
 80009fc:	bf00      	nop
 80009fe:	3714      	adds	r7, #20
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr
 8000a08:	40010000 	.word	0x40010000
 8000a0c:	40010400 	.word	0x40010400

08000a10 <TIM_OC2Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b085      	sub	sp, #20
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
 8000a18:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	817b      	strh	r3, [r7, #10]
 8000a1e:	2300      	movs	r3, #0
 8000a20:	81fb      	strh	r3, [r7, #14]
 8000a22:	2300      	movs	r3, #0
 8000a24:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	8c1b      	ldrh	r3, [r3, #32]
 8000a2a:	b29b      	uxth	r3, r3
 8000a2c:	f023 0310 	bic.w	r3, r3, #16
 8000a30:	b29a      	uxth	r2, r3
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	8c1b      	ldrh	r3, [r3, #32]
 8000a3a:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	889b      	ldrh	r3, [r3, #4]
 8000a40:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	8b1b      	ldrh	r3, [r3, #24]
 8000a46:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
 8000a48:	897b      	ldrh	r3, [r7, #10]
 8000a4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000a4e:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
 8000a50:	897b      	ldrh	r3, [r7, #10]
 8000a52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000a56:	817b      	strh	r3, [r7, #10]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	881b      	ldrh	r3, [r3, #0]
 8000a5c:	021b      	lsls	r3, r3, #8
 8000a5e:	b29a      	uxth	r2, r3
 8000a60:	897b      	ldrh	r3, [r7, #10]
 8000a62:	4313      	orrs	r3, r2
 8000a64:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 8000a66:	89fb      	ldrh	r3, [r7, #14]
 8000a68:	f023 0320 	bic.w	r3, r3, #32
 8000a6c:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	899b      	ldrh	r3, [r3, #12]
 8000a72:	011b      	lsls	r3, r3, #4
 8000a74:	b29a      	uxth	r2, r3
 8000a76:	89fb      	ldrh	r3, [r7, #14]
 8000a78:	4313      	orrs	r3, r2
 8000a7a:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	885b      	ldrh	r3, [r3, #2]
 8000a80:	011b      	lsls	r3, r3, #4
 8000a82:	b29a      	uxth	r2, r3
 8000a84:	89fb      	ldrh	r3, [r7, #14]
 8000a86:	4313      	orrs	r3, r2
 8000a88:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	4a22      	ldr	r2, [pc, #136]	; (8000b18 <TIM_OC2Init+0x108>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d003      	beq.n	8000a9a <TIM_OC2Init+0x8a>
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	4a21      	ldr	r2, [pc, #132]	; (8000b1c <TIM_OC2Init+0x10c>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d12b      	bne.n	8000af2 <TIM_OC2Init+0xe2>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 8000a9a:	89fb      	ldrh	r3, [r7, #14]
 8000a9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000aa0:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	89db      	ldrh	r3, [r3, #14]
 8000aa6:	011b      	lsls	r3, r3, #4
 8000aa8:	b29a      	uxth	r2, r3
 8000aaa:	89fb      	ldrh	r3, [r7, #14]
 8000aac:	4313      	orrs	r3, r2
 8000aae:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
 8000ab0:	89fb      	ldrh	r3, [r7, #14]
 8000ab2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000ab6:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	889b      	ldrh	r3, [r3, #4]
 8000abc:	011b      	lsls	r3, r3, #4
 8000abe:	b29a      	uxth	r2, r3
 8000ac0:	89fb      	ldrh	r3, [r7, #14]
 8000ac2:	4313      	orrs	r3, r2
 8000ac4:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
 8000ac6:	89bb      	ldrh	r3, [r7, #12]
 8000ac8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000acc:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
 8000ace:	89bb      	ldrh	r3, [r7, #12]
 8000ad0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000ad4:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	8a1b      	ldrh	r3, [r3, #16]
 8000ada:	009b      	lsls	r3, r3, #2
 8000adc:	b29a      	uxth	r2, r3
 8000ade:	89bb      	ldrh	r3, [r7, #12]
 8000ae0:	4313      	orrs	r3, r2
 8000ae2:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	8a5b      	ldrh	r3, [r3, #18]
 8000ae8:	009b      	lsls	r3, r3, #2
 8000aea:	b29a      	uxth	r2, r3
 8000aec:	89bb      	ldrh	r3, [r7, #12]
 8000aee:	4313      	orrs	r3, r2
 8000af0:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	89ba      	ldrh	r2, [r7, #12]
 8000af6:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	897a      	ldrh	r2, [r7, #10]
 8000afc:	831a      	strh	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	689a      	ldr	r2, [r3, #8]
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	89fa      	ldrh	r2, [r7, #14]
 8000b0a:	841a      	strh	r2, [r3, #32]
}
 8000b0c:	bf00      	nop
 8000b0e:	3714      	adds	r7, #20
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr
 8000b18:	40010000 	.word	0x40010000
 8000b1c:	40010400 	.word	0x40010400

08000b20 <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b085      	sub	sp, #20
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
 8000b28:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	817b      	strh	r3, [r7, #10]
 8000b2e:	2300      	movs	r3, #0
 8000b30:	81fb      	strh	r3, [r7, #14]
 8000b32:	2300      	movs	r3, #0
 8000b34:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	8c1b      	ldrh	r3, [r3, #32]
 8000b3a:	b29b      	uxth	r3, r3
 8000b3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000b40:	b29a      	uxth	r2, r3
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	8c1b      	ldrh	r3, [r3, #32]
 8000b4a:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	889b      	ldrh	r3, [r3, #4]
 8000b50:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	8b9b      	ldrh	r3, [r3, #28]
 8000b56:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
 8000b58:	897b      	ldrh	r3, [r7, #10]
 8000b5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000b5e:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 8000b60:	897b      	ldrh	r3, [r7, #10]
 8000b62:	f023 0303 	bic.w	r3, r3, #3
 8000b66:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	881a      	ldrh	r2, [r3, #0]
 8000b6c:	897b      	ldrh	r3, [r7, #10]
 8000b6e:	4313      	orrs	r3, r2
 8000b70:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 8000b72:	89fb      	ldrh	r3, [r7, #14]
 8000b74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000b78:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	899b      	ldrh	r3, [r3, #12]
 8000b7e:	021b      	lsls	r3, r3, #8
 8000b80:	b29a      	uxth	r2, r3
 8000b82:	89fb      	ldrh	r3, [r7, #14]
 8000b84:	4313      	orrs	r3, r2
 8000b86:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	885b      	ldrh	r3, [r3, #2]
 8000b8c:	021b      	lsls	r3, r3, #8
 8000b8e:	b29a      	uxth	r2, r3
 8000b90:	89fb      	ldrh	r3, [r7, #14]
 8000b92:	4313      	orrs	r3, r2
 8000b94:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	4a22      	ldr	r2, [pc, #136]	; (8000c24 <TIM_OC3Init+0x104>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d003      	beq.n	8000ba6 <TIM_OC3Init+0x86>
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	4a21      	ldr	r2, [pc, #132]	; (8000c28 <TIM_OC3Init+0x108>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d12b      	bne.n	8000bfe <TIM_OC3Init+0xde>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 8000ba6:	89fb      	ldrh	r3, [r7, #14]
 8000ba8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000bac:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	89db      	ldrh	r3, [r3, #14]
 8000bb2:	021b      	lsls	r3, r3, #8
 8000bb4:	b29a      	uxth	r2, r3
 8000bb6:	89fb      	ldrh	r3, [r7, #14]
 8000bb8:	4313      	orrs	r3, r2
 8000bba:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 8000bbc:	89fb      	ldrh	r3, [r7, #14]
 8000bbe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000bc2:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	889b      	ldrh	r3, [r3, #4]
 8000bc8:	021b      	lsls	r3, r3, #8
 8000bca:	b29a      	uxth	r2, r3
 8000bcc:	89fb      	ldrh	r3, [r7, #14]
 8000bce:	4313      	orrs	r3, r2
 8000bd0:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
 8000bd2:	89bb      	ldrh	r3, [r7, #12]
 8000bd4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000bd8:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 8000bda:	89bb      	ldrh	r3, [r7, #12]
 8000bdc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000be0:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	8a1b      	ldrh	r3, [r3, #16]
 8000be6:	011b      	lsls	r3, r3, #4
 8000be8:	b29a      	uxth	r2, r3
 8000bea:	89bb      	ldrh	r3, [r7, #12]
 8000bec:	4313      	orrs	r3, r2
 8000bee:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	8a5b      	ldrh	r3, [r3, #18]
 8000bf4:	011b      	lsls	r3, r3, #4
 8000bf6:	b29a      	uxth	r2, r3
 8000bf8:	89bb      	ldrh	r3, [r7, #12]
 8000bfa:	4313      	orrs	r3, r2
 8000bfc:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	89ba      	ldrh	r2, [r7, #12]
 8000c02:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	897a      	ldrh	r2, [r7, #10]
 8000c08:	839a      	strh	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	689a      	ldr	r2, [r3, #8]
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	89fa      	ldrh	r2, [r7, #14]
 8000c16:	841a      	strh	r2, [r3, #32]
}
 8000c18:	bf00      	nop
 8000c1a:	3714      	adds	r7, #20
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	40010000 	.word	0x40010000
 8000c28:	40010400 	.word	0x40010400

08000c2c <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b085      	sub	sp, #20
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8000c36:	2300      	movs	r3, #0
 8000c38:	81bb      	strh	r3, [r7, #12]
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	817b      	strh	r3, [r7, #10]
 8000c3e:	2300      	movs	r3, #0
 8000c40:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	8c1b      	ldrh	r3, [r3, #32]
 8000c46:	b29b      	uxth	r3, r3
 8000c48:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000c4c:	b29a      	uxth	r2, r3
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	8c1b      	ldrh	r3, [r3, #32]
 8000c56:	817b      	strh	r3, [r7, #10]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	889b      	ldrh	r3, [r3, #4]
 8000c5c:	81fb      	strh	r3, [r7, #14]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	8b9b      	ldrh	r3, [r3, #28]
 8000c62:	81bb      	strh	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
 8000c64:	89bb      	ldrh	r3, [r7, #12]
 8000c66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000c6a:	81bb      	strh	r3, [r7, #12]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 8000c6c:	89bb      	ldrh	r3, [r7, #12]
 8000c6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000c72:	81bb      	strh	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	881b      	ldrh	r3, [r3, #0]
 8000c78:	021b      	lsls	r3, r3, #8
 8000c7a:	b29a      	uxth	r2, r3
 8000c7c:	89bb      	ldrh	r3, [r7, #12]
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	81bb      	strh	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 8000c82:	897b      	ldrh	r3, [r7, #10]
 8000c84:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000c88:	817b      	strh	r3, [r7, #10]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	899b      	ldrh	r3, [r3, #12]
 8000c8e:	031b      	lsls	r3, r3, #12
 8000c90:	b29a      	uxth	r2, r3
 8000c92:	897b      	ldrh	r3, [r7, #10]
 8000c94:	4313      	orrs	r3, r2
 8000c96:	817b      	strh	r3, [r7, #10]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	885b      	ldrh	r3, [r3, #2]
 8000c9c:	031b      	lsls	r3, r3, #12
 8000c9e:	b29a      	uxth	r2, r3
 8000ca0:	897b      	ldrh	r3, [r7, #10]
 8000ca2:	4313      	orrs	r3, r2
 8000ca4:	817b      	strh	r3, [r7, #10]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	4a12      	ldr	r2, [pc, #72]	; (8000cf4 <TIM_OC4Init+0xc8>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d003      	beq.n	8000cb6 <TIM_OC4Init+0x8a>
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4a11      	ldr	r2, [pc, #68]	; (8000cf8 <TIM_OC4Init+0xcc>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d10a      	bne.n	8000ccc <TIM_OC4Init+0xa0>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
 8000cb6:	89fb      	ldrh	r3, [r7, #14]
 8000cb8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000cbc:	81fb      	strh	r3, [r7, #14]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	8a1b      	ldrh	r3, [r3, #16]
 8000cc2:	019b      	lsls	r3, r3, #6
 8000cc4:	b29a      	uxth	r2, r3
 8000cc6:	89fb      	ldrh	r3, [r7, #14]
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	81fb      	strh	r3, [r7, #14]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	89fa      	ldrh	r2, [r7, #14]
 8000cd0:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	89ba      	ldrh	r2, [r7, #12]
 8000cd6:	839a      	strh	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	689a      	ldr	r2, [r3, #8]
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	897a      	ldrh	r2, [r7, #10]
 8000ce4:	841a      	strh	r2, [r3, #32]
}
 8000ce6:	bf00      	nop
 8000ce8:	3714      	adds	r7, #20
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	40010000 	.word	0x40010000
 8000cf8:	40010400 	.word	0x40010400

08000cfc <TIM_OC1PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b085      	sub	sp, #20
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
 8000d04:	460b      	mov	r3, r1
 8000d06:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	8b1b      	ldrh	r3, [r3, #24]
 8000d10:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC1PE);
 8000d12:	89fb      	ldrh	r3, [r7, #14]
 8000d14:	f023 0308 	bic.w	r3, r3, #8
 8000d18:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 8000d1a:	89fa      	ldrh	r2, [r7, #14]
 8000d1c:	887b      	ldrh	r3, [r7, #2]
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	89fa      	ldrh	r2, [r7, #14]
 8000d26:	831a      	strh	r2, [r3, #24]
}
 8000d28:	bf00      	nop
 8000d2a:	3714      	adds	r7, #20
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr

08000d34 <TIM_OC2PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b085      	sub	sp, #20
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
 8000d3c:	460b      	mov	r3, r1
 8000d3e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8000d40:	2300      	movs	r3, #0
 8000d42:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	8b1b      	ldrh	r3, [r3, #24]
 8000d48:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2PE);
 8000d4a:	89fb      	ldrh	r3, [r7, #14]
 8000d4c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000d50:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
 8000d52:	887b      	ldrh	r3, [r7, #2]
 8000d54:	021b      	lsls	r3, r3, #8
 8000d56:	b29a      	uxth	r2, r3
 8000d58:	89fb      	ldrh	r3, [r7, #14]
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	89fa      	ldrh	r2, [r7, #14]
 8000d62:	831a      	strh	r2, [r3, #24]
}
 8000d64:	bf00      	nop
 8000d66:	3714      	adds	r7, #20
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr

08000d70 <TIM_OC3PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b085      	sub	sp, #20
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	460b      	mov	r3, r1
 8000d7a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	8b9b      	ldrh	r3, [r3, #28]
 8000d84:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC3PE);
 8000d86:	89fb      	ldrh	r3, [r7, #14]
 8000d88:	f023 0308 	bic.w	r3, r3, #8
 8000d8c:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 8000d8e:	89fa      	ldrh	r2, [r7, #14]
 8000d90:	887b      	ldrh	r3, [r7, #2]
 8000d92:	4313      	orrs	r3, r2
 8000d94:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	89fa      	ldrh	r2, [r7, #14]
 8000d9a:	839a      	strh	r2, [r3, #28]
}
 8000d9c:	bf00      	nop
 8000d9e:	3714      	adds	r7, #20
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr

08000da8 <TIM_OC4PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b085      	sub	sp, #20
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
 8000db0:	460b      	mov	r3, r1
 8000db2:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8000db4:	2300      	movs	r3, #0
 8000db6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	8b9b      	ldrh	r3, [r3, #28]
 8000dbc:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4PE);
 8000dbe:	89fb      	ldrh	r3, [r7, #14]
 8000dc0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000dc4:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 8000dc6:	887b      	ldrh	r3, [r7, #2]
 8000dc8:	021b      	lsls	r3, r3, #8
 8000dca:	b29a      	uxth	r2, r3
 8000dcc:	89fb      	ldrh	r3, [r7, #14]
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	89fa      	ldrh	r2, [r7, #14]
 8000dd6:	839a      	strh	r2, [r3, #28]
}
 8000dd8:	bf00      	nop
 8000dda:	3714      	adds	r7, #20
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr

08000de4 <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
 8000dec:	460b      	mov	r3, r1
 8000dee:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8000df0:	887b      	ldrh	r3, [r7, #2]
 8000df2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000df6:	b29a      	uxth	r2, r3
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	809a      	strh	r2, [r3, #4]
}
 8000dfc:	bf00      	nop
 8000dfe:	370c      	adds	r7, #12
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr

08000e08 <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b087      	sub	sp, #28
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
 8000e10:	460b      	mov	r3, r1
 8000e12:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 8000e14:	2300      	movs	r3, #0
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	2300      	movs	r3, #0
 8000e1a:	617b      	str	r3, [r7, #20]
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8000e20:	2300      	movs	r3, #0
 8000e22:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8000e24:	887b      	ldrh	r3, [r7, #2]
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	095b      	lsrs	r3, r3, #5
 8000e2a:	b2db      	uxtb	r3, r3
 8000e2c:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8000e2e:	887b      	ldrh	r3, [r7, #2]
 8000e30:	f003 031f 	and.w	r3, r3, #31
 8000e34:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8000e36:	2201      	movs	r2, #1
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3e:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	2b01      	cmp	r3, #1
 8000e44:	d107      	bne.n	8000e56 <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	899b      	ldrh	r3, [r3, #12]
 8000e4a:	b29b      	uxth	r3, r3
 8000e4c:	461a      	mov	r2, r3
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	4013      	ands	r3, r2
 8000e52:	617b      	str	r3, [r7, #20]
 8000e54:	e011      	b.n	8000e7a <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8000e56:	68bb      	ldr	r3, [r7, #8]
 8000e58:	2b02      	cmp	r3, #2
 8000e5a:	d107      	bne.n	8000e6c <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	8a1b      	ldrh	r3, [r3, #16]
 8000e60:	b29b      	uxth	r3, r3
 8000e62:	461a      	mov	r2, r3
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	4013      	ands	r3, r2
 8000e68:	617b      	str	r3, [r7, #20]
 8000e6a:	e006      	b.n	8000e7a <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	8a9b      	ldrh	r3, [r3, #20]
 8000e70:	b29b      	uxth	r3, r3
 8000e72:	461a      	mov	r2, r3
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	4013      	ands	r3, r2
 8000e78:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8000e7a:	887b      	ldrh	r3, [r7, #2]
 8000e7c:	0a1b      	lsrs	r3, r3, #8
 8000e7e:	b29b      	uxth	r3, r3
 8000e80:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8000e82:	2201      	movs	r2, #1
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8a:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	881b      	ldrh	r3, [r3, #0]
 8000e90:	b29b      	uxth	r3, r3
 8000e92:	461a      	mov	r2, r3
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	4013      	ands	r3, r2
 8000e98:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d005      	beq.n	8000eac <USART_GetITStatus+0xa4>
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d002      	beq.n	8000eac <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	74fb      	strb	r3, [r7, #19]
 8000eaa:	e001      	b.n	8000eb0 <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 8000eac:	2300      	movs	r3, #0
 8000eae:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8000eb0:	7cfb      	ldrb	r3, [r7, #19]
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	371c      	adds	r7, #28
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr

08000ebe <Delay>:
uint8_t below_5 = 0;
uint8_t reset = 0;



void Delay(__IO uint32_t nCount) {
 8000ebe:	b480      	push	{r7}
 8000ec0:	b083      	sub	sp, #12
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	6078      	str	r0, [r7, #4]
  while(nCount--) {
 8000ec6:	bf00      	nop
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	1e5a      	subs	r2, r3, #1
 8000ecc:	607a      	str	r2, [r7, #4]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d1fa      	bne.n	8000ec8 <Delay+0xa>
  }
}
 8000ed2:	bf00      	nop
 8000ed4:	370c      	adds	r7, #12
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr

08000ede <USART_puts>:
 * 		 C a string is just an array of characters
 *
 * Note 2: At the moment it takes a volatile char because the received_string variable
 * 		   declared as volatile char --> otherwise the compiler will spit out warnings
 * */
void USART_puts(USART_TypeDef* USARTx, volatile char *s){
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	b082      	sub	sp, #8
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
 8000ee6:	6039      	str	r1, [r7, #0]

	while(*s){
 8000ee8:	e013      	b.n	8000f12 <USART_puts+0x34>
		// wait until data register is empty
		while( !(USARTx->SR & 0x00000040) );
 8000eea:	bf00      	nop
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	881b      	ldrh	r3, [r3, #0]
 8000ef0:	b29b      	uxth	r3, r3
 8000ef2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d0f8      	beq.n	8000eec <USART_puts+0xe>
		USART_SendData(USARTx, *s);
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	b29b      	uxth	r3, r3
 8000f02:	4619      	mov	r1, r3
 8000f04:	6878      	ldr	r0, [r7, #4]
 8000f06:	f7ff ff6d 	bl	8000de4 <USART_SendData>
		*s++;
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	1c5a      	adds	r2, r3, #1
 8000f0e:	603a      	str	r2, [r7, #0]
 8000f10:	781b      	ldrb	r3, [r3, #0]
	while(*s){
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d1e6      	bne.n	8000eea <USART_puts+0xc>
	}
}
 8000f1c:	bf00      	nop
 8000f1e:	3708      	adds	r7, #8
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <TM_LEDS_Init>:


void TM_LEDS_Init(void) {
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;

	/* Clock for GPIOD */
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8000f2a:	2101      	movs	r1, #1
 8000f2c:	2004      	movs	r0, #4
 8000f2e:	f7ff fc29 	bl	8000784 <RCC_AHB1PeriphClockCmd>

	/* Alternating functions for pins */
	GPIO_PinAFConfig(GPIOC, GPIO_PinSource9, GPIO_AF_TIM3);
 8000f32:	2202      	movs	r2, #2
 8000f34:	2109      	movs	r1, #9
 8000f36:	4813      	ldr	r0, [pc, #76]	; (8000f84 <TM_LEDS_Init+0x60>)
 8000f38:	f7ff fa40 	bl	80003bc <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOC, GPIO_PinSource13, GPIO_AF_TIM4);
 8000f3c:	2202      	movs	r2, #2
 8000f3e:	210d      	movs	r1, #13
 8000f40:	4810      	ldr	r0, [pc, #64]	; (8000f84 <TM_LEDS_Init+0x60>)
 8000f42:	f7ff fa3b 	bl	80003bc <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOC, GPIO_PinSource14, GPIO_AF_TIM4);
 8000f46:	2202      	movs	r2, #2
 8000f48:	210e      	movs	r1, #14
 8000f4a:	480e      	ldr	r0, [pc, #56]	; (8000f84 <TM_LEDS_Init+0x60>)
 8000f4c:	f7ff fa36 	bl	80003bc <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOC, GPIO_PinSource15, GPIO_AF_TIM4);
 8000f50:	2202      	movs	r2, #2
 8000f52:	210f      	movs	r1, #15
 8000f54:	480b      	ldr	r0, [pc, #44]	; (8000f84 <TM_LEDS_Init+0x60>)
 8000f56:	f7ff fa31 	bl	80003bc <GPIO_PinAFConfig>

	/* Set pins */
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_9 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;
 8000f5a:	f44f 4362 	mov.w	r3, #57856	; 0xe200
 8000f5e:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8000f60:	2300      	movs	r3, #0
 8000f62:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000f64:	2300      	movs	r3, #0
 8000f66:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	713b      	strb	r3, [r7, #4]
    GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 8000f6c:	2303      	movs	r3, #3
 8000f6e:	717b      	strb	r3, [r7, #5]
    GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f70:	463b      	mov	r3, r7
 8000f72:	4619      	mov	r1, r3
 8000f74:	4803      	ldr	r0, [pc, #12]	; (8000f84 <TM_LEDS_Init+0x60>)
 8000f76:	f7ff f993 	bl	80002a0 <GPIO_Init>
}
 8000f7a:	bf00      	nop
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40020800 	.word	0x40020800

08000f88 <TM_TIMER_Init>:

void TM_TIMER_Init(void) {
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
	TIM_TimeBaseInitTypeDef TIM_BaseStruct;

	/* Enable clock for TIM4 */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
 8000f8e:	2101      	movs	r1, #1
 8000f90:	2002      	movs	r0, #2
 8000f92:	f7ff fc17 	bl	80007c4 <RCC_APB1PeriphClockCmd>
	In our case, we want a max frequency for timer, so we set prescaller to 0
	And our timer will have tick frequency

	timer_tick_frequency = 84000000 / (0 + 1) = 84000000
*/
	TIM_BaseStruct.TIM_Prescaler = 0;
 8000f96:	2300      	movs	r3, #0
 8000f98:	80bb      	strh	r3, [r7, #4]
	/* Count up */
    TIM_BaseStruct.TIM_CounterMode = TIM_CounterMode_Up;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	80fb      	strh	r3, [r7, #6]
	TIM_Period = 84000000 / 10000 - 1 = 8399

	If you get TIM_Period larger than max timer value (in our case 65535),
	you have to choose larger prescaler and slow down timer tick frequency
*/
    TIM_BaseStruct.TIM_Period = 8399; /* 10kHz PWM */
 8000f9e:	f242 03cf 	movw	r3, #8399	; 0x20cf
 8000fa2:	60bb      	str	r3, [r7, #8]
    TIM_BaseStruct.TIM_ClockDivision = TIM_CKD_DIV1;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	81bb      	strh	r3, [r7, #12]
    TIM_BaseStruct.TIM_RepetitionCounter = 0;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	73bb      	strb	r3, [r7, #14]
	/* Initialize TIM4 */
    TIM_TimeBaseInit(TIM3, &TIM_BaseStruct);
 8000fac:	1d3b      	adds	r3, r7, #4
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4805      	ldr	r0, [pc, #20]	; (8000fc8 <TM_TIMER_Init+0x40>)
 8000fb2:	f7ff fc27 	bl	8000804 <TIM_TimeBaseInit>
	/* Start count on TIM4 */
    TIM_Cmd(TIM3, ENABLE);
 8000fb6:	2101      	movs	r1, #1
 8000fb8:	4803      	ldr	r0, [pc, #12]	; (8000fc8 <TM_TIMER_Init+0x40>)
 8000fba:	f7ff fc8f 	bl	80008dc <TIM_Cmd>
}
 8000fbe:	bf00      	nop
 8000fc0:	3710      	adds	r7, #16
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40000400 	.word	0x40000400

08000fcc <TM_PWM_Init>:

void TM_PWM_Init(void) {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b086      	sub	sp, #24
 8000fd0:	af00      	add	r7, sp, #0

	/* Common settings */

	/* PWM mode 2 = Clear on compare match */
	/* PWM mode 1 = Set on compare match */
	TIM_OCStruct.TIM_OCMode = TIM_OCMode_PWM2;
 8000fd2:	2370      	movs	r3, #112	; 0x70
 8000fd4:	80bb      	strh	r3, [r7, #4]
	TIM_OCStruct.TIM_OutputState = TIM_OutputState_Enable;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	80fb      	strh	r3, [r7, #6]
	TIM_OCStruct.TIM_OCPolarity = TIM_OCPolarity_Low;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	823b      	strh	r3, [r7, #16]
	75% duty cycle: 	pulse_length = ((8399 + 1) * 75) / 100 - 1 = 6299
	100% duty cycle:	pulse_length = ((8399 + 1) * 100) / 100 - 1 = 8399

	Remember: if pulse_length is larger than TIM_Period, you will have output HIGH all the time
*/
	TIM_OCStruct.TIM_Pulse = 2099; /* 25% duty cycle */
 8000fde:	f640 0333 	movw	r3, #2099	; 0x833
 8000fe2:	60fb      	str	r3, [r7, #12]
	TIM_OC1Init(TIM3, &TIM_OCStruct);
 8000fe4:	1d3b      	adds	r3, r7, #4
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4817      	ldr	r0, [pc, #92]	; (8001048 <TM_PWM_Init+0x7c>)
 8000fea:	f7ff fc97 	bl	800091c <TIM_OC1Init>
	TIM_OC1PreloadConfig(TIM3, TIM_OCPreload_Enable);
 8000fee:	2108      	movs	r1, #8
 8000ff0:	4815      	ldr	r0, [pc, #84]	; (8001048 <TM_PWM_Init+0x7c>)
 8000ff2:	f7ff fe83 	bl	8000cfc <TIM_OC1PreloadConfig>

	TIM_OCStruct.TIM_Pulse = 4199; /* 50% duty cycle */
 8000ff6:	f241 0367 	movw	r3, #4199	; 0x1067
 8000ffa:	60fb      	str	r3, [r7, #12]
	TIM_OC2Init(TIM3, &TIM_OCStruct);
 8000ffc:	1d3b      	adds	r3, r7, #4
 8000ffe:	4619      	mov	r1, r3
 8001000:	4811      	ldr	r0, [pc, #68]	; (8001048 <TM_PWM_Init+0x7c>)
 8001002:	f7ff fd05 	bl	8000a10 <TIM_OC2Init>
	TIM_OC2PreloadConfig(TIM3, TIM_OCPreload_Enable);
 8001006:	2108      	movs	r1, #8
 8001008:	480f      	ldr	r0, [pc, #60]	; (8001048 <TM_PWM_Init+0x7c>)
 800100a:	f7ff fe93 	bl	8000d34 <TIM_OC2PreloadConfig>

	TIM_OCStruct.TIM_Pulse = 6299; /* 75% duty cycle */
 800100e:	f641 039b 	movw	r3, #6299	; 0x189b
 8001012:	60fb      	str	r3, [r7, #12]
	TIM_OC3Init(TIM3, &TIM_OCStruct);
 8001014:	1d3b      	adds	r3, r7, #4
 8001016:	4619      	mov	r1, r3
 8001018:	480b      	ldr	r0, [pc, #44]	; (8001048 <TM_PWM_Init+0x7c>)
 800101a:	f7ff fd81 	bl	8000b20 <TIM_OC3Init>
	TIM_OC3PreloadConfig(TIM3, TIM_OCPreload_Enable);
 800101e:	2108      	movs	r1, #8
 8001020:	4809      	ldr	r0, [pc, #36]	; (8001048 <TM_PWM_Init+0x7c>)
 8001022:	f7ff fea5 	bl	8000d70 <TIM_OC3PreloadConfig>

	TIM_OCStruct.TIM_Pulse = 4199; /* 100% duty cycle */
 8001026:	f241 0367 	movw	r3, #4199	; 0x1067
 800102a:	60fb      	str	r3, [r7, #12]
	TIM_OC4Init(TIM3, &TIM_OCStruct);
 800102c:	1d3b      	adds	r3, r7, #4
 800102e:	4619      	mov	r1, r3
 8001030:	4805      	ldr	r0, [pc, #20]	; (8001048 <TM_PWM_Init+0x7c>)
 8001032:	f7ff fdfb 	bl	8000c2c <TIM_OC4Init>
	TIM_OC4PreloadConfig(TIM3, TIM_OCPreload_Enable);
 8001036:	2108      	movs	r1, #8
 8001038:	4803      	ldr	r0, [pc, #12]	; (8001048 <TM_PWM_Init+0x7c>)
 800103a:	f7ff feb5 	bl	8000da8 <TIM_OC4PreloadConfig>
}
 800103e:	bf00      	nop
 8001040:	3718      	adds	r7, #24
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	40000400 	.word	0x40000400

0800104c <ADC_Read>:
    ADC_RegularChannelConfig(ADC1, ADC_Channel_13, 1,
        ADC_SampleTime_84Cycles);
}

uint16_t ADC_Read(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
    // Start ADC conversion
    ADC_SoftwareStartConv(ADC1);
 8001050:	4808      	ldr	r0, [pc, #32]	; (8001074 <ADC_Read+0x28>)
 8001052:	f7ff f8b9 	bl	80001c8 <ADC_SoftwareStartConv>
    // Wait until conversion is finish
    while (!ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC));
 8001056:	bf00      	nop
 8001058:	2102      	movs	r1, #2
 800105a:	4806      	ldr	r0, [pc, #24]	; (8001074 <ADC_Read+0x28>)
 800105c:	f7ff f8d1 	bl	8000202 <ADC_GetFlagStatus>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d0f8      	beq.n	8001058 <ADC_Read+0xc>

    return ADC_GetConversionValue(ADC1);
 8001066:	4803      	ldr	r0, [pc, #12]	; (8001074 <ADC_Read+0x28>)
 8001068:	f7ff f8be 	bl	80001e8 <ADC_GetConversionValue>
 800106c:	4603      	mov	r3, r0
}
 800106e:	4618      	mov	r0, r3
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40012000 	.word	0x40012000

08001078 <WaitMeasurementDataReady>:

	// enable I2C1
	I2C_Cmd(I2C1, ENABLE);
}

VL53L0X_Error WaitMeasurementDataReady(VL53L0X_DEV Dev) {
 8001078:	b580      	push	{r7, lr}
 800107a:	b086      	sub	sp, #24
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001080:	2300      	movs	r3, #0
 8001082:	75fb      	strb	r3, [r7, #23]
    uint8_t NewDatReady=0;
 8001084:	2300      	movs	r3, #0
 8001086:	73fb      	strb	r3, [r7, #15]
    uint32_t LoopNb;

    // Wait until it finished
    // use timeout to avoid deadlock
    if (Status == VL53L0X_ERROR_NONE) {
 8001088:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d120      	bne.n	80010d2 <WaitMeasurementDataReady+0x5a>
        LoopNb = 0;
 8001090:	2300      	movs	r3, #0
 8001092:	613b      	str	r3, [r7, #16]
        do {
            Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDatReady);
 8001094:	f107 030f 	add.w	r3, r7, #15
 8001098:	4619      	mov	r1, r3
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	f001 ffb5 	bl	800300a <VL53L0X_GetMeasurementDataReady>
 80010a0:	4603      	mov	r3, r0
 80010a2:	75fb      	strb	r3, [r7, #23]
            if ((NewDatReady == 0x01) || Status != VL53L0X_ERROR_NONE) {
 80010a4:	7bfb      	ldrb	r3, [r7, #15]
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d00d      	beq.n	80010c6 <WaitMeasurementDataReady+0x4e>
 80010aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d109      	bne.n	80010c6 <WaitMeasurementDataReady+0x4e>
                break;
            }
            LoopNb = LoopNb + 1;
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	3301      	adds	r3, #1
 80010b6:	613b      	str	r3, [r7, #16]
            VL53L0X_PollingDelay(Dev);
 80010b8:	6878      	ldr	r0, [r7, #4]
 80010ba:	f005 fc46 	bl	800694a <VL53L0X_PollingDelay>
        } while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80010c4:	d3e6      	bcc.n	8001094 <WaitMeasurementDataReady+0x1c>

        if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80010cc:	d301      	bcc.n	80010d2 <WaitMeasurementDataReady+0x5a>
            Status = VL53L0X_ERROR_TIME_OUT;
 80010ce:	23f9      	movs	r3, #249	; 0xf9
 80010d0:	75fb      	strb	r3, [r7, #23]
        }
    }

    return Status;
 80010d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3718      	adds	r7, #24
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <WaitStopCompleted>:

VL53L0X_Error WaitStopCompleted(VL53L0X_DEV Dev) {
 80010de:	b580      	push	{r7, lr}
 80010e0:	b086      	sub	sp, #24
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80010e6:	2300      	movs	r3, #0
 80010e8:	75fb      	strb	r3, [r7, #23]
    uint32_t StopCompleted=0;
 80010ea:	2300      	movs	r3, #0
 80010ec:	60fb      	str	r3, [r7, #12]
    uint32_t LoopNb;

    // Wait until it finished
    // use timeout to avoid deadlock
    if (Status == VL53L0X_ERROR_NONE) {
 80010ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d120      	bne.n	8001138 <WaitStopCompleted+0x5a>
        LoopNb = 0;
 80010f6:	2300      	movs	r3, #0
 80010f8:	613b      	str	r3, [r7, #16]
        do {
            Status = VL53L0X_GetStopCompletedStatus(Dev, &StopCompleted);
 80010fa:	f107 030c 	add.w	r3, r7, #12
 80010fe:	4619      	mov	r1, r3
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	f002 fa71 	bl	80035e8 <VL53L0X_GetStopCompletedStatus>
 8001106:	4603      	mov	r3, r0
 8001108:	75fb      	strb	r3, [r7, #23]
            if ((StopCompleted == 0x00) || Status != VL53L0X_ERROR_NONE) {
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d00d      	beq.n	800112c <WaitStopCompleted+0x4e>
 8001110:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d109      	bne.n	800112c <WaitStopCompleted+0x4e>
                break;
            }
            LoopNb = LoopNb + 1;
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	3301      	adds	r3, #1
 800111c:	613b      	str	r3, [r7, #16]
            VL53L0X_PollingDelay(Dev);
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f005 fc13 	bl	800694a <VL53L0X_PollingDelay>
        } while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800112a:	d3e6      	bcc.n	80010fa <WaitStopCompleted+0x1c>

        if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001132:	d301      	bcc.n	8001138 <WaitStopCompleted+0x5a>
            Status = VL53L0X_ERROR_TIME_OUT;
 8001134:	23f9      	movs	r3, #249	; 0xf9
 8001136:	75fb      	strb	r3, [r7, #23]
        }

    }

    return Status;
 8001138:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800113c:	4618      	mov	r0, r3
 800113e:	3718      	adds	r7, #24
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}

08001144 <rangeInit>:


VL53L0X_Error rangeInit(VL53L0X_Dev_t *pMyDevice)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b08e      	sub	sp, #56	; 0x38
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
    VL53L0X_RangingMeasurementData_t    RangingMeasurementData;
    VL53L0X_RangingMeasurementData_t   *pRangingMeasurementData    = &RangingMeasurementData;
 800114c:	f107 0314 	add.w	r3, r7, #20
 8001150:	633b      	str	r3, [r7, #48]	; 0x30
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001152:	2300      	movs	r3, #0
 8001154:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    uint32_t refSpadCount;
    uint8_t isApertureSpads;
    uint8_t VhvSettings;
    uint8_t PhaseCal;

    if(Status == VL53L0X_ERROR_NONE)
 8001158:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800115c:	2b00      	cmp	r3, #0
 800115e:	d105      	bne.n	800116c <rangeInit+0x28>
    {
        Status = VL53L0X_StaticInit(pMyDevice); // Device Initialization
 8001160:	6878      	ldr	r0, [r7, #4]
 8001162:	f001 f827 	bl	80021b4 <VL53L0X_StaticInit>
 8001166:	4603      	mov	r3, r0
 8001168:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        // StaticInit will set interrupt by default
    }

    if(Status == VL53L0X_ERROR_NONE)
 800116c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001170:	2b00      	cmp	r3, #0
 8001172:	d10a      	bne.n	800118a <rangeInit+0x46>
    {
        Status = VL53L0X_PerformRefCalibration(pMyDevice,
 8001174:	f107 020d 	add.w	r2, r7, #13
 8001178:	f107 030e 	add.w	r3, r7, #14
 800117c:	4619      	mov	r1, r3
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f001 fdc0 	bl	8002d04 <VL53L0X_PerformRefCalibration>
 8001184:	4603      	mov	r3, r0
 8001186:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        		&VhvSettings, &PhaseCal); // Device Initialization
    }

    if(Status == VL53L0X_ERROR_NONE)
 800118a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800118e:	2b00      	cmp	r3, #0
 8001190:	d10a      	bne.n	80011a8 <rangeInit+0x64>
    {
        Status = VL53L0X_PerformRefSpadManagement(pMyDevice,
 8001192:	f107 020f 	add.w	r2, r7, #15
 8001196:	f107 0310 	add.w	r3, r7, #16
 800119a:	4619      	mov	r1, r3
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	f002 faee 	bl	800377e <VL53L0X_PerformRefSpadManagement>
 80011a2:	4603      	mov	r3, r0
 80011a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        		&refSpadCount, &isApertureSpads); // Device Initialization
    }

    if(Status == VL53L0X_ERROR_NONE)
 80011a8:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d106      	bne.n	80011be <rangeInit+0x7a>
    {

        Status = VL53L0X_SetDeviceMode(pMyDevice, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING); // Setup in single ranging mode
 80011b0:	2101      	movs	r1, #1
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f001 fa10 	bl	80025d8 <VL53L0X_SetDeviceMode>
 80011b8:	4603      	mov	r3, r0
 80011ba:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    }


    return Status;
 80011be:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3738      	adds	r7, #56	; 0x38
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}

080011ca <range>:

VL53L0X_Error range(VL53L0X_Dev_t *pMyDevice)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b08e      	sub	sp, #56	; 0x38
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	6078      	str	r0, [r7, #4]
    VL53L0X_RangingMeasurementData_t    RangingMeasurementData;
    VL53L0X_RangingMeasurementData_t   *pRangingMeasurementData    = &RangingMeasurementData;
 80011d2:	f107 0308 	add.w	r3, r7, #8
 80011d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80011d8:	2300      	movs	r3, #0
 80011da:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if(Status == VL53L0X_ERROR_NONE)
 80011de:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d105      	bne.n	80011f2 <range+0x28>
    {
		Status = VL53L0X_StartMeasurement(pMyDevice);
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f001 fe08 	bl	8002dfc <VL53L0X_StartMeasurement>
 80011ec:	4603      	mov	r3, r0
 80011ee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    }

    if(Status == VL53L0X_ERROR_NONE)
 80011f2:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d144      	bne.n	8001284 <range+0xba>
    {
        uint32_t measurement;
        uint32_t no_of_measurements = 32;
 80011fa:	2320      	movs	r3, #32
 80011fc:	62bb      	str	r3, [r7, #40]	; 0x28

        uint16_t* pResults = (uint16_t*)malloc(sizeof(uint16_t) * no_of_measurements);
 80011fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	4618      	mov	r0, r3
 8001204:	f005 fbde 	bl	80069c4 <malloc>
 8001208:	4603      	mov	r3, r0
 800120a:	627b      	str	r3, [r7, #36]	; 0x24

        for(measurement=0; measurement<no_of_measurements; measurement++)
 800120c:	2300      	movs	r3, #0
 800120e:	633b      	str	r3, [r7, #48]	; 0x30
 8001210:	e021      	b.n	8001256 <range+0x8c>
        {

            Status = WaitMeasurementDataReady(pMyDevice);
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f7ff ff30 	bl	8001078 <WaitMeasurementDataReady>
 8001218:	4603      	mov	r3, r0
 800121a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

            if(Status == VL53L0X_ERROR_NONE)
 800121e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001222:	2b00      	cmp	r3, #0
 8001224:	d11c      	bne.n	8001260 <range+0x96>
            {
                Status = VL53L0X_GetRangingMeasurementData(pMyDevice, pRangingMeasurementData);
 8001226:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f001 ff2f 	bl	800308c <VL53L0X_GetRangingMeasurementData>
 800122e:	4603      	mov	r3, r0
 8001230:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

                *(pResults + measurement) = pRangingMeasurementData->RangeMilliMeter;
 8001234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800123a:	4413      	add	r3, r2
 800123c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800123e:	8912      	ldrh	r2, [r2, #8]
 8001240:	801a      	strh	r2, [r3, #0]

                // Clear the interrupt
                VL53L0X_ClearInterruptMask(pMyDevice, VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY);
 8001242:	2104      	movs	r1, #4
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f002 fa38 	bl	80036ba <VL53L0X_ClearInterruptMask>
                VL53L0X_PollingDelay(pMyDevice);
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f005 fb7d 	bl	800694a <VL53L0X_PollingDelay>
        for(measurement=0; measurement<no_of_measurements; measurement++)
 8001250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001252:	3301      	adds	r3, #1
 8001254:	633b      	str	r3, [r7, #48]	; 0x30
 8001256:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800125a:	429a      	cmp	r2, r3
 800125c:	d3d9      	bcc.n	8001212 <range+0x48>
 800125e:	e000      	b.n	8001262 <range+0x98>
            } else {
                break;
 8001260:	bf00      	nop
            }
        }

        if(Status == VL53L0X_ERROR_NONE)
 8001262:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001266:	2b00      	cmp	r3, #0
 8001268:	d109      	bne.n	800127e <range+0xb4>
        {
            for(measurement=0; measurement<no_of_measurements; measurement++)
 800126a:	2300      	movs	r3, #0
 800126c:	633b      	str	r3, [r7, #48]	; 0x30
 800126e:	e002      	b.n	8001276 <range+0xac>
 8001270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001272:	3301      	adds	r3, #1
 8001274:	633b      	str	r3, [r7, #48]	; 0x30
 8001276:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800127a:	429a      	cmp	r2, r3
 800127c:	d3f8      	bcc.n	8001270 <range+0xa6>
            {

            }
        }

        free(pResults);
 800127e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001280:	f005 fba8 	bl	80069d4 <free>
    }


    if(Status == VL53L0X_ERROR_NONE)
 8001284:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001288:	2b00      	cmp	r3, #0
 800128a:	d105      	bne.n	8001298 <range+0xce>
    {
        Status = VL53L0X_StopMeasurement(pMyDevice);
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f001 fe74 	bl	8002f7a <VL53L0X_StopMeasurement>
 8001292:	4603      	mov	r3, r0
 8001294:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    }

    if(Status == VL53L0X_ERROR_NONE)
 8001298:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800129c:	2b00      	cmp	r3, #0
 800129e:	d105      	bne.n	80012ac <range+0xe2>
    {
        Status = WaitStopCompleted(pMyDevice);
 80012a0:	6878      	ldr	r0, [r7, #4]
 80012a2:	f7ff ff1c 	bl	80010de <WaitStopCompleted>
 80012a6:	4603      	mov	r3, r0
 80012a8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    }

    if(Status == VL53L0X_ERROR_NONE)
 80012ac:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d106      	bne.n	80012c2 <range+0xf8>
	Status = VL53L0X_ClearInterruptMask(pMyDevice,
 80012b4:	2104      	movs	r1, #4
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f002 f9ff 	bl	80036ba <VL53L0X_ClearInterruptMask>
 80012bc:	4603      	mov	r3, r0
 80012be:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY);

    return Status;
 80012c2:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3738      	adds	r7, #56	; 0x38
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
	...

080012d0 <Init_Rangefinders>:

void Init_Rangefinders()
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b0fa      	sub	sp, #488	; 0x1e8
 80012d4:	af02      	add	r7, sp, #8
	TM_GPIO_Init(GPIOA, (GPIO_PIN_12 | GPIO_PIN_11), TM_GPIO_Mode_OUT, TM_GPIO_OType_PP, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium);
 80012d6:	2301      	movs	r3, #1
 80012d8:	9301      	str	r3, [sp, #4]
 80012da:	2301      	movs	r3, #1
 80012dc:	9300      	str	r3, [sp, #0]
 80012de:	2300      	movs	r3, #0
 80012e0:	2201      	movs	r2, #1
 80012e2:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80012e6:	4827      	ldr	r0, [pc, #156]	; (8001384 <Init_Rangefinders+0xb4>)
 80012e8:	f000 fad0 	bl	800188c <TM_GPIO_Init>
	TM_GPIO_SetPinLow(GPIOA, (GPIO_PIN_12 | GPIO_PIN_11));
 80012ec:	4b25      	ldr	r3, [pc, #148]	; (8001384 <Init_Rangefinders+0xb4>)
 80012ee:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 80012f2:	835a      	strh	r2, [r3, #26]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80012f4:	2300      	movs	r3, #0
 80012f6:	f887 31df 	strb.w	r3, [r7, #479]	; 0x1df
	VL53L0X_Dev_t MyDevice1;
	VL53L0X_Dev_t *pMyDevice1 = &MyDevice1;
 80012fa:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80012fe:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
	VL53L0X_Version_t                   Version;
	VL53L0X_Version_t                  *pVersion   = &Version;
 8001302:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001306:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
	VL53L0X_DeviceInfo_t                DeviceInfo;

	uint8_t data;

	pMyDevice1->I2cDevAddr      = 0x29;
 800130a:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 800130e:	2229      	movs	r2, #41	; 0x29
 8001310:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
	pMyDevice1->comms_type      =  1;
 8001314:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8001318:	2201      	movs	r2, #1
 800131a:	f883 215d 	strb.w	r2, [r3, #349]	; 0x15d
	pMyDevice1->comms_speed_khz =  100;
 800131e:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8001322:	2264      	movs	r2, #100	; 0x64
 8001324:	f8a3 215e 	strh.w	r2, [r3, #350]	; 0x15e
	TM_GPIO_SetPinHigh(GPIOA, GPIO_PIN_12);
 8001328:	4b16      	ldr	r3, [pc, #88]	; (8001384 <Init_Rangefinders+0xb4>)
 800132a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800132e:	831a      	strh	r2, [r3, #24]
	Status = rangeInit(pMyDevice1);
 8001330:	f8d7 01d8 	ldr.w	r0, [r7, #472]	; 0x1d8
 8001334:	f7ff ff06 	bl	8001144 <rangeInit>
 8001338:	4603      	mov	r3, r0
 800133a:	f887 31df 	strb.w	r3, [r7, #479]	; 0x1df
	TM_I2C_ReadMulti(I2C1, 0x29, VL53L0X_REG_I2C_SLAVE_DEVICE_ADDRESS, &data, 1);
 800133e:	1dfa      	adds	r2, r7, #7
 8001340:	2301      	movs	r3, #1
 8001342:	9300      	str	r3, [sp, #0]
 8001344:	4613      	mov	r3, r2
 8001346:	228a      	movs	r2, #138	; 0x8a
 8001348:	2129      	movs	r1, #41	; 0x29
 800134a:	480f      	ldr	r0, [pc, #60]	; (8001388 <Init_Rangefinders+0xb8>)
 800134c:	f000 fc60 	bl	8001c10 <TM_I2C_ReadMulti>
	Status = VL53L0X_SetDeviceAddress(pMyDevice1, 0x30);
 8001350:	2130      	movs	r1, #48	; 0x30
 8001352:	f8d7 01d8 	ldr.w	r0, [r7, #472]	; 0x1d8
 8001356:	f000 ff14 	bl	8002182 <VL53L0X_SetDeviceAddress>
 800135a:	4603      	mov	r3, r0
 800135c:	f887 31df 	strb.w	r3, [r7, #479]	; 0x1df
	TM_I2C_ReadMulti(I2C1, 0x30, VL53L0X_REG_I2C_SLAVE_DEVICE_ADDRESS, &data, 1);
 8001360:	1dfa      	adds	r2, r7, #7
 8001362:	2301      	movs	r3, #1
 8001364:	9300      	str	r3, [sp, #0]
 8001366:	4613      	mov	r3, r2
 8001368:	228a      	movs	r2, #138	; 0x8a
 800136a:	2130      	movs	r1, #48	; 0x30
 800136c:	4806      	ldr	r0, [pc, #24]	; (8001388 <Init_Rangefinders+0xb8>)
 800136e:	f000 fc4f 	bl	8001c10 <TM_I2C_ReadMulti>
	TM_GPIO_SetPinHigh(GPIOA, GPIO_PIN_11);
	Status = rangeInit(pMyDevice2);
	Status = VL53L0X_SetDeviceAddress(pMyDevice2, 0x31);
	pMyDevice2->I2cDevAddr      = 0x31;
	*/
	range(pMyDevice1);
 8001372:	f8d7 01d8 	ldr.w	r0, [r7, #472]	; 0x1d8
 8001376:	f7ff ff28 	bl	80011ca <range>
	//range(pMyDevice2);


}
 800137a:	bf00      	nop
 800137c:	f507 77f0 	add.w	r7, r7, #480	; 0x1e0
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	40020000 	.word	0x40020000
 8001388:	40005400 	.word	0x40005400

0800138c <buzz>:


void buzz(int time)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
	TM_LEDS_Init();
 8001394:	f7ff fdc6 	bl	8000f24 <TM_LEDS_Init>
	TM_TIMER_Init();
 8001398:	f7ff fdf6 	bl	8000f88 <TM_TIMER_Init>
	TM_PWM_Init();
 800139c:	f7ff fe16 	bl	8000fcc <TM_PWM_Init>
	Delay(time);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7ff fd8b 	bl	8000ebe <Delay>
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, DISABLE);
 80013a8:	2100      	movs	r1, #0
 80013aa:	2002      	movs	r0, #2
 80013ac:	f7ff fa0a 	bl	80007c4 <RCC_APB1PeriphClockCmd>
}
 80013b0:	bf00      	nop
 80013b2:	3708      	adds	r7, #8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <flagReset>:

void flagReset()
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
	below_10 = 0;
 80013bc:	4b06      	ldr	r3, [pc, #24]	; (80013d8 <flagReset+0x20>)
 80013be:	2200      	movs	r2, #0
 80013c0:	701a      	strb	r2, [r3, #0]
	below_5 = 0;
 80013c2:	4b06      	ldr	r3, [pc, #24]	; (80013dc <flagReset+0x24>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	701a      	strb	r2, [r3, #0]
	reset = 0;
 80013c8:	4b05      	ldr	r3, [pc, #20]	; (80013e0 <flagReset+0x28>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	701a      	strb	r2, [r3, #0]
}
 80013ce:	bf00      	nop
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr
 80013d8:	2000035c 	.word	0x2000035c
 80013dc:	2000035d 	.word	0x2000035d
 80013e0:	2000035e 	.word	0x2000035e

080013e4 <main>:


int main(void) {
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b0fc      	sub	sp, #496	; 0x1f0
 80013e8:	af02      	add	r7, sp, #8

   SystemInit();
 80013ea:	f000 f99d 	bl	8001728 <SystemInit>

   VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80013ee:	2300      	movs	r3, #0
 80013f0:	f887 31e7 	strb.w	r3, [r7, #487]	; 0x1e7
   VL53L0X_Dev_t MyDevice;
   VL53L0X_Dev_t *pMyDevice = &MyDevice;
 80013f4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80013f8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
   VL53L0X_Version_t                   Version;
   VL53L0X_Version_t                  *pVersion   = &Version;
 80013fc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001400:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
   VL53L0X_DeviceInfo_t                DeviceInfo;

   int32_t status_int;
   int32_t init_done = 0;
 8001404:	2300      	movs	r3, #0
 8001406:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8

   uint8_t data = 0;
 800140a:	1dfb      	adds	r3, r7, #7
 800140c:	2200      	movs	r2, #0
 800140e:	701a      	strb	r2, [r3, #0]

   // Initialize Comms
   pMyDevice->I2cDevAddr      = 0x29;
 8001410:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001414:	2229      	movs	r2, #41	; 0x29
 8001416:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
   pMyDevice->comms_type      =  1;
 800141a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800141e:	2201      	movs	r2, #1
 8001420:	f883 215d 	strb.w	r2, [r3, #349]	; 0x15d
   pMyDevice->comms_speed_khz =  100;
 8001424:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001428:	2264      	movs	r2, #100	; 0x64
 800142a:	f8a3 215e 	strh.w	r2, [r3, #350]	; 0x15e

   TM_I2C_Init(I2C1, TM_I2C_PinsPack_1, TM_I2C_CLOCK_STANDARD);
 800142e:	4a2e      	ldr	r2, [pc, #184]	; (80014e8 <main+0x104>)
 8001430:	2100      	movs	r1, #0
 8001432:	482e      	ldr	r0, [pc, #184]	; (80014ec <main+0x108>)
 8001434:	f000 fb50 	bl	8001ad8 <TM_I2C_Init>

   Init_Rangefinders();
 8001438:	f7ff ff4a 	bl	80012d0 <Init_Rangefinders>

  //ADC_Config();
  //Configure_PC4();


  uint16_t adc_val = 0;
 800143c:	2300      	movs	r3, #0
 800143e:	f8a7 31d6 	strh.w	r3, [r7, #470]	; 0x1d6
  while (1){
    /*
     * You can do whatever you want in here
     */
	  //__WFI();
	  VL53L0X_SetLinearityCorrectiveGain(pMyDevice, 1000);
 8001442:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001446:	f8d7 01e0 	ldr.w	r0, [r7, #480]	; 0x1e0
 800144a:	f000 fe70 	bl	800212e <VL53L0X_SetLinearityCorrectiveGain>
	  TM_I2C_ReadMulti(I2C1, 0x29, 0xC0, &data, 1);
 800144e:	1dfa      	adds	r2, r7, #7
 8001450:	2301      	movs	r3, #1
 8001452:	9300      	str	r3, [sp, #0]
 8001454:	4613      	mov	r3, r2
 8001456:	22c0      	movs	r2, #192	; 0xc0
 8001458:	2129      	movs	r1, #41	; 0x29
 800145a:	4824      	ldr	r0, [pc, #144]	; (80014ec <main+0x108>)
 800145c:	f000 fbd8 	bl	8001c10 <TM_I2C_ReadMulti>
	  //Status = rangingTest(pMyDevice);

	  adc_val = ADC_Read();
 8001460:	f7ff fdf4 	bl	800104c <ADC_Read>
 8001464:	4603      	mov	r3, r0
 8001466:	f8a7 31d6 	strh.w	r3, [r7, #470]	; 0x1d6


	  if((adc_val < PERC_10) && (adc_val > PERC_5) && !(below_10)){
 800146a:	f8b7 31d6 	ldrh.w	r3, [r7, #470]	; 0x1d6
 800146e:	f640 22b1 	movw	r2, #2737	; 0xab1
 8001472:	4293      	cmp	r3, r2
 8001474:	d813      	bhi.n	800149e <main+0xba>
 8001476:	f8b7 31d6 	ldrh.w	r3, [r7, #470]	; 0x1d6
 800147a:	f640 2237 	movw	r2, #2615	; 0xa37
 800147e:	4293      	cmp	r3, r2
 8001480:	d90d      	bls.n	800149e <main+0xba>
 8001482:	4b1b      	ldr	r3, [pc, #108]	; (80014f0 <main+0x10c>)
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d109      	bne.n	800149e <main+0xba>
		  buzz(500000);
 800148a:	481a      	ldr	r0, [pc, #104]	; (80014f4 <main+0x110>)
 800148c:	f7ff ff7e 	bl	800138c <buzz>
		  below_10 = 1;
 8001490:	4b17      	ldr	r3, [pc, #92]	; (80014f0 <main+0x10c>)
 8001492:	2201      	movs	r2, #1
 8001494:	701a      	strb	r2, [r3, #0]
		  reset = 1;
 8001496:	4b18      	ldr	r3, [pc, #96]	; (80014f8 <main+0x114>)
 8001498:	2201      	movs	r2, #1
 800149a:	701a      	strb	r2, [r3, #0]
 800149c:	e022      	b.n	80014e4 <main+0x100>
	  }
	  else if ((adc_val < PERC_5) && !(below_5)){
 800149e:	f8b7 31d6 	ldrh.w	r3, [r7, #470]	; 0x1d6
 80014a2:	f640 2236 	movw	r2, #2614	; 0xa36
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d80d      	bhi.n	80014c6 <main+0xe2>
 80014aa:	4b14      	ldr	r3, [pc, #80]	; (80014fc <main+0x118>)
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d109      	bne.n	80014c6 <main+0xe2>
		  buzz(500000);
 80014b2:	4810      	ldr	r0, [pc, #64]	; (80014f4 <main+0x110>)
 80014b4:	f7ff ff6a 	bl	800138c <buzz>
		  below_5 = 1;
 80014b8:	4b10      	ldr	r3, [pc, #64]	; (80014fc <main+0x118>)
 80014ba:	2201      	movs	r2, #1
 80014bc:	701a      	strb	r2, [r3, #0]
		  reset = 1;
 80014be:	4b0e      	ldr	r3, [pc, #56]	; (80014f8 <main+0x114>)
 80014c0:	2201      	movs	r2, #1
 80014c2:	701a      	strb	r2, [r3, #0]
 80014c4:	e00e      	b.n	80014e4 <main+0x100>
	  }
	  else if ((adc_val > 3654) && reset){
 80014c6:	f8b7 31d6 	ldrh.w	r3, [r7, #470]	; 0x1d6
 80014ca:	f640 6246 	movw	r2, #3654	; 0xe46
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d9b7      	bls.n	8001442 <main+0x5e>
 80014d2:	4b09      	ldr	r3, [pc, #36]	; (80014f8 <main+0x114>)
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d0b3      	beq.n	8001442 <main+0x5e>
		  flagReset();
 80014da:	f7ff ff6d 	bl	80013b8 <flagReset>
		  buzz(500000);
 80014de:	4805      	ldr	r0, [pc, #20]	; (80014f4 <main+0x110>)
 80014e0:	f7ff ff54 	bl	800138c <buzz>
	  VL53L0X_SetLinearityCorrectiveGain(pMyDevice, 1000);
 80014e4:	e7ad      	b.n	8001442 <main+0x5e>
 80014e6:	bf00      	nop
 80014e8:	000186a0 	.word	0x000186a0
 80014ec:	40005400 	.word	0x40005400
 80014f0:	2000035c 	.word	0x2000035c
 80014f4:	0007a120 	.word	0x0007a120
 80014f8:	2000035e 	.word	0x2000035e
 80014fc:	2000035d 	.word	0x2000035d

08001500 <USART1_IRQHandler>:

  }
}

// this is the interrupt request handler (IRQ) for ALL USART1 interrupts
void USART1_IRQHandler(void){
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0

	// check if the USART1 receive interrupt flag was set
	if( USART_GetITStatus(USART1, USART_IT_RXNE) ){
 8001506:	f240 5125 	movw	r1, #1317	; 0x525
 800150a:	4812      	ldr	r0, [pc, #72]	; (8001554 <USART1_IRQHandler+0x54>)
 800150c:	f7ff fc7c 	bl	8000e08 <USART_GetITStatus>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d01a      	beq.n	800154c <USART1_IRQHandler+0x4c>

		static uint8_t cnt = 0; // this counter is used to determine the string length
		char t = USART1->DR; // the character from the USART1 data register is saved in t
 8001516:	4b0f      	ldr	r3, [pc, #60]	; (8001554 <USART1_IRQHandler+0x54>)
 8001518:	889b      	ldrh	r3, [r3, #4]
 800151a:	b29b      	uxth	r3, r3
 800151c:	71fb      	strb	r3, [r7, #7]

		/* check if the received character is not the LF character (used to determine end of string)
		 * or the if the maximum string length has been been reached
		 */
		if( (t != '\n') && (cnt < MAX_STRLEN) ){
 800151e:	79fb      	ldrb	r3, [r7, #7]
 8001520:	2b0a      	cmp	r3, #10
 8001522:	d010      	beq.n	8001546 <USART1_IRQHandler+0x46>
 8001524:	4b0c      	ldr	r3, [pc, #48]	; (8001558 <USART1_IRQHandler+0x58>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	2b1f      	cmp	r3, #31
 800152a:	d80c      	bhi.n	8001546 <USART1_IRQHandler+0x46>
			received_string[cnt] = t;
 800152c:	4b0a      	ldr	r3, [pc, #40]	; (8001558 <USART1_IRQHandler+0x58>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	4619      	mov	r1, r3
 8001532:	4a0a      	ldr	r2, [pc, #40]	; (800155c <USART1_IRQHandler+0x5c>)
 8001534:	79fb      	ldrb	r3, [r7, #7]
 8001536:	5453      	strb	r3, [r2, r1]
			cnt++;
 8001538:	4b07      	ldr	r3, [pc, #28]	; (8001558 <USART1_IRQHandler+0x58>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	3301      	adds	r3, #1
 800153e:	b2da      	uxtb	r2, r3
 8001540:	4b05      	ldr	r3, [pc, #20]	; (8001558 <USART1_IRQHandler+0x58>)
 8001542:	701a      	strb	r2, [r3, #0]
		}
		else{ // otherwise reset the character counter and print the received string
			cnt = 0;
		}
	}
}
 8001544:	e002      	b.n	800154c <USART1_IRQHandler+0x4c>
			cnt = 0;
 8001546:	4b04      	ldr	r3, [pc, #16]	; (8001558 <USART1_IRQHandler+0x58>)
 8001548:	2200      	movs	r2, #0
 800154a:	701a      	strb	r2, [r3, #0]
}
 800154c:	bf00      	nop
 800154e:	3708      	adds	r7, #8
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	40011000 	.word	0x40011000
 8001558:	2000035f 	.word	0x2000035f
 800155c:	2000038c 	.word	0x2000038c

08001560 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void) {
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
    /* Make sure that interrupt flag is set */
    if (EXTI_GetITStatus(EXTI_Line4) != RESET) {
 8001566:	2010      	movs	r0, #16
 8001568:	f7fe fe66 	bl	8000238 <EXTI_GetITStatus>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d06e      	beq.n	8001650 <EXTI4_IRQHandler+0xf0>
        /* Do your stuff when PD0 is changed */
    	uint32_t time = 0;
 8001572:	2300      	movs	r3, #0
 8001574:	607b      	str	r3, [r7, #4]

    	while(!(GPIOC->IDR & GPIO_Pin_4) && (time < BUTTON_LIMIT)){
 8001576:	e002      	b.n	800157e <EXTI4_IRQHandler+0x1e>
    		time = time + 1;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	3301      	adds	r3, #1
 800157c:	607b      	str	r3, [r7, #4]
    	while(!(GPIOC->IDR & GPIO_Pin_4) && (time < BUTTON_LIMIT)){
 800157e:	4b36      	ldr	r3, [pc, #216]	; (8001658 <EXTI4_IRQHandler+0xf8>)
 8001580:	691b      	ldr	r3, [r3, #16]
 8001582:	f003 0310 	and.w	r3, r3, #16
 8001586:	2b00      	cmp	r3, #0
 8001588:	d103      	bne.n	8001592 <EXTI4_IRQHandler+0x32>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4a33      	ldr	r2, [pc, #204]	; (800165c <EXTI4_IRQHandler+0xfc>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d9f2      	bls.n	8001578 <EXTI4_IRQHandler+0x18>
    	}

    	// if state is equal to 1
    	if(state == 1){
 8001592:	4b33      	ldr	r3, [pc, #204]	; (8001660 <EXTI4_IRQHandler+0x100>)
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	2b01      	cmp	r3, #1
 8001598:	d120      	bne.n	80015dc <EXTI4_IRQHandler+0x7c>
    		if(time < BUTTON_LIMIT){
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4a2f      	ldr	r2, [pc, #188]	; (800165c <EXTI4_IRQHandler+0xfc>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d814      	bhi.n	80015cc <EXTI4_IRQHandler+0x6c>
    			USART_puts(USART1, "hello");
 80015a2:	4930      	ldr	r1, [pc, #192]	; (8001664 <EXTI4_IRQHandler+0x104>)
 80015a4:	4830      	ldr	r0, [pc, #192]	; (8001668 <EXTI4_IRQHandler+0x108>)
 80015a6:	f7ff fc9a 	bl	8000ede <USART_puts>
    			state = 2;
 80015aa:	4b2d      	ldr	r3, [pc, #180]	; (8001660 <EXTI4_IRQHandler+0x100>)
 80015ac:	2202      	movs	r2, #2
 80015ae:	701a      	strb	r2, [r3, #0]

    			  /* Init leds */
    			  TM_LEDS_Init();
 80015b0:	f7ff fcb8 	bl	8000f24 <TM_LEDS_Init>
    			  /* Init timer */
    			  TM_TIMER_Init();
 80015b4:	f7ff fce8 	bl	8000f88 <TM_TIMER_Init>
    			  /* Init PWM */
    			  TM_PWM_Init();
 80015b8:	f7ff fd08 	bl	8000fcc <TM_PWM_Init>

    			  // Wait
    			  Delay(500000);
 80015bc:	482b      	ldr	r0, [pc, #172]	; (800166c <EXTI4_IRQHandler+0x10c>)
 80015be:	f7ff fc7e 	bl	8000ebe <Delay>

    			  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, DISABLE);
 80015c2:	2100      	movs	r1, #0
 80015c4:	2002      	movs	r0, #2
 80015c6:	f7ff f8fd 	bl	80007c4 <RCC_APB1PeriphClockCmd>
 80015ca:	e037      	b.n	800163c <EXTI4_IRQHandler+0xdc>


    		}
    		else{
    			USART_puts(USART1, "quit");
 80015cc:	4928      	ldr	r1, [pc, #160]	; (8001670 <EXTI4_IRQHandler+0x110>)
 80015ce:	4826      	ldr	r0, [pc, #152]	; (8001668 <EXTI4_IRQHandler+0x108>)
 80015d0:	f7ff fc85 	bl	8000ede <USART_puts>
    			state = 1;
 80015d4:	4b22      	ldr	r3, [pc, #136]	; (8001660 <EXTI4_IRQHandler+0x100>)
 80015d6:	2201      	movs	r2, #1
 80015d8:	701a      	strb	r2, [r3, #0]
 80015da:	e02f      	b.n	800163c <EXTI4_IRQHandler+0xdc>
    		}
    	}
    	else{
    		if(time < BUTTON_LIMIT){
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	4a1f      	ldr	r2, [pc, #124]	; (800165c <EXTI4_IRQHandler+0xfc>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d807      	bhi.n	80015f4 <EXTI4_IRQHandler+0x94>
    			USART_puts(USART1, "data");
 80015e4:	4923      	ldr	r1, [pc, #140]	; (8001674 <EXTI4_IRQHandler+0x114>)
 80015e6:	4820      	ldr	r0, [pc, #128]	; (8001668 <EXTI4_IRQHandler+0x108>)
 80015e8:	f7ff fc79 	bl	8000ede <USART_puts>
    			state = 2;
 80015ec:	4b1c      	ldr	r3, [pc, #112]	; (8001660 <EXTI4_IRQHandler+0x100>)
 80015ee:	2202      	movs	r2, #2
 80015f0:	701a      	strb	r2, [r3, #0]
 80015f2:	e023      	b.n	800163c <EXTI4_IRQHandler+0xdc>
    		}
    		else{
    			USART_puts(USART1, "quit");
 80015f4:	491e      	ldr	r1, [pc, #120]	; (8001670 <EXTI4_IRQHandler+0x110>)
 80015f6:	481c      	ldr	r0, [pc, #112]	; (8001668 <EXTI4_IRQHandler+0x108>)
 80015f8:	f7ff fc71 	bl	8000ede <USART_puts>
    			state = 1;
 80015fc:	4b18      	ldr	r3, [pc, #96]	; (8001660 <EXTI4_IRQHandler+0x100>)
 80015fe:	2201      	movs	r2, #1
 8001600:	701a      	strb	r2, [r3, #0]

    			TM_LEDS_Init();
 8001602:	f7ff fc8f 	bl	8000f24 <TM_LEDS_Init>
    			TM_TIMER_Init();
 8001606:	f7ff fcbf 	bl	8000f88 <TM_TIMER_Init>
    			TM_PWM_Init();
 800160a:	f7ff fcdf 	bl	8000fcc <TM_PWM_Init>
    			Delay(500000);
 800160e:	4817      	ldr	r0, [pc, #92]	; (800166c <EXTI4_IRQHandler+0x10c>)
 8001610:	f7ff fc55 	bl	8000ebe <Delay>
    			RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, DISABLE);
 8001614:	2100      	movs	r1, #0
 8001616:	2002      	movs	r0, #2
 8001618:	f7ff f8d4 	bl	80007c4 <RCC_APB1PeriphClockCmd>

    			Delay(500000);
 800161c:	4813      	ldr	r0, [pc, #76]	; (800166c <EXTI4_IRQHandler+0x10c>)
 800161e:	f7ff fc4e 	bl	8000ebe <Delay>

    			TM_LEDS_Init();
 8001622:	f7ff fc7f 	bl	8000f24 <TM_LEDS_Init>
    			TM_TIMER_Init();
 8001626:	f7ff fcaf 	bl	8000f88 <TM_TIMER_Init>
    			TM_PWM_Init();
 800162a:	f7ff fccf 	bl	8000fcc <TM_PWM_Init>
    			Delay(500000);
 800162e:	480f      	ldr	r0, [pc, #60]	; (800166c <EXTI4_IRQHandler+0x10c>)
 8001630:	f7ff fc45 	bl	8000ebe <Delay>
    			RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, DISABLE);
 8001634:	2100      	movs	r1, #0
 8001636:	2002      	movs	r0, #2
 8001638:	f7ff f8c4 	bl	80007c4 <RCC_APB1PeriphClockCmd>
    		}
    	}

    	while(!(GPIOC->IDR & GPIO_Pin_4)){}
 800163c:	bf00      	nop
 800163e:	4b06      	ldr	r3, [pc, #24]	; (8001658 <EXTI4_IRQHandler+0xf8>)
 8001640:	691b      	ldr	r3, [r3, #16]
 8001642:	f003 0310 	and.w	r3, r3, #16
 8001646:	2b00      	cmp	r3, #0
 8001648:	d0f9      	beq.n	800163e <EXTI4_IRQHandler+0xde>

        /* Clear interrupt flag */
        EXTI_ClearITPendingBit(EXTI_Line4);
 800164a:	2010      	movs	r0, #16
 800164c:	f7fe fe18 	bl	8000280 <EXTI_ClearITPendingBit>
    }
}
 8001650:	bf00      	nop
 8001652:	3708      	adds	r7, #8
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	40020800 	.word	0x40020800
 800165c:	0026259f 	.word	0x0026259f
 8001660:	20000010 	.word	0x20000010
 8001664:	08006bbc 	.word	0x08006bbc
 8001668:	40011000 	.word	0x40011000
 800166c:	0007a120 	.word	0x0007a120
 8001670:	08006bc4 	.word	0x08006bc4
 8001674:	08006bcc 	.word	0x08006bcc

08001678 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001678:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016b0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800167c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800167e:	e003      	b.n	8001688 <LoopCopyDataInit>

08001680 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001680:	4b0c      	ldr	r3, [pc, #48]	; (80016b4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001682:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001684:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001686:	3104      	adds	r1, #4

08001688 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001688:	480b      	ldr	r0, [pc, #44]	; (80016b8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800168a:	4b0c      	ldr	r3, [pc, #48]	; (80016bc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800168c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800168e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001690:	d3f6      	bcc.n	8001680 <CopyDataInit>
  ldr  r2, =_sbss
 8001692:	4a0b      	ldr	r2, [pc, #44]	; (80016c0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001694:	e002      	b.n	800169c <LoopFillZerobss>

08001696 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001696:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001698:	f842 3b04 	str.w	r3, [r2], #4

0800169c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800169c:	4b09      	ldr	r3, [pc, #36]	; (80016c4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800169e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80016a0:	d3f9      	bcc.n	8001696 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80016a2:	f000 f841 	bl	8001728 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016a6:	f005 f969 	bl	800697c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016aa:	f7ff fe9b 	bl	80013e4 <main>
  bx  lr    
 80016ae:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80016b0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80016b4:	08006bdc 	.word	0x08006bdc
  ldr  r0, =_sdata
 80016b8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80016bc:	20000340 	.word	0x20000340
  ldr  r2, =_sbss
 80016c0:	20000340 	.word	0x20000340
  ldr  r3, = _ebss
 80016c4:	200003b4 	.word	0x200003b4

080016c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016c8:	e7fe      	b.n	80016c8 <ADC_IRQHandler>

080016ca <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80016ca:	b480      	push	{r7}
 80016cc:	af00      	add	r7, sp, #0
}
 80016ce:	bf00      	nop
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr

080016d8 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80016dc:	e7fe      	b.n	80016dc <HardFault_Handler+0x4>

080016de <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80016de:	b480      	push	{r7}
 80016e0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80016e2:	e7fe      	b.n	80016e2 <MemManage_Handler+0x4>

080016e4 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80016e8:	e7fe      	b.n	80016e8 <BusFault_Handler+0x4>

080016ea <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80016ea:	b480      	push	{r7}
 80016ec:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80016ee:	e7fe      	b.n	80016ee <UsageFault_Handler+0x4>

080016f0 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
}
 80016f4:	bf00      	nop
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr

080016fe <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80016fe:	b480      	push	{r7}
 8001700:	af00      	add	r7, sp, #0
}
 8001702:	bf00      	nop
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr

0800170c <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
}
 8001710:	bf00      	nop
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr

0800171a <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800171a:	b480      	push	{r7}
 800171c:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 800171e:	bf00      	nop
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800172c:	4a16      	ldr	r2, [pc, #88]	; (8001788 <SystemInit+0x60>)
 800172e:	4b16      	ldr	r3, [pc, #88]	; (8001788 <SystemInit+0x60>)
 8001730:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001734:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001738:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800173c:	4a13      	ldr	r2, [pc, #76]	; (800178c <SystemInit+0x64>)
 800173e:	4b13      	ldr	r3, [pc, #76]	; (800178c <SystemInit+0x64>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f043 0301 	orr.w	r3, r3, #1
 8001746:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001748:	4b10      	ldr	r3, [pc, #64]	; (800178c <SystemInit+0x64>)
 800174a:	2200      	movs	r2, #0
 800174c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800174e:	4a0f      	ldr	r2, [pc, #60]	; (800178c <SystemInit+0x64>)
 8001750:	4b0e      	ldr	r3, [pc, #56]	; (800178c <SystemInit+0x64>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001758:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800175c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800175e:	4b0b      	ldr	r3, [pc, #44]	; (800178c <SystemInit+0x64>)
 8001760:	4a0b      	ldr	r2, [pc, #44]	; (8001790 <SystemInit+0x68>)
 8001762:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001764:	4a09      	ldr	r2, [pc, #36]	; (800178c <SystemInit+0x64>)
 8001766:	4b09      	ldr	r3, [pc, #36]	; (800178c <SystemInit+0x64>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800176e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001770:	4b06      	ldr	r3, [pc, #24]	; (800178c <SystemInit+0x64>)
 8001772:	2200      	movs	r2, #0
 8001774:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8001776:	f000 f80d 	bl	8001794 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800177a:	4b03      	ldr	r3, [pc, #12]	; (8001788 <SystemInit+0x60>)
 800177c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001780:	609a      	str	r2, [r3, #8]
#endif
}
 8001782:	bf00      	nop
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	e000ed00 	.word	0xe000ed00
 800178c:	40023800 	.word	0x40023800
 8001790:	24003010 	.word	0x24003010

08001794 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800179a:	2300      	movs	r3, #0
 800179c:	607b      	str	r3, [r7, #4]
 800179e:	2300      	movs	r3, #0
 80017a0:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80017a2:	4a36      	ldr	r2, [pc, #216]	; (800187c <SetSysClock+0xe8>)
 80017a4:	4b35      	ldr	r3, [pc, #212]	; (800187c <SetSysClock+0xe8>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017ac:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80017ae:	4b33      	ldr	r3, [pc, #204]	; (800187c <SetSysClock+0xe8>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b6:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	3301      	adds	r3, #1
 80017bc:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d103      	bne.n	80017cc <SetSysClock+0x38>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80017ca:	d1f0      	bne.n	80017ae <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80017cc:	4b2b      	ldr	r3, [pc, #172]	; (800187c <SetSysClock+0xe8>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d002      	beq.n	80017de <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80017d8:	2301      	movs	r3, #1
 80017da:	603b      	str	r3, [r7, #0]
 80017dc:	e001      	b.n	80017e2 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80017de:	2300      	movs	r3, #0
 80017e0:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d142      	bne.n	800186e <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80017e8:	4a24      	ldr	r2, [pc, #144]	; (800187c <SetSysClock+0xe8>)
 80017ea:	4b24      	ldr	r3, [pc, #144]	; (800187c <SetSysClock+0xe8>)
 80017ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017f2:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80017f4:	4a22      	ldr	r2, [pc, #136]	; (8001880 <SetSysClock+0xec>)
 80017f6:	4b22      	ldr	r3, [pc, #136]	; (8001880 <SetSysClock+0xec>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80017fe:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8001800:	4a1e      	ldr	r2, [pc, #120]	; (800187c <SetSysClock+0xe8>)
 8001802:	4b1e      	ldr	r3, [pc, #120]	; (800187c <SetSysClock+0xe8>)
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8001808:	4a1c      	ldr	r2, [pc, #112]	; (800187c <SetSysClock+0xe8>)
 800180a:	4b1c      	ldr	r3, [pc, #112]	; (800187c <SetSysClock+0xe8>)
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001812:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8001814:	4a19      	ldr	r2, [pc, #100]	; (800187c <SetSysClock+0xe8>)
 8001816:	4b19      	ldr	r3, [pc, #100]	; (800187c <SetSysClock+0xe8>)
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 800181e:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8001820:	4b16      	ldr	r3, [pc, #88]	; (800187c <SetSysClock+0xe8>)
 8001822:	4a18      	ldr	r2, [pc, #96]	; (8001884 <SetSysClock+0xf0>)
 8001824:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001826:	4a15      	ldr	r2, [pc, #84]	; (800187c <SetSysClock+0xe8>)
 8001828:	4b14      	ldr	r3, [pc, #80]	; (800187c <SetSysClock+0xe8>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001830:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001832:	bf00      	nop
 8001834:	4b11      	ldr	r3, [pc, #68]	; (800187c <SetSysClock+0xe8>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800183c:	2b00      	cmp	r3, #0
 800183e:	d0f9      	beq.n	8001834 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8001840:	4b11      	ldr	r3, [pc, #68]	; (8001888 <SetSysClock+0xf4>)
 8001842:	f240 7205 	movw	r2, #1797	; 0x705
 8001846:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001848:	4a0c      	ldr	r2, [pc, #48]	; (800187c <SetSysClock+0xe8>)
 800184a:	4b0c      	ldr	r3, [pc, #48]	; (800187c <SetSysClock+0xe8>)
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	f023 0303 	bic.w	r3, r3, #3
 8001852:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8001854:	4a09      	ldr	r2, [pc, #36]	; (800187c <SetSysClock+0xe8>)
 8001856:	4b09      	ldr	r3, [pc, #36]	; (800187c <SetSysClock+0xe8>)
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	f043 0302 	orr.w	r3, r3, #2
 800185e:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8001860:	bf00      	nop
 8001862:	4b06      	ldr	r3, [pc, #24]	; (800187c <SetSysClock+0xe8>)
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	f003 030c 	and.w	r3, r3, #12
 800186a:	2b08      	cmp	r3, #8
 800186c:	d1f9      	bne.n	8001862 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 800186e:	bf00      	nop
 8001870:	370c      	adds	r7, #12
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	40023800 	.word	0x40023800
 8001880:	40007000 	.word	0x40007000
 8001884:	07405419 	.word	0x07405419
 8001888:	40023c00 	.word	0x40023c00

0800188c <TM_GPIO_Init>:
/* Private functions */
void TM_GPIO_INT_EnableClock(GPIO_TypeDef* GPIOx);
void TM_GPIO_INT_DisableClock(GPIO_TypeDef* GPIOx);
void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed);

void TM_GPIO_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af02      	add	r7, sp, #8
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	4608      	mov	r0, r1
 8001896:	4611      	mov	r1, r2
 8001898:	461a      	mov	r2, r3
 800189a:	4603      	mov	r3, r0
 800189c:	807b      	strh	r3, [r7, #2]
 800189e:	460b      	mov	r3, r1
 80018a0:	707b      	strb	r3, [r7, #1]
 80018a2:	4613      	mov	r3, r2
 80018a4:	703b      	strb	r3, [r7, #0]
	/* Check input */
	if (GPIO_Pin == 0x00) {
 80018a6:	887b      	ldrh	r3, [r7, #2]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d00e      	beq.n	80018ca <TM_GPIO_Init+0x3e>
		return;
	}

	/* Enable clock for GPIO */
	TM_GPIO_INT_EnableClock(GPIOx);
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f000 f875 	bl	800199c <TM_GPIO_INT_EnableClock>

	/* Do initialization */
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, GPIO_Mode, GPIO_OType, GPIO_PuPd, GPIO_Speed);
 80018b2:	7838      	ldrb	r0, [r7, #0]
 80018b4:	787a      	ldrb	r2, [r7, #1]
 80018b6:	8879      	ldrh	r1, [r7, #2]
 80018b8:	7d3b      	ldrb	r3, [r7, #20]
 80018ba:	9301      	str	r3, [sp, #4]
 80018bc:	7c3b      	ldrb	r3, [r7, #16]
 80018be:	9300      	str	r3, [sp, #0]
 80018c0:	4603      	mov	r3, r0
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f000 f882 	bl	80019cc <TM_GPIO_INT_Init>
 80018c8:	e000      	b.n	80018cc <TM_GPIO_Init+0x40>
		return;
 80018ca:	bf00      	nop
}
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}

080018d2 <TM_GPIO_InitAlternate>:

void TM_GPIO_InitAlternate(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed, uint8_t Alternate) {
 80018d2:	b580      	push	{r7, lr}
 80018d4:	b086      	sub	sp, #24
 80018d6:	af02      	add	r7, sp, #8
 80018d8:	6078      	str	r0, [r7, #4]
 80018da:	4608      	mov	r0, r1
 80018dc:	4611      	mov	r1, r2
 80018de:	461a      	mov	r2, r3
 80018e0:	4603      	mov	r3, r0
 80018e2:	807b      	strh	r3, [r7, #2]
 80018e4:	460b      	mov	r3, r1
 80018e6:	707b      	strb	r3, [r7, #1]
 80018e8:	4613      	mov	r3, r2
 80018ea:	703b      	strb	r3, [r7, #0]
	uint32_t pinpos;

	/* Check input */
	if (GPIO_Pin == 0x00) {
 80018ec:	887b      	ldrh	r3, [r7, #2]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d03e      	beq.n	8001970 <TM_GPIO_InitAlternate+0x9e>
		return;
	}

	/* Enable GPIOx clock */
	TM_GPIO_INT_EnableClock(GPIOx);
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f000 f852 	bl	800199c <TM_GPIO_INT_EnableClock>

	/* Set alternate functions for all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 80018f8:	2300      	movs	r3, #0
 80018fa:	60fb      	str	r3, [r7, #12]
 80018fc:	e029      	b.n	8001952 <TM_GPIO_InitAlternate+0x80>
		/* Check pin */
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
 80018fe:	887a      	ldrh	r2, [r7, #2]
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	fa42 f303 	asr.w	r3, r2, r3
 8001906:	f003 0301 	and.w	r3, r3, #1
 800190a:	2b00      	cmp	r3, #0
 800190c:	d01d      	beq.n	800194a <TM_GPIO_InitAlternate+0x78>
			continue;
		}

		/* Set alternate function */
		GPIOx->AFR[pinpos >> 0x03] = (GPIOx->AFR[pinpos >> 0x03] & ~(0x0F << (4 * (pinpos & 0x07)))) | (Alternate << (4 * (pinpos & 0x07)));
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	08da      	lsrs	r2, r3, #3
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	08d9      	lsrs	r1, r3, #3
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	3108      	adds	r1, #8
 800191a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800191e:	68f9      	ldr	r1, [r7, #12]
 8001920:	f001 0107 	and.w	r1, r1, #7
 8001924:	0089      	lsls	r1, r1, #2
 8001926:	200f      	movs	r0, #15
 8001928:	fa00 f101 	lsl.w	r1, r0, r1
 800192c:	43c9      	mvns	r1, r1
 800192e:	400b      	ands	r3, r1
 8001930:	7f38      	ldrb	r0, [r7, #28]
 8001932:	68f9      	ldr	r1, [r7, #12]
 8001934:	f001 0107 	and.w	r1, r1, #7
 8001938:	0089      	lsls	r1, r1, #2
 800193a:	fa00 f101 	lsl.w	r1, r0, r1
 800193e:	4319      	orrs	r1, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	3208      	adds	r2, #8
 8001944:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001948:	e000      	b.n	800194c <TM_GPIO_InitAlternate+0x7a>
			continue;
 800194a:	bf00      	nop
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	3301      	adds	r3, #1
 8001950:	60fb      	str	r3, [r7, #12]
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	2b0f      	cmp	r3, #15
 8001956:	d9d2      	bls.n	80018fe <TM_GPIO_InitAlternate+0x2c>
	}

	/* Do initialization */
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, TM_GPIO_Mode_AF, GPIO_OType, GPIO_PuPd, GPIO_Speed);
 8001958:	787a      	ldrb	r2, [r7, #1]
 800195a:	8879      	ldrh	r1, [r7, #2]
 800195c:	7e3b      	ldrb	r3, [r7, #24]
 800195e:	9301      	str	r3, [sp, #4]
 8001960:	783b      	ldrb	r3, [r7, #0]
 8001962:	9300      	str	r3, [sp, #0]
 8001964:	4613      	mov	r3, r2
 8001966:	2202      	movs	r2, #2
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f000 f82f 	bl	80019cc <TM_GPIO_INT_Init>
 800196e:	e000      	b.n	8001972 <TM_GPIO_InitAlternate+0xa0>
		return;
 8001970:	bf00      	nop
}
 8001972:	3710      	adds	r7, #16
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}

08001978 <TM_GPIO_GetPortSource>:

	/* Return source */
	return pinsource;
}

uint16_t TM_GPIO_GetPortSource(GPIO_TypeDef* GPIOx) {
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
	/* Get port source number */
	/* Offset from GPIOA                       Difference between 2 GPIO addresses */
	return ((uint32_t)GPIOx - (GPIOA_BASE)) / ((GPIOB_BASE) - (GPIOA_BASE));
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f103 433f 	add.w	r3, r3, #3204448256	; 0xbf000000
 8001986:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 800198a:	0a9b      	lsrs	r3, r3, #10
 800198c:	b29b      	uxth	r3, r3
}
 800198e:	4618      	mov	r0, r3
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
	...

0800199c <TM_GPIO_INT_EnableClock>:

/* Private functions */
void TM_GPIO_INT_EnableClock(GPIO_TypeDef* GPIOx) {
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
	/* Set bit according to the 1 << portsourcenumber */
	RCC->AHB1ENR |= (1 << TM_GPIO_GetPortSource(GPIOx));
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f7ff ffe7 	bl	8001978 <TM_GPIO_GetPortSource>
 80019aa:	4603      	mov	r3, r0
 80019ac:	461a      	mov	r2, r3
 80019ae:	2301      	movs	r3, #1
 80019b0:	fa03 f102 	lsl.w	r1, r3, r2
 80019b4:	4a04      	ldr	r2, [pc, #16]	; (80019c8 <TM_GPIO_INT_EnableClock+0x2c>)
 80019b6:	4b04      	ldr	r3, [pc, #16]	; (80019c8 <TM_GPIO_INT_EnableClock+0x2c>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ba:	430b      	orrs	r3, r1
 80019bc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80019be:	bf00      	nop
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	40023800 	.word	0x40023800

080019cc <TM_GPIO_INT_Init>:
void TM_GPIO_INT_DisableClock(GPIO_TypeDef* GPIOx) {
	/* Clear bit according to the 1 << portsourcenumber */
	RCC->AHB1ENR &= ~(1 << TM_GPIO_GetPortSource(GPIOx));
}

void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	4608      	mov	r0, r1
 80019d6:	4611      	mov	r1, r2
 80019d8:	461a      	mov	r2, r3
 80019da:	4603      	mov	r3, r0
 80019dc:	807b      	strh	r3, [r7, #2]
 80019de:	460b      	mov	r3, r1
 80019e0:	707b      	strb	r3, [r7, #1]
 80019e2:	4613      	mov	r3, r2
 80019e4:	703b      	strb	r3, [r7, #0]
	uint8_t pinpos;
	uint8_t ptr = TM_GPIO_GetPortSource(GPIOx);
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f7ff ffc6 	bl	8001978 <TM_GPIO_GetPortSource>
 80019ec:	4603      	mov	r3, r0
 80019ee:	73bb      	strb	r3, [r7, #14]

	/* Go through all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 80019f0:	2300      	movs	r3, #0
 80019f2:	73fb      	strb	r3, [r7, #15]
 80019f4:	e067      	b.n	8001ac6 <TM_GPIO_INT_Init+0xfa>
		/* Check if pin available */
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
 80019f6:	887a      	ldrh	r2, [r7, #2]
 80019f8:	7bfb      	ldrb	r3, [r7, #15]
 80019fa:	fa42 f303 	asr.w	r3, r2, r3
 80019fe:	f003 0301 	and.w	r3, r3, #1
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d05b      	beq.n	8001abe <TM_GPIO_INT_Init+0xf2>
			continue;
		}

		/* Pin is used */
		GPIO_UsedPins[ptr] |= 1 << pinpos;
 8001a06:	7bbb      	ldrb	r3, [r7, #14]
 8001a08:	7bba      	ldrb	r2, [r7, #14]
 8001a0a:	4932      	ldr	r1, [pc, #200]	; (8001ad4 <TM_GPIO_INT_Init+0x108>)
 8001a0c:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001a10:	b211      	sxth	r1, r2
 8001a12:	7bfa      	ldrb	r2, [r7, #15]
 8001a14:	2001      	movs	r0, #1
 8001a16:	fa00 f202 	lsl.w	r2, r0, r2
 8001a1a:	b212      	sxth	r2, r2
 8001a1c:	430a      	orrs	r2, r1
 8001a1e:	b212      	sxth	r2, r2
 8001a20:	b291      	uxth	r1, r2
 8001a22:	4a2c      	ldr	r2, [pc, #176]	; (8001ad4 <TM_GPIO_INT_Init+0x108>)
 8001a24:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		/* Set GPIO PUPD register */
		GPIOx->PUPDR = (GPIOx->PUPDR & ~(0x03 << (2 * pinpos))) | ((uint32_t)(GPIO_PuPd << (2 * pinpos)));
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	7bfa      	ldrb	r2, [r7, #15]
 8001a2e:	0052      	lsls	r2, r2, #1
 8001a30:	2103      	movs	r1, #3
 8001a32:	fa01 f202 	lsl.w	r2, r1, r2
 8001a36:	43d2      	mvns	r2, r2
 8001a38:	4013      	ands	r3, r2
 8001a3a:	7e39      	ldrb	r1, [r7, #24]
 8001a3c:	7bfa      	ldrb	r2, [r7, #15]
 8001a3e:	0052      	lsls	r2, r2, #1
 8001a40:	fa01 f202 	lsl.w	r2, r1, r2
 8001a44:	431a      	orrs	r2, r3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	60da      	str	r2, [r3, #12]

		/* Set GPIO MODE register */
		GPIOx->MODER = (GPIOx->MODER & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Mode << (2 * pinpos)));
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	7bfb      	ldrb	r3, [r7, #15]
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	2103      	movs	r1, #3
 8001a54:	fa01 f303 	lsl.w	r3, r1, r3
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	7879      	ldrb	r1, [r7, #1]
 8001a5e:	7bfa      	ldrb	r2, [r7, #15]
 8001a60:	0052      	lsls	r2, r2, #1
 8001a62:	fa01 f202 	lsl.w	r2, r1, r2
 8001a66:	431a      	orrs	r2, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	601a      	str	r2, [r3, #0]

		/* Set only if output or alternate functions */
		if (GPIO_Mode == TM_GPIO_Mode_OUT || GPIO_Mode == TM_GPIO_Mode_AF) {
 8001a6c:	787b      	ldrb	r3, [r7, #1]
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d002      	beq.n	8001a78 <TM_GPIO_INT_Init+0xac>
 8001a72:	787b      	ldrb	r3, [r7, #1]
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d123      	bne.n	8001ac0 <TM_GPIO_INT_Init+0xf4>
			/* Set GPIO OTYPE register */
			GPIOx->OTYPER = (GPIOx->OTYPER & ~(uint16_t)(0x01 << pinpos)) | ((uint16_t)(GPIO_OType << pinpos));
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	7bfa      	ldrb	r2, [r7, #15]
 8001a7e:	2101      	movs	r1, #1
 8001a80:	fa01 f202 	lsl.w	r2, r1, r2
 8001a84:	b292      	uxth	r2, r2
 8001a86:	43d2      	mvns	r2, r2
 8001a88:	4013      	ands	r3, r2
 8001a8a:	7839      	ldrb	r1, [r7, #0]
 8001a8c:	7bfa      	ldrb	r2, [r7, #15]
 8001a8e:	fa01 f202 	lsl.w	r2, r1, r2
 8001a92:	b292      	uxth	r2, r2
 8001a94:	431a      	orrs	r2, r3
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	605a      	str	r2, [r3, #4]

			/* Set GPIO OSPEED register */
			GPIOx->OSPEEDR = (GPIOx->OSPEEDR & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Speed << (2 * pinpos)));
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	689a      	ldr	r2, [r3, #8]
 8001a9e:	7bfb      	ldrb	r3, [r7, #15]
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	2103      	movs	r1, #3
 8001aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa8:	43db      	mvns	r3, r3
 8001aaa:	4013      	ands	r3, r2
 8001aac:	7f39      	ldrb	r1, [r7, #28]
 8001aae:	7bfa      	ldrb	r2, [r7, #15]
 8001ab0:	0052      	lsls	r2, r2, #1
 8001ab2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ab6:	431a      	orrs	r2, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	609a      	str	r2, [r3, #8]
 8001abc:	e000      	b.n	8001ac0 <TM_GPIO_INT_Init+0xf4>
			continue;
 8001abe:	bf00      	nop
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 8001ac0:	7bfb      	ldrb	r3, [r7, #15]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	73fb      	strb	r3, [r7, #15]
 8001ac6:	7bfb      	ldrb	r3, [r7, #15]
 8001ac8:	2b0f      	cmp	r3, #15
 8001aca:	d994      	bls.n	80019f6 <TM_GPIO_INT_Init+0x2a>
		}
	}
}
 8001acc:	bf00      	nop
 8001ace:	3710      	adds	r7, #16
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	20000360 	.word	0x20000360

08001ad8 <TM_I2C_Init>:
/* Private functions */
static void TM_I2C1_INT_InitPins(TM_I2C_PinsPack_t pinspack);
static void TM_I2C2_INT_InitPins(TM_I2C_PinsPack_t pinspack);
static void TM_I2C3_INT_InitPins(TM_I2C_PinsPack_t pinspack);

void TM_I2C_Init(I2C_TypeDef* I2Cx, TM_I2C_PinsPack_t pinspack, uint32_t clockSpeed) {
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b088      	sub	sp, #32
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	60f8      	str	r0, [r7, #12]
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	607a      	str	r2, [r7, #4]
 8001ae4:	72fb      	strb	r3, [r7, #11]
	I2C_InitTypeDef I2C_InitStruct;

	if (I2Cx == I2C1) {
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	4a44      	ldr	r2, [pc, #272]	; (8001bfc <TM_I2C_Init+0x124>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d121      	bne.n	8001b32 <TM_I2C_Init+0x5a>
		/* Enable clock */
		RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8001aee:	4a44      	ldr	r2, [pc, #272]	; (8001c00 <TM_I2C_Init+0x128>)
 8001af0:	4b43      	ldr	r3, [pc, #268]	; (8001c00 <TM_I2C_Init+0x128>)
 8001af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001af8:	6413      	str	r3, [r2, #64]	; 0x40

		/* Enable pins */
		TM_I2C1_INT_InitPins(pinspack);
 8001afa:	7afb      	ldrb	r3, [r7, #11]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f000 fa45 	bl	8001f8c <TM_I2C1_INT_InitPins>

		/* Check clock, set the lowest clock your devices support on the same I2C but */
		if (clockSpeed < TM_I2C_INT_Clocks[0]) {
 8001b02:	4b40      	ldr	r3, [pc, #256]	; (8001c04 <TM_I2C_Init+0x12c>)
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d902      	bls.n	8001b12 <TM_I2C_Init+0x3a>
			TM_I2C_INT_Clocks[0] = clockSpeed;
 8001b0c:	4a3d      	ldr	r2, [pc, #244]	; (8001c04 <TM_I2C_Init+0x12c>)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6013      	str	r3, [r2, #0]
		}

		/* Set values */
		I2C_InitStruct.I2C_ClockSpeed = TM_I2C_INT_Clocks[0];
 8001b12:	4b3c      	ldr	r3, [pc, #240]	; (8001c04 <TM_I2C_Init+0x12c>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	613b      	str	r3, [r7, #16]
		I2C_InitStruct.I2C_AcknowledgedAddress = TM_I2C1_ACKNOWLEDGED_ADDRESS;
 8001b18:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b1c:	83bb      	strh	r3, [r7, #28]
		I2C_InitStruct.I2C_Mode = TM_I2C1_MODE;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	82bb      	strh	r3, [r7, #20]
		I2C_InitStruct.I2C_OwnAddress1 = TM_I2C1_OWN_ADDRESS;
 8001b22:	2300      	movs	r3, #0
 8001b24:	833b      	strh	r3, [r7, #24]
		I2C_InitStruct.I2C_Ack = TM_I2C1_ACK;
 8001b26:	2300      	movs	r3, #0
 8001b28:	837b      	strh	r3, [r7, #26]
		I2C_InitStruct.I2C_DutyCycle = TM_I2C1_DUTY_CYCLE;
 8001b2a:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 8001b2e:	82fb      	strh	r3, [r7, #22]
 8001b30:	e04a      	b.n	8001bc8 <TM_I2C_Init+0xf0>
	} else if (I2Cx == I2C2) {
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	4a34      	ldr	r2, [pc, #208]	; (8001c08 <TM_I2C_Init+0x130>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d121      	bne.n	8001b7e <TM_I2C_Init+0xa6>
		/* Enable clock */
		RCC->APB1ENR |= RCC_APB1ENR_I2C2EN;
 8001b3a:	4a31      	ldr	r2, [pc, #196]	; (8001c00 <TM_I2C_Init+0x128>)
 8001b3c:	4b30      	ldr	r3, [pc, #192]	; (8001c00 <TM_I2C_Init+0x128>)
 8001b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b40:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b44:	6413      	str	r3, [r2, #64]	; 0x40

		/* Enable pins */
		TM_I2C2_INT_InitPins(pinspack);
 8001b46:	7afb      	ldrb	r3, [r7, #11]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f000 fa5d 	bl	8002008 <TM_I2C2_INT_InitPins>

		/* Check clock, set the lowest clock your devices support on the same I2C but */
		if (clockSpeed < TM_I2C_INT_Clocks[1]) {
 8001b4e:	4b2d      	ldr	r3, [pc, #180]	; (8001c04 <TM_I2C_Init+0x12c>)
 8001b50:	685a      	ldr	r2, [r3, #4]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d902      	bls.n	8001b5e <TM_I2C_Init+0x86>
			TM_I2C_INT_Clocks[1] = clockSpeed;
 8001b58:	4a2a      	ldr	r2, [pc, #168]	; (8001c04 <TM_I2C_Init+0x12c>)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6053      	str	r3, [r2, #4]
		}

		/* Set values */
		I2C_InitStruct.I2C_ClockSpeed = TM_I2C_INT_Clocks[1];
 8001b5e:	4b29      	ldr	r3, [pc, #164]	; (8001c04 <TM_I2C_Init+0x12c>)
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	613b      	str	r3, [r7, #16]
		I2C_InitStruct.I2C_AcknowledgedAddress = TM_I2C2_ACKNOWLEDGED_ADDRESS;
 8001b64:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b68:	83bb      	strh	r3, [r7, #28]
		I2C_InitStruct.I2C_Mode = TM_I2C2_MODE;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	82bb      	strh	r3, [r7, #20]
		I2C_InitStruct.I2C_OwnAddress1 = TM_I2C2_OWN_ADDRESS;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	833b      	strh	r3, [r7, #24]
		I2C_InitStruct.I2C_Ack = TM_I2C2_ACK;
 8001b72:	2300      	movs	r3, #0
 8001b74:	837b      	strh	r3, [r7, #26]
		I2C_InitStruct.I2C_DutyCycle = TM_I2C2_DUTY_CYCLE;
 8001b76:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 8001b7a:	82fb      	strh	r3, [r7, #22]
 8001b7c:	e024      	b.n	8001bc8 <TM_I2C_Init+0xf0>
	} else if (I2Cx == I2C3) {
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	4a22      	ldr	r2, [pc, #136]	; (8001c0c <TM_I2C_Init+0x134>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d120      	bne.n	8001bc8 <TM_I2C_Init+0xf0>
		/* Enable clock */
		RCC->APB1ENR |= RCC_APB1ENR_I2C3EN;
 8001b86:	4a1e      	ldr	r2, [pc, #120]	; (8001c00 <TM_I2C_Init+0x128>)
 8001b88:	4b1d      	ldr	r3, [pc, #116]	; (8001c00 <TM_I2C_Init+0x128>)
 8001b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001b90:	6413      	str	r3, [r2, #64]	; 0x40

		/* Enable pins */
		TM_I2C3_INT_InitPins(pinspack);
 8001b92:	7afb      	ldrb	r3, [r7, #11]
 8001b94:	4618      	mov	r0, r3
 8001b96:	f000 fa77 	bl	8002088 <TM_I2C3_INT_InitPins>

		/* Check clock, set the lowest clock your devices support on the same I2C but */
		if (clockSpeed < TM_I2C_INT_Clocks[2]) {
 8001b9a:	4b1a      	ldr	r3, [pc, #104]	; (8001c04 <TM_I2C_Init+0x12c>)
 8001b9c:	689a      	ldr	r2, [r3, #8]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d902      	bls.n	8001baa <TM_I2C_Init+0xd2>
			TM_I2C_INT_Clocks[2] = clockSpeed;
 8001ba4:	4a17      	ldr	r2, [pc, #92]	; (8001c04 <TM_I2C_Init+0x12c>)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6093      	str	r3, [r2, #8]
		}

		/* Set values */
		I2C_InitStruct.I2C_ClockSpeed = TM_I2C_INT_Clocks[2];
 8001baa:	4b16      	ldr	r3, [pc, #88]	; (8001c04 <TM_I2C_Init+0x12c>)
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	613b      	str	r3, [r7, #16]
		I2C_InitStruct.I2C_AcknowledgedAddress = TM_I2C3_ACKNOWLEDGED_ADDRESS;
 8001bb0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001bb4:	83bb      	strh	r3, [r7, #28]
		I2C_InitStruct.I2C_Mode = TM_I2C3_MODE;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	82bb      	strh	r3, [r7, #20]
		I2C_InitStruct.I2C_OwnAddress1 = TM_I2C3_OWN_ADDRESS;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	833b      	strh	r3, [r7, #24]
		I2C_InitStruct.I2C_Ack = TM_I2C3_ACK;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	837b      	strh	r3, [r7, #26]
		I2C_InitStruct.I2C_DutyCycle = TM_I2C3_DUTY_CYCLE;
 8001bc2:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 8001bc6:	82fb      	strh	r3, [r7, #22]
	}

	/* Disable I2C first */
	I2Cx->CR1 &= ~I2C_CR1_PE;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	881b      	ldrh	r3, [r3, #0]
 8001bcc:	b29b      	uxth	r3, r3
 8001bce:	f023 0301 	bic.w	r3, r3, #1
 8001bd2:	b29a      	uxth	r2, r3
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	801a      	strh	r2, [r3, #0]

	/* Initialize I2C */
	I2C_Init(I2Cx, &I2C_InitStruct);
 8001bd8:	f107 0310 	add.w	r3, r7, #16
 8001bdc:	4619      	mov	r1, r3
 8001bde:	68f8      	ldr	r0, [r7, #12]
 8001be0:	f7fe fc36 	bl	8000450 <I2C_Init>

	/* Enable I2C */
	I2Cx->CR1 |= I2C_CR1_PE;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	881b      	ldrh	r3, [r3, #0]
 8001be8:	b29b      	uxth	r3, r3
 8001bea:	f043 0301 	orr.w	r3, r3, #1
 8001bee:	b29a      	uxth	r2, r3
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	801a      	strh	r2, [r3, #0]
}
 8001bf4:	bf00      	nop
 8001bf6:	3720      	adds	r7, #32
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	40005400 	.word	0x40005400
 8001c00:	40023800 	.word	0x40023800
 8001c04:	20000014 	.word	0x20000014
 8001c08:	40005800 	.word	0x40005800
 8001c0c:	40005c00 	.word	0x40005c00

08001c10 <TM_I2C_ReadMulti>:
	TM_I2C_Start(I2Cx, address, I2C_RECEIVER_MODE, I2C_ACK_DISABLE);
	received_data = TM_I2C_ReadNack(I2Cx);
	return received_data;
}

void TM_I2C_ReadMulti(I2C_TypeDef* I2Cx, uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001c10:	b590      	push	{r4, r7, lr}
 8001c12:	b085      	sub	sp, #20
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	60f8      	str	r0, [r7, #12]
 8001c18:	607b      	str	r3, [r7, #4]
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	72fb      	strb	r3, [r7, #11]
 8001c1e:	4613      	mov	r3, r2
 8001c20:	72bb      	strb	r3, [r7, #10]
	TM_I2C_Start(I2Cx, address, I2C_TRANSMITTER_MODE, I2C_ACK_ENABLE);
 8001c22:	7af9      	ldrb	r1, [r7, #11]
 8001c24:	2301      	movs	r3, #1
 8001c26:	2200      	movs	r2, #0
 8001c28:	68f8      	ldr	r0, [r7, #12]
 8001c2a:	f000 f861 	bl	8001cf0 <TM_I2C_Start>
	TM_I2C_WriteData(I2Cx, reg);
 8001c2e:	7abb      	ldrb	r3, [r7, #10]
 8001c30:	4619      	mov	r1, r3
 8001c32:	68f8      	ldr	r0, [r7, #12]
 8001c34:	f000 f8e6 	bl	8001e04 <TM_I2C_WriteData>
	TM_I2C_Stop(I2Cx);
 8001c38:	68f8      	ldr	r0, [r7, #12]
 8001c3a:	f000 f973 	bl	8001f24 <TM_I2C_Stop>
	TM_I2C_Start(I2Cx, address, I2C_RECEIVER_MODE, I2C_ACK_ENABLE);
 8001c3e:	7af9      	ldrb	r1, [r7, #11]
 8001c40:	2301      	movs	r3, #1
 8001c42:	2201      	movs	r2, #1
 8001c44:	68f8      	ldr	r0, [r7, #12]
 8001c46:	f000 f853 	bl	8001cf0 <TM_I2C_Start>
	while (count--) {
 8001c4a:	e013      	b.n	8001c74 <TM_I2C_ReadMulti+0x64>
		if (!count) {
 8001c4c:	8c3b      	ldrh	r3, [r7, #32]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d108      	bne.n	8001c64 <TM_I2C_ReadMulti+0x54>
			/* Last byte */
			*data++ = TM_I2C_ReadNack(I2Cx);
 8001c52:	687c      	ldr	r4, [r7, #4]
 8001c54:	1c63      	adds	r3, r4, #1
 8001c56:	607b      	str	r3, [r7, #4]
 8001c58:	68f8      	ldr	r0, [r7, #12]
 8001c5a:	f000 f92b 	bl	8001eb4 <TM_I2C_ReadNack>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	7023      	strb	r3, [r4, #0]
 8001c62:	e007      	b.n	8001c74 <TM_I2C_ReadMulti+0x64>
		} else {
			*data++ = TM_I2C_ReadAck(I2Cx);
 8001c64:	687c      	ldr	r4, [r7, #4]
 8001c66:	1c63      	adds	r3, r4, #1
 8001c68:	607b      	str	r3, [r7, #4]
 8001c6a:	68f8      	ldr	r0, [r7, #12]
 8001c6c:	f000 f8f2 	bl	8001e54 <TM_I2C_ReadAck>
 8001c70:	4603      	mov	r3, r0
 8001c72:	7023      	strb	r3, [r4, #0]
	while (count--) {
 8001c74:	8c3b      	ldrh	r3, [r7, #32]
 8001c76:	1e5a      	subs	r2, r3, #1
 8001c78:	843a      	strh	r2, [r7, #32]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d1e6      	bne.n	8001c4c <TM_I2C_ReadMulti+0x3c>
		}
	}
}
 8001c7e:	bf00      	nop
 8001c80:	3714      	adds	r7, #20
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd90      	pop	{r4, r7, pc}

08001c86 <TM_I2C_WriteMulti>:
	TM_I2C_WriteData(I2Cx, reg);
	TM_I2C_WriteData(I2Cx, data);
	TM_I2C_Stop(I2Cx);
}

void TM_I2C_WriteMulti(I2C_TypeDef* I2Cx, uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001c86:	b580      	push	{r7, lr}
 8001c88:	b084      	sub	sp, #16
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	60f8      	str	r0, [r7, #12]
 8001c8e:	607b      	str	r3, [r7, #4]
 8001c90:	460b      	mov	r3, r1
 8001c92:	72fb      	strb	r3, [r7, #11]
 8001c94:	4613      	mov	r3, r2
 8001c96:	72bb      	strb	r3, [r7, #10]
	TM_I2C_Start(I2Cx, address, I2C_TRANSMITTER_MODE, I2C_ACK_DISABLE);
 8001c98:	7af9      	ldrb	r1, [r7, #11]
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	68f8      	ldr	r0, [r7, #12]
 8001ca0:	f000 f826 	bl	8001cf0 <TM_I2C_Start>
	TM_I2C_WriteData(I2Cx, reg);
 8001ca4:	7abb      	ldrb	r3, [r7, #10]
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	68f8      	ldr	r0, [r7, #12]
 8001caa:	f000 f8ab 	bl	8001e04 <TM_I2C_WriteData>
	while (count--) {
 8001cae:	e007      	b.n	8001cc0 <TM_I2C_WriteMulti+0x3a>
		TM_I2C_WriteData(I2Cx, *data++);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	1c5a      	adds	r2, r3, #1
 8001cb4:	607a      	str	r2, [r7, #4]
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	4619      	mov	r1, r3
 8001cba:	68f8      	ldr	r0, [r7, #12]
 8001cbc:	f000 f8a2 	bl	8001e04 <TM_I2C_WriteData>
	while (count--) {
 8001cc0:	8b3b      	ldrh	r3, [r7, #24]
 8001cc2:	1e5a      	subs	r2, r3, #1
 8001cc4:	833a      	strh	r2, [r7, #24]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d1f2      	bne.n	8001cb0 <TM_I2C_WriteMulti+0x2a>
	}
	TM_I2C_Stop(I2Cx);
 8001cca:	68f8      	ldr	r0, [r7, #12]
 8001ccc:	f000 f92a 	bl	8001f24 <TM_I2C_Stop>
}
 8001cd0:	bf00      	nop
 8001cd2:	3710      	adds	r7, #16
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <TM_I2C_InitCustomPinsCallback>:

	/* Return status */
	return connected;
}

__weak void TM_I2C_InitCustomPinsCallback(I2C_TypeDef* I2Cx, uint16_t AlternateFunction) {
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	807b      	strh	r3, [r7, #2]
	/* Custom user function. */
	/* In case user needs functionality for custom pins, this function should be declared outside this library */
}
 8001ce4:	bf00      	nop
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr

08001cf0 <TM_I2C_Start>:

/* Private functions */
int16_t TM_I2C_Start(I2C_TypeDef* I2Cx, uint8_t address, uint8_t direction, uint8_t ack) {
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	4608      	mov	r0, r1
 8001cfa:	4611      	mov	r1, r2
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	4603      	mov	r3, r0
 8001d00:	70fb      	strb	r3, [r7, #3]
 8001d02:	460b      	mov	r3, r1
 8001d04:	70bb      	strb	r3, [r7, #2]
 8001d06:	4613      	mov	r3, r2
 8001d08:	707b      	strb	r3, [r7, #1]
	/* Generate I2C start pulse */
	I2Cx->CR1 |= I2C_CR1_START;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	881b      	ldrh	r3, [r3, #0]
 8001d0e:	b29b      	uxth	r3, r3
 8001d10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d14:	b29a      	uxth	r2, r3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	801a      	strh	r2, [r3, #0]

	/* Wait till I2C is busy */
	TM_I2C_Timeout = TM_I2C_TIMEOUT;
 8001d1a:	4b38      	ldr	r3, [pc, #224]	; (8001dfc <TM_I2C_Start+0x10c>)
 8001d1c:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001d20:	601a      	str	r2, [r3, #0]
	while (!(I2Cx->SR1 & I2C_SR1_SB)) {
 8001d22:	e00a      	b.n	8001d3a <TM_I2C_Start+0x4a>
		if (--TM_I2C_Timeout == 0x00) {
 8001d24:	4b35      	ldr	r3, [pc, #212]	; (8001dfc <TM_I2C_Start+0x10c>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	3b01      	subs	r3, #1
 8001d2a:	4a34      	ldr	r2, [pc, #208]	; (8001dfc <TM_I2C_Start+0x10c>)
 8001d2c:	6013      	str	r3, [r2, #0]
 8001d2e:	4b33      	ldr	r3, [pc, #204]	; (8001dfc <TM_I2C_Start+0x10c>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d101      	bne.n	8001d3a <TM_I2C_Start+0x4a>
			return 1;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e05c      	b.n	8001df4 <TM_I2C_Start+0x104>
	while (!(I2Cx->SR1 & I2C_SR1_SB)) {
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	8a9b      	ldrh	r3, [r3, #20]
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	f003 0301 	and.w	r3, r3, #1
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d0ed      	beq.n	8001d24 <TM_I2C_Start+0x34>
		}
	}

	/* Enable ack if we select it */
	if (ack) {
 8001d48:	787b      	ldrb	r3, [r7, #1]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d007      	beq.n	8001d5e <TM_I2C_Start+0x6e>
		I2Cx->CR1 |= I2C_CR1_ACK;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	881b      	ldrh	r3, [r3, #0]
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d58:	b29a      	uxth	r2, r3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	801a      	strh	r2, [r3, #0]
	}

	/* Send write/read bit */
	if (direction == I2C_TRANSMITTER_MODE) {
 8001d5e:	78bb      	ldrb	r3, [r7, #2]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d120      	bne.n	8001da6 <TM_I2C_Start+0xb6>
		/* Send address with zero last bit */
		address = address << 1;
 8001d64:	78fb      	ldrb	r3, [r7, #3]
 8001d66:	005b      	lsls	r3, r3, #1
 8001d68:	70fb      	strb	r3, [r7, #3]
		I2Cx->DR = address & ~I2C_OAR1_ADD0;
 8001d6a:	78fb      	ldrb	r3, [r7, #3]
 8001d6c:	b29b      	uxth	r3, r3
 8001d6e:	f023 0301 	bic.w	r3, r3, #1
 8001d72:	b29a      	uxth	r2, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	821a      	strh	r2, [r3, #16]

		/* Wait till finished */
		TM_I2C_Timeout = TM_I2C_TIMEOUT;
 8001d78:	4b20      	ldr	r3, [pc, #128]	; (8001dfc <TM_I2C_Start+0x10c>)
 8001d7a:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001d7e:	601a      	str	r2, [r3, #0]
		while (!(I2Cx->SR1 & I2C_SR1_ADDR)) {
 8001d80:	e00a      	b.n	8001d98 <TM_I2C_Start+0xa8>
			if (--TM_I2C_Timeout == 0x00) {
 8001d82:	4b1e      	ldr	r3, [pc, #120]	; (8001dfc <TM_I2C_Start+0x10c>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	3b01      	subs	r3, #1
 8001d88:	4a1c      	ldr	r2, [pc, #112]	; (8001dfc <TM_I2C_Start+0x10c>)
 8001d8a:	6013      	str	r3, [r2, #0]
 8001d8c:	4b1b      	ldr	r3, [pc, #108]	; (8001dfc <TM_I2C_Start+0x10c>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d101      	bne.n	8001d98 <TM_I2C_Start+0xa8>
				return 1;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e02d      	b.n	8001df4 <TM_I2C_Start+0x104>
		while (!(I2Cx->SR1 & I2C_SR1_ADDR)) {
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	8a9b      	ldrh	r3, [r3, #20]
 8001d9c:	b29b      	uxth	r3, r3
 8001d9e:	f003 0302 	and.w	r3, r3, #2
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d0ed      	beq.n	8001d82 <TM_I2C_Start+0x92>
			}
		}
	}
	if (direction == I2C_RECEIVER_MODE) {
 8001da6:	78bb      	ldrb	r3, [r7, #2]
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d120      	bne.n	8001dee <TM_I2C_Start+0xfe>
		address = address << 1;
 8001dac:	78fb      	ldrb	r3, [r7, #3]
 8001dae:	005b      	lsls	r3, r3, #1
 8001db0:	70fb      	strb	r3, [r7, #3]
		/* Send address with 1 last bit */
		I2Cx->DR = address | I2C_OAR1_ADD0;
 8001db2:	78fb      	ldrb	r3, [r7, #3]
 8001db4:	f043 0301 	orr.w	r3, r3, #1
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	b29a      	uxth	r2, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	821a      	strh	r2, [r3, #16]

		/* Wait till finished */
		TM_I2C_Timeout = TM_I2C_TIMEOUT;
 8001dc0:	4b0e      	ldr	r3, [pc, #56]	; (8001dfc <TM_I2C_Start+0x10c>)
 8001dc2:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001dc6:	601a      	str	r2, [r3, #0]
		while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED)) {
 8001dc8:	e00a      	b.n	8001de0 <TM_I2C_Start+0xf0>
			if (--TM_I2C_Timeout == 0x00) {
 8001dca:	4b0c      	ldr	r3, [pc, #48]	; (8001dfc <TM_I2C_Start+0x10c>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	4a0a      	ldr	r2, [pc, #40]	; (8001dfc <TM_I2C_Start+0x10c>)
 8001dd2:	6013      	str	r3, [r2, #0]
 8001dd4:	4b09      	ldr	r3, [pc, #36]	; (8001dfc <TM_I2C_Start+0x10c>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d101      	bne.n	8001de0 <TM_I2C_Start+0xf0>
				return 1;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e009      	b.n	8001df4 <TM_I2C_Start+0x104>
		while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED)) {
 8001de0:	4907      	ldr	r1, [pc, #28]	; (8001e00 <TM_I2C_Start+0x110>)
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f7fe fbf6 	bl	80005d4 <I2C_CheckEvent>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d0ed      	beq.n	8001dca <TM_I2C_Start+0xda>
			}
		}
	}

	/* Read status register to clear ADDR flag */
	I2Cx->SR2;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	8b1b      	ldrh	r3, [r3, #24]

	/* Return 0, everything ok */
	return 0;
 8001df2:	2300      	movs	r3, #0
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3708      	adds	r7, #8
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	20000378 	.word	0x20000378
 8001e00:	00030002 	.word	0x00030002

08001e04 <TM_I2C_WriteData>:

void TM_I2C_WriteData(I2C_TypeDef* I2Cx, uint8_t data) {
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	70fb      	strb	r3, [r7, #3]
	/* Wait till I2C is not busy anymore */
	TM_I2C_Timeout = TM_I2C_TIMEOUT;
 8001e10:	4b0f      	ldr	r3, [pc, #60]	; (8001e50 <TM_I2C_WriteData+0x4c>)
 8001e12:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001e16:	601a      	str	r2, [r3, #0]
	while (!(I2Cx->SR1 & I2C_SR1_TXE) && TM_I2C_Timeout) {
 8001e18:	e004      	b.n	8001e24 <TM_I2C_WriteData+0x20>
		TM_I2C_Timeout--;
 8001e1a:	4b0d      	ldr	r3, [pc, #52]	; (8001e50 <TM_I2C_WriteData+0x4c>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	3b01      	subs	r3, #1
 8001e20:	4a0b      	ldr	r2, [pc, #44]	; (8001e50 <TM_I2C_WriteData+0x4c>)
 8001e22:	6013      	str	r3, [r2, #0]
	while (!(I2Cx->SR1 & I2C_SR1_TXE) && TM_I2C_Timeout) {
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	8a9b      	ldrh	r3, [r3, #20]
 8001e28:	b29b      	uxth	r3, r3
 8001e2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d103      	bne.n	8001e3a <TM_I2C_WriteData+0x36>
 8001e32:	4b07      	ldr	r3, [pc, #28]	; (8001e50 <TM_I2C_WriteData+0x4c>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d1ef      	bne.n	8001e1a <TM_I2C_WriteData+0x16>
	}

	/* Send I2C data */
	I2Cx->DR = data;
 8001e3a:	78fb      	ldrb	r3, [r7, #3]
 8001e3c:	b29a      	uxth	r2, r3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	821a      	strh	r2, [r3, #16]
}
 8001e42:	bf00      	nop
 8001e44:	370c      	adds	r7, #12
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	20000378 	.word	0x20000378

08001e54 <TM_I2C_ReadAck>:

uint8_t TM_I2C_ReadAck(I2C_TypeDef* I2Cx) {
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
	uint8_t data;

	/* Enable ACK */
	I2Cx->CR1 |= I2C_CR1_ACK;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	881b      	ldrh	r3, [r3, #0]
 8001e60:	b29b      	uxth	r3, r3
 8001e62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e66:	b29a      	uxth	r2, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	801a      	strh	r2, [r3, #0]

	/* Wait till not received */
	TM_I2C_Timeout = TM_I2C_TIMEOUT;
 8001e6c:	4b0f      	ldr	r3, [pc, #60]	; (8001eac <TM_I2C_ReadAck+0x58>)
 8001e6e:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001e72:	601a      	str	r2, [r3, #0]
	while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_RECEIVED)) {
 8001e74:	e00a      	b.n	8001e8c <TM_I2C_ReadAck+0x38>
		if (--TM_I2C_Timeout == 0x00) {
 8001e76:	4b0d      	ldr	r3, [pc, #52]	; (8001eac <TM_I2C_ReadAck+0x58>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	3b01      	subs	r3, #1
 8001e7c:	4a0b      	ldr	r2, [pc, #44]	; (8001eac <TM_I2C_ReadAck+0x58>)
 8001e7e:	6013      	str	r3, [r2, #0]
 8001e80:	4b0a      	ldr	r3, [pc, #40]	; (8001eac <TM_I2C_ReadAck+0x58>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d101      	bne.n	8001e8c <TM_I2C_ReadAck+0x38>
			return 1;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e00b      	b.n	8001ea4 <TM_I2C_ReadAck+0x50>
	while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_RECEIVED)) {
 8001e8c:	4908      	ldr	r1, [pc, #32]	; (8001eb0 <TM_I2C_ReadAck+0x5c>)
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f7fe fba0 	bl	80005d4 <I2C_CheckEvent>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d0ed      	beq.n	8001e76 <TM_I2C_ReadAck+0x22>
		}
	}

	/* Read data */
	data = I2Cx->DR;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	8a1b      	ldrh	r3, [r3, #16]
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	73fb      	strb	r3, [r7, #15]

	/* Return data */
	return data;
 8001ea2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3710      	adds	r7, #16
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	20000378 	.word	0x20000378
 8001eb0:	00030040 	.word	0x00030040

08001eb4 <TM_I2C_ReadNack>:

uint8_t TM_I2C_ReadNack(I2C_TypeDef* I2Cx) {
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
	uint8_t data;

	/* Disable ACK */
	I2Cx->CR1 &= ~I2C_CR1_ACK;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	881b      	ldrh	r3, [r3, #0]
 8001ec0:	b29b      	uxth	r3, r3
 8001ec2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001ec6:	b29a      	uxth	r2, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	801a      	strh	r2, [r3, #0]

	/* Generate stop */
	I2Cx->CR1 |= I2C_CR1_STOP;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	881b      	ldrh	r3, [r3, #0]
 8001ed0:	b29b      	uxth	r3, r3
 8001ed2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ed6:	b29a      	uxth	r2, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	801a      	strh	r2, [r3, #0]

	/* Wait till received */
	TM_I2C_Timeout = TM_I2C_TIMEOUT;
 8001edc:	4b0f      	ldr	r3, [pc, #60]	; (8001f1c <TM_I2C_ReadNack+0x68>)
 8001ede:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001ee2:	601a      	str	r2, [r3, #0]
	while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_RECEIVED)) {
 8001ee4:	e00a      	b.n	8001efc <TM_I2C_ReadNack+0x48>
		if (--TM_I2C_Timeout == 0x00) {
 8001ee6:	4b0d      	ldr	r3, [pc, #52]	; (8001f1c <TM_I2C_ReadNack+0x68>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	3b01      	subs	r3, #1
 8001eec:	4a0b      	ldr	r2, [pc, #44]	; (8001f1c <TM_I2C_ReadNack+0x68>)
 8001eee:	6013      	str	r3, [r2, #0]
 8001ef0:	4b0a      	ldr	r3, [pc, #40]	; (8001f1c <TM_I2C_ReadNack+0x68>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d101      	bne.n	8001efc <TM_I2C_ReadNack+0x48>
			return 1;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e00b      	b.n	8001f14 <TM_I2C_ReadNack+0x60>
	while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_RECEIVED)) {
 8001efc:	4908      	ldr	r1, [pc, #32]	; (8001f20 <TM_I2C_ReadNack+0x6c>)
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f7fe fb68 	bl	80005d4 <I2C_CheckEvent>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d0ed      	beq.n	8001ee6 <TM_I2C_ReadNack+0x32>
		}
	}

	/* Read data */
	data = I2Cx->DR;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	8a1b      	ldrh	r3, [r3, #16]
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	73fb      	strb	r3, [r7, #15]

	/* Return data */
	return data;
 8001f12:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3710      	adds	r7, #16
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	20000378 	.word	0x20000378
 8001f20:	00030040 	.word	0x00030040

08001f24 <TM_I2C_Stop>:

uint8_t TM_I2C_Stop(I2C_TypeDef* I2Cx) {
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
	/* Wait till transmitter not empty */
	TM_I2C_Timeout = TM_I2C_TIMEOUT;
 8001f2c:	4b16      	ldr	r3, [pc, #88]	; (8001f88 <TM_I2C_Stop+0x64>)
 8001f2e:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001f32:	601a      	str	r2, [r3, #0]
	while (((!(I2Cx->SR1 & I2C_SR1_TXE)) || (!(I2Cx->SR1 & I2C_SR1_BTF)))) {
 8001f34:	e00a      	b.n	8001f4c <TM_I2C_Stop+0x28>
		if (--TM_I2C_Timeout == 0x00) {
 8001f36:	4b14      	ldr	r3, [pc, #80]	; (8001f88 <TM_I2C_Stop+0x64>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	3b01      	subs	r3, #1
 8001f3c:	4a12      	ldr	r2, [pc, #72]	; (8001f88 <TM_I2C_Stop+0x64>)
 8001f3e:	6013      	str	r3, [r2, #0]
 8001f40:	4b11      	ldr	r3, [pc, #68]	; (8001f88 <TM_I2C_Stop+0x64>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d101      	bne.n	8001f4c <TM_I2C_Stop+0x28>
			return 1;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e016      	b.n	8001f7a <TM_I2C_Stop+0x56>
	while (((!(I2Cx->SR1 & I2C_SR1_TXE)) || (!(I2Cx->SR1 & I2C_SR1_BTF)))) {
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	8a9b      	ldrh	r3, [r3, #20]
 8001f50:	b29b      	uxth	r3, r3
 8001f52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d0ed      	beq.n	8001f36 <TM_I2C_Stop+0x12>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	8a9b      	ldrh	r3, [r3, #20]
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	f003 0304 	and.w	r3, r3, #4
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d0e6      	beq.n	8001f36 <TM_I2C_Stop+0x12>
		}
	}

	/* Generate stop */
	I2Cx->CR1 |= I2C_CR1_STOP;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	881b      	ldrh	r3, [r3, #0]
 8001f6c:	b29b      	uxth	r3, r3
 8001f6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f72:	b29a      	uxth	r2, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	801a      	strh	r2, [r3, #0]

	/* Return 0, everything ok */
	return 0;
 8001f78:	2300      	movs	r3, #0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	20000378 	.word	0x20000378

08001f8c <TM_I2C1_INT_InitPins>:




/* Private functions */
static void TM_I2C1_INT_InitPins(TM_I2C_PinsPack_t pinspack) {
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af02      	add	r7, sp, #8
 8001f92:	4603      	mov	r3, r0
 8001f94:	71fb      	strb	r3, [r7, #7]
	/* Init pins */
#if defined(GPIOB)
	if (pinspack == TM_I2C_PinsPack_1) {
 8001f96:	79fb      	ldrb	r3, [r7, #7]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d109      	bne.n	8001fb0 <TM_I2C1_INT_InitPins+0x24>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_6 | GPIO_PIN_7, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF_I2C1);
 8001f9c:	2304      	movs	r3, #4
 8001f9e:	9301      	str	r3, [sp, #4]
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	9300      	str	r3, [sp, #0]
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	21c0      	movs	r1, #192	; 0xc0
 8001faa:	4815      	ldr	r0, [pc, #84]	; (8002000 <TM_I2C1_INT_InitPins+0x74>)
 8001fac:	f7ff fc91 	bl	80018d2 <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOB)
	if (pinspack == TM_I2C_PinsPack_2) {
 8001fb0:	79fb      	ldrb	r3, [r7, #7]
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d10a      	bne.n	8001fcc <TM_I2C1_INT_InitPins+0x40>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_8 | GPIO_PIN_9, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF_I2C1);
 8001fb6:	2304      	movs	r3, #4
 8001fb8:	9301      	str	r3, [sp, #4]
 8001fba:	2301      	movs	r3, #1
 8001fbc:	9300      	str	r3, [sp, #0]
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001fc6:	480e      	ldr	r0, [pc, #56]	; (8002000 <TM_I2C1_INT_InitPins+0x74>)
 8001fc8:	f7ff fc83 	bl	80018d2 <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOB)
	if (pinspack == TM_I2C_PinsPack_3) {
 8001fcc:	79fb      	ldrb	r3, [r7, #7]
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d10a      	bne.n	8001fe8 <TM_I2C1_INT_InitPins+0x5c>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_6 | GPIO_PIN_9, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF_I2C1);
 8001fd2:	2304      	movs	r3, #4
 8001fd4:	9301      	str	r3, [sp, #4]
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	9300      	str	r3, [sp, #0]
 8001fda:	2301      	movs	r3, #1
 8001fdc:	2201      	movs	r2, #1
 8001fde:	f44f 7110 	mov.w	r1, #576	; 0x240
 8001fe2:	4807      	ldr	r0, [pc, #28]	; (8002000 <TM_I2C1_INT_InitPins+0x74>)
 8001fe4:	f7ff fc75 	bl	80018d2 <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_I2C_PinsPack_Custom) {
 8001fe8:	79fb      	ldrb	r3, [r7, #7]
 8001fea:	2b03      	cmp	r3, #3
 8001fec:	d103      	bne.n	8001ff6 <TM_I2C1_INT_InitPins+0x6a>
		/* Init custom pins, callback function */
		TM_I2C_InitCustomPinsCallback(I2C1, GPIO_AF_I2C1);
 8001fee:	2104      	movs	r1, #4
 8001ff0:	4804      	ldr	r0, [pc, #16]	; (8002004 <TM_I2C1_INT_InitPins+0x78>)
 8001ff2:	f7ff fe71 	bl	8001cd8 <TM_I2C_InitCustomPinsCallback>
	}
}
 8001ff6:	bf00      	nop
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	40020400 	.word	0x40020400
 8002004:	40005400 	.word	0x40005400

08002008 <TM_I2C2_INT_InitPins>:

static void TM_I2C2_INT_InitPins(TM_I2C_PinsPack_t pinspack) {
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af02      	add	r7, sp, #8
 800200e:	4603      	mov	r3, r0
 8002010:	71fb      	strb	r3, [r7, #7]
	/* Init pins */
#if defined(GPIOB)
	if (pinspack == TM_I2C_PinsPack_1) {
 8002012:	79fb      	ldrb	r3, [r7, #7]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d10a      	bne.n	800202e <TM_I2C2_INT_InitPins+0x26>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_10 | GPIO_PIN_11, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF_I2C2);
 8002018:	2304      	movs	r3, #4
 800201a:	9301      	str	r3, [sp, #4]
 800201c:	2301      	movs	r3, #1
 800201e:	9300      	str	r3, [sp, #0]
 8002020:	2301      	movs	r3, #1
 8002022:	2201      	movs	r2, #1
 8002024:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8002028:	4813      	ldr	r0, [pc, #76]	; (8002078 <TM_I2C2_INT_InitPins+0x70>)
 800202a:	f7ff fc52 	bl	80018d2 <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOF)
	if (pinspack == TM_I2C_PinsPack_2) {
 800202e:	79fb      	ldrb	r3, [r7, #7]
 8002030:	2b01      	cmp	r3, #1
 8002032:	d109      	bne.n	8002048 <TM_I2C2_INT_InitPins+0x40>
		TM_GPIO_InitAlternate(GPIOF, GPIO_PIN_0 | GPIO_PIN_1, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF_I2C2);
 8002034:	2304      	movs	r3, #4
 8002036:	9301      	str	r3, [sp, #4]
 8002038:	2301      	movs	r3, #1
 800203a:	9300      	str	r3, [sp, #0]
 800203c:	2301      	movs	r3, #1
 800203e:	2201      	movs	r2, #1
 8002040:	2103      	movs	r1, #3
 8002042:	480e      	ldr	r0, [pc, #56]	; (800207c <TM_I2C2_INT_InitPins+0x74>)
 8002044:	f7ff fc45 	bl	80018d2 <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOH)
	if (pinspack == TM_I2C_PinsPack_3) {
 8002048:	79fb      	ldrb	r3, [r7, #7]
 800204a:	2b02      	cmp	r3, #2
 800204c:	d109      	bne.n	8002062 <TM_I2C2_INT_InitPins+0x5a>
		TM_GPIO_InitAlternate(GPIOH, GPIO_PIN_4 | GPIO_PIN_5, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF_I2C2);
 800204e:	2304      	movs	r3, #4
 8002050:	9301      	str	r3, [sp, #4]
 8002052:	2301      	movs	r3, #1
 8002054:	9300      	str	r3, [sp, #0]
 8002056:	2301      	movs	r3, #1
 8002058:	2201      	movs	r2, #1
 800205a:	2130      	movs	r1, #48	; 0x30
 800205c:	4808      	ldr	r0, [pc, #32]	; (8002080 <TM_I2C2_INT_InitPins+0x78>)
 800205e:	f7ff fc38 	bl	80018d2 <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_I2C_PinsPack_Custom) {
 8002062:	79fb      	ldrb	r3, [r7, #7]
 8002064:	2b03      	cmp	r3, #3
 8002066:	d103      	bne.n	8002070 <TM_I2C2_INT_InitPins+0x68>
		/* Init custom pins, callback function */
		TM_I2C_InitCustomPinsCallback(I2C2, GPIO_AF_I2C2);
 8002068:	2104      	movs	r1, #4
 800206a:	4806      	ldr	r0, [pc, #24]	; (8002084 <TM_I2C2_INT_InitPins+0x7c>)
 800206c:	f7ff fe34 	bl	8001cd8 <TM_I2C_InitCustomPinsCallback>
	}
}
 8002070:	bf00      	nop
 8002072:	3708      	adds	r7, #8
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	40020400 	.word	0x40020400
 800207c:	40021400 	.word	0x40021400
 8002080:	40021c00 	.word	0x40021c00
 8002084:	40005800 	.word	0x40005800

08002088 <TM_I2C3_INT_InitPins>:

static void TM_I2C3_INT_InitPins(TM_I2C_PinsPack_t pinspack) {
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af02      	add	r7, sp, #8
 800208e:	4603      	mov	r3, r0
 8002090:	71fb      	strb	r3, [r7, #7]
	/* Init pins */
#if defined(GPIOA) && defined(GPIOC)
	if (pinspack == TM_I2C_PinsPack_1) {
 8002092:	79fb      	ldrb	r3, [r7, #7]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d115      	bne.n	80020c4 <TM_I2C3_INT_InitPins+0x3c>
		TM_GPIO_InitAlternate(GPIOA, GPIO_PIN_8, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF_I2C3);
 8002098:	2304      	movs	r3, #4
 800209a:	9301      	str	r3, [sp, #4]
 800209c:	2301      	movs	r3, #1
 800209e:	9300      	str	r3, [sp, #0]
 80020a0:	2301      	movs	r3, #1
 80020a2:	2201      	movs	r2, #1
 80020a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020a8:	4813      	ldr	r0, [pc, #76]	; (80020f8 <TM_I2C3_INT_InitPins+0x70>)
 80020aa:	f7ff fc12 	bl	80018d2 <TM_GPIO_InitAlternate>
		TM_GPIO_InitAlternate(GPIOC, GPIO_PIN_9, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF_I2C3);
 80020ae:	2304      	movs	r3, #4
 80020b0:	9301      	str	r3, [sp, #4]
 80020b2:	2301      	movs	r3, #1
 80020b4:	9300      	str	r3, [sp, #0]
 80020b6:	2301      	movs	r3, #1
 80020b8:	2201      	movs	r2, #1
 80020ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020be:	480f      	ldr	r0, [pc, #60]	; (80020fc <TM_I2C3_INT_InitPins+0x74>)
 80020c0:	f7ff fc07 	bl	80018d2 <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOH)
	if (pinspack == TM_I2C_PinsPack_2) {
 80020c4:	79fb      	ldrb	r3, [r7, #7]
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d10a      	bne.n	80020e0 <TM_I2C3_INT_InitPins+0x58>
		TM_GPIO_InitAlternate(GPIOH, GPIO_PIN_7 | GPIO_PIN_8, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF_I2C3);
 80020ca:	2304      	movs	r3, #4
 80020cc:	9301      	str	r3, [sp, #4]
 80020ce:	2301      	movs	r3, #1
 80020d0:	9300      	str	r3, [sp, #0]
 80020d2:	2301      	movs	r3, #1
 80020d4:	2201      	movs	r2, #1
 80020d6:	f44f 71c0 	mov.w	r1, #384	; 0x180
 80020da:	4809      	ldr	r0, [pc, #36]	; (8002100 <TM_I2C3_INT_InitPins+0x78>)
 80020dc:	f7ff fbf9 	bl	80018d2 <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_I2C_PinsPack_Custom) {
 80020e0:	79fb      	ldrb	r3, [r7, #7]
 80020e2:	2b03      	cmp	r3, #3
 80020e4:	d103      	bne.n	80020ee <TM_I2C3_INT_InitPins+0x66>
		/* Init custom pins, callback function */
		TM_I2C_InitCustomPinsCallback(I2C3, GPIO_AF_I2C3);
 80020e6:	2104      	movs	r1, #4
 80020e8:	4806      	ldr	r0, [pc, #24]	; (8002104 <TM_I2C3_INT_InitPins+0x7c>)
 80020ea:	f7ff fdf5 	bl	8001cd8 <TM_I2C_InitCustomPinsCallback>
	}
}
 80020ee:	bf00      	nop
 80020f0:	3708      	adds	r7, #8
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	40020000 	.word	0x40020000
 80020fc:	40020800 	.word	0x40020800
 8002100:	40021c00 	.word	0x40021c00
 8002104:	40005c00 	.word	0x40005c00

08002108 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002112:	2300      	movs	r3, #0
 8002114:	73fb      	strb	r3, [r7, #15]
	

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8002116:	6839      	ldr	r1, [r7, #0]
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f001 fb45 	bl	80037a8 <VL53L0X_get_offset_calibration_data_micro_meter>
 800211e:	4603      	mov	r3, r0
 8002120:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	
	return Status;
 8002122:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002126:	4618      	mov	r0, r3
 8002128:	3710      	adds	r7, #16
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <VL53L0X_SetLinearityCorrectiveGain>:

VL53L0X_Error VL53L0X_SetLinearityCorrectiveGain(VL53L0X_DEV Dev,
	int16_t LinearityCorrectiveGain)
{
 800212e:	b580      	push	{r7, lr}
 8002130:	b084      	sub	sp, #16
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
 8002136:	460b      	mov	r3, r1
 8002138:	807b      	strh	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800213a:	2300      	movs	r3, #0
 800213c:	73fb      	strb	r3, [r7, #15]
	

	if ((LinearityCorrectiveGain < 0) || (LinearityCorrectiveGain > 1000))
 800213e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002142:	2b00      	cmp	r3, #0
 8002144:	db04      	blt.n	8002150 <VL53L0X_SetLinearityCorrectiveGain+0x22>
 8002146:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800214a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800214e:	dd02      	ble.n	8002156 <VL53L0X_SetLinearityCorrectiveGain+0x28>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8002150:	23fc      	movs	r3, #252	; 0xfc
 8002152:	73fb      	strb	r3, [r7, #15]
 8002154:	e00f      	b.n	8002176 <VL53L0X_SetLinearityCorrectiveGain+0x48>
	else {
		PALDevDataSet(Dev, LinearityCorrectiveGain,
 8002156:	887a      	ldrh	r2, [r7, #2]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152
			LinearityCorrectiveGain);

		if (LinearityCorrectiveGain != 1000) {
 800215e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002162:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002166:	d006      	beq.n	8002176 <VL53L0X_SetLinearityCorrectiveGain+0x48>
			/* Disable FW Xtalk */
			Status = VL53L0X_WrWord(Dev,
 8002168:	2200      	movs	r2, #0
 800216a:	2120      	movs	r1, #32
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f004 fb31 	bl	80067d4 <VL53L0X_WrWord>
 8002172:	4603      	mov	r3, r0
 8002174:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, 0);
		}
	}

	
	return Status;
 8002176:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800217a:	4618      	mov	r0, r3
 800217c:	3710      	adds	r7, #16
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}

08002182 <VL53L0X_SetDeviceAddress>:

/* End Group PAL General Functions */

/* Group PAL Init Functions */
VL53L0X_Error VL53L0X_SetDeviceAddress(VL53L0X_DEV Dev, uint8_t DeviceAddress)
{
 8002182:	b580      	push	{r7, lr}
 8002184:	b084      	sub	sp, #16
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
 800218a:	460b      	mov	r3, r1
 800218c:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800218e:	2300      	movs	r3, #0
 8002190:	73fb      	strb	r3, [r7, #15]
	

	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_I2C_SLAVE_DEVICE_ADDRESS,
 8002192:	78fb      	ldrb	r3, [r7, #3]
 8002194:	085b      	lsrs	r3, r3, #1
 8002196:	b2db      	uxtb	r3, r3
 8002198:	461a      	mov	r2, r3
 800219a:	218a      	movs	r1, #138	; 0x8a
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f004 faf9 	bl	8006794 <VL53L0X_WrByte>
 80021a2:	4603      	mov	r3, r0
 80021a4:	73fb      	strb	r3, [r7, #15]
		DeviceAddress / 2);

	
	return Status;
 80021a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3710      	adds	r7, #16
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
	...

080021b4 <VL53L0X_StaticInit>:
	
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 80021b4:	b5b0      	push	{r4, r5, r7, lr}
 80021b6:	b09e      	sub	sp, #120	; 0x78
 80021b8:	af02      	add	r7, sp, #8
 80021ba:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80021bc:	2300      	movs	r3, #0
 80021be:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 80021c2:	f107 031c 	add.w	r3, r7, #28
 80021c6:	2240      	movs	r2, #64	; 0x40
 80021c8:	2100      	movs	r1, #0
 80021ca:	4618      	mov	r0, r3
 80021cc:	f004 fc15 	bl	80069fa <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 80021d0:	2300      	movs	r3, #0
 80021d2:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 80021d4:	2300      	movs	r3, #0
 80021d6:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 80021d8:	2300      	movs	r3, #0
 80021da:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 80021de:	2300      	movs	r3, #0
 80021e0:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 80021e2:	2300      	movs	r3, #0
 80021e4:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 80021e6:	2300      	movs	r3, #0
 80021e8:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 80021ea:	2300      	movs	r3, #0
 80021ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	

	Status = VL53L0X_get_info_from_device(Dev, 1);
 80021f0:	2101      	movs	r1, #1
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f002 fa1c 	bl	8004630 <VL53L0X_get_info_from_device>
 80021f8:	4603      	mov	r3, r0
 80021fa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 8002204:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 800220c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8002210:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002214:	2b01      	cmp	r3, #1
 8002216:	d80d      	bhi.n	8002234 <VL53L0X_StaticInit+0x80>
 8002218:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800221c:	2b01      	cmp	r3, #1
 800221e:	d102      	bne.n	8002226 <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 8002220:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002222:	2b20      	cmp	r3, #32
 8002224:	d806      	bhi.n	8002234 <VL53L0X_StaticInit+0x80>
 8002226:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800222a:	2b00      	cmp	r3, #0
 800222c:	d10e      	bne.n	800224c <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 800222e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002230:	2b0c      	cmp	r3, #12
 8002232:	d90b      	bls.n	800224c <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8002234:	f107 0218 	add.w	r2, r7, #24
 8002238:	f107 0314 	add.w	r3, r7, #20
 800223c:	4619      	mov	r1, r3
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f001 fcae 	bl	8003ba0 <VL53L0X_perform_ref_spad_management>
 8002244:	4603      	mov	r3, r0
 8002246:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800224a:	e009      	b.n	8002260 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 800224c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002250:	461a      	mov	r2, r3
 8002252:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f001 feaf 	bl	8003fb8 <VL53L0X_set_reference_spads>
 800225a:	4603      	mov	r3, r0
 800225c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8002260:	4b94      	ldr	r3, [pc, #592]	; (80024b4 <VL53L0X_StaticInit+0x300>)
 8002262:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 8002264:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002268:	2b00      	cmp	r3, #0
 800226a:	d10f      	bne.n	800228c <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8002272:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 8002276:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800227a:	2b00      	cmp	r3, #0
 800227c:	d104      	bne.n	8002288 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8002284:	66bb      	str	r3, [r7, #104]	; 0x68
 8002286:	e001      	b.n	800228c <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8002288:	4b8a      	ldr	r3, [pc, #552]	; (80024b4 <VL53L0X_StaticInit+0x300>)
 800228a:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 800228c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002290:	2b00      	cmp	r3, #0
 8002292:	d106      	bne.n	80022a2 <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 8002294:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f003 fae0 	bl	800585c <VL53L0X_load_tuning_settings>
 800229c:	4603      	mov	r3, r0
 800229e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 80022a2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d10a      	bne.n	80022c0 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 80022aa:	2300      	movs	r3, #0
 80022ac:	9300      	str	r3, [sp, #0]
 80022ae:	2304      	movs	r3, #4
 80022b0:	2200      	movs	r2, #0
 80022b2:	2100      	movs	r1, #0
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f001 f83f 	bl	8003338 <VL53L0X_SetGpioConfig>
 80022ba:	4603      	mov	r3, r0
 80022bc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80022c0:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d121      	bne.n	800230c <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80022c8:	2201      	movs	r2, #1
 80022ca:	21ff      	movs	r1, #255	; 0xff
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f004 fa61 	bl	8006794 <VL53L0X_WrByte>
 80022d2:	4603      	mov	r3, r0
 80022d4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 80022d8:	f107 031a 	add.w	r3, r7, #26
 80022dc:	461a      	mov	r2, r3
 80022de:	2184      	movs	r1, #132	; 0x84
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	f004 faf4 	bl	80068ce <VL53L0X_RdWord>
 80022e6:	4603      	mov	r3, r0
 80022e8:	461a      	mov	r2, r3
 80022ea:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80022ee:	4313      	orrs	r3, r2
 80022f0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80022f4:	2200      	movs	r2, #0
 80022f6:	21ff      	movs	r1, #255	; 0xff
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f004 fa4b 	bl	8006794 <VL53L0X_WrByte>
 80022fe:	4603      	mov	r3, r0
 8002300:	461a      	mov	r2, r3
 8002302:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002306:	4313      	orrs	r3, r2
 8002308:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800230c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002310:	2b00      	cmp	r3, #0
 8002312:	d105      	bne.n	8002320 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8002314:	8b7b      	ldrh	r3, [r7, #26]
 8002316:	011b      	lsls	r3, r3, #4
 8002318:	461a      	mov	r2, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 8002320:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002324:	2b00      	cmp	r3, #0
 8002326:	d108      	bne.n	800233a <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8002328:	f107 031c 	add.w	r3, r7, #28
 800232c:	4619      	mov	r1, r3
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f000 f8c2 	bl	80024b8 <VL53L0X_GetDeviceParameters>
 8002334:	4603      	mov	r3, r0
 8002336:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 800233a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800233e:	2b00      	cmp	r3, #0
 8002340:	d110      	bne.n	8002364 <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 8002342:	f107 0319 	add.w	r3, r7, #25
 8002346:	4619      	mov	r1, r3
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f000 f9a0 	bl	800268e <VL53L0X_GetFractionEnable>
 800234e:	4603      	mov	r3, r0
 8002350:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 8002354:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002358:	2b00      	cmp	r3, #0
 800235a:	d103      	bne.n	8002364 <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 800235c:	7e7a      	ldrb	r2, [r7, #25]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 8002364:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002368:	2b00      	cmp	r3, #0
 800236a:	d10e      	bne.n	800238a <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f103 0410 	add.w	r4, r3, #16
 8002372:	f107 051c 	add.w	r5, r7, #28
 8002376:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002378:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800237a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800237c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800237e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002380:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002382:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002386:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 800238a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800238e:	2b00      	cmp	r3, #0
 8002390:	d111      	bne.n	80023b6 <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 8002392:	f107 0319 	add.w	r3, r7, #25
 8002396:	461a      	mov	r2, r3
 8002398:	2101      	movs	r1, #1
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f004 fa78 	bl	8006890 <VL53L0X_RdByte>
 80023a0:	4603      	mov	r3, r0
 80023a2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 80023a6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d103      	bne.n	80023b6 <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 80023ae:	7e7a      	ldrb	r2, [r7, #25]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 80023b6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d107      	bne.n	80023ce <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 80023be:	2200      	movs	r2, #0
 80023c0:	2100      	movs	r1, #0
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f000 f9c0 	bl	8002748 <VL53L0X_SetSequenceStepEnable>
 80023c8:	4603      	mov	r3, r0
 80023ca:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 80023ce:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d107      	bne.n	80023e6 <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 80023d6:	2200      	movs	r2, #0
 80023d8:	2102      	movs	r1, #2
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f000 f9b4 	bl	8002748 <VL53L0X_SetSequenceStepEnable>
 80023e0:	4603      	mov	r3, r0
 80023e2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 80023e6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d103      	bne.n	80023f6 <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2203      	movs	r2, #3
 80023f2:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 80023f6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d109      	bne.n	8002412 <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 80023fe:	f107 0313 	add.w	r3, r7, #19
 8002402:	461a      	mov	r2, r3
 8002404:	2100      	movs	r1, #0
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f000 f986 	bl	8002718 <VL53L0X_GetVcselPulsePeriod>
 800240c:	4603      	mov	r3, r0
 800240e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002412:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002416:	2b00      	cmp	r3, #0
 8002418:	d103      	bne.n	8002422 <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800241a:	7cfa      	ldrb	r2, [r7, #19]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8002422:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002426:	2b00      	cmp	r3, #0
 8002428:	d109      	bne.n	800243e <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 800242a:	f107 0313 	add.w	r3, r7, #19
 800242e:	461a      	mov	r2, r3
 8002430:	2101      	movs	r1, #1
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f000 f970 	bl	8002718 <VL53L0X_GetVcselPulsePeriod>
 8002438:	4603      	mov	r3, r0
 800243a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800243e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002442:	2b00      	cmp	r3, #0
 8002444:	d103      	bne.n	800244e <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8002446:	7cfa      	ldrb	r2, [r7, #19]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800244e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002452:	2b00      	cmp	r3, #0
 8002454:	d109      	bne.n	800246a <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 8002456:	f107 030c 	add.w	r3, r7, #12
 800245a:	461a      	mov	r2, r3
 800245c:	2103      	movs	r1, #3
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f002 fe60 	bl	8005124 <get_sequence_step_timeout>
 8002464:	4603      	mov	r3, r0
 8002466:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800246a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800246e:	2b00      	cmp	r3, #0
 8002470:	d103      	bne.n	800247a <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8002472:	68fa      	ldr	r2, [r7, #12]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800247a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800247e:	2b00      	cmp	r3, #0
 8002480:	d109      	bne.n	8002496 <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 8002482:	f107 030c 	add.w	r3, r7, #12
 8002486:	461a      	mov	r2, r3
 8002488:	2104      	movs	r1, #4
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f002 fe4a 	bl	8005124 <get_sequence_step_timeout>
 8002490:	4603      	mov	r3, r0
 8002492:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002496:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800249a:	2b00      	cmp	r3, #0
 800249c:	d103      	bne.n	80024a6 <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800249e:	68fa      	ldr	r2, [r7, #12]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	
	return Status;
 80024a6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3770      	adds	r7, #112	; 0x70
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bdb0      	pop	{r4, r5, r7, pc}
 80024b2:	bf00      	nop
 80024b4:	20000020 	.word	0x20000020

080024b8 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80024c2:	2300      	movs	r3, #0
 80024c4:	73fb      	strb	r3, [r7, #15]
	int i;

	

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	4619      	mov	r1, r3
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f000 f8cc 	bl	8002668 <VL53L0X_GetDeviceMode>
 80024d0:	4603      	mov	r3, r0
 80024d2:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80024d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d107      	bne.n	80024ec <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	3308      	adds	r3, #8
 80024e0:	4619      	mov	r1, r3
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f000 fa7a 	bl	80029dc <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 80024e8:	4603      	mov	r3, r0
 80024ea:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 80024ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d102      	bne.n	80024fa <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	2200      	movs	r2, #0
 80024f8:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 80024fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d107      	bne.n	8002512 <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	3310      	adds	r3, #16
 8002506:	4619      	mov	r1, r3
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	f000 fab0 	bl	8002a6e <VL53L0X_GetXTalkCompensationRateMegaCps>
 800250e:	4603      	mov	r3, r0
 8002510:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 8002512:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d107      	bne.n	800252a <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	3314      	adds	r3, #20
 800251e:	4619      	mov	r1, r3
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f7ff fdf1 	bl	8002108 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 8002526:	4603      	mov	r3, r0
 8002528:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 800252a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d134      	bne.n	800259c <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8002532:	2300      	movs	r3, #0
 8002534:	60bb      	str	r3, [r7, #8]
 8002536:	e02a      	b.n	800258e <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8002538:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d12a      	bne.n	8002596 <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	b299      	uxth	r1, r3
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	3308      	adds	r3, #8
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	683a      	ldr	r2, [r7, #0]
 800254c:	4413      	add	r3, r2
 800254e:	3304      	adds	r3, #4
 8002550:	461a      	mov	r2, r3
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f000 fae2 	bl	8002b1c <VL53L0X_GetLimitCheckValue>
 8002558:	4603      	mov	r3, r0
 800255a:	461a      	mov	r2, r3
 800255c:	7bfb      	ldrb	r3, [r7, #15]
 800255e:	4313      	orrs	r3, r2
 8002560:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8002562:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d117      	bne.n	800259a <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	b299      	uxth	r1, r3
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	3318      	adds	r3, #24
 8002572:	683a      	ldr	r2, [r7, #0]
 8002574:	4413      	add	r3, r2
 8002576:	461a      	mov	r2, r3
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f000 faab 	bl	8002ad4 <VL53L0X_GetLimitCheckEnable>
 800257e:	4603      	mov	r3, r0
 8002580:	461a      	mov	r2, r3
 8002582:	7bfb      	ldrb	r3, [r7, #15]
 8002584:	4313      	orrs	r3, r2
 8002586:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	3301      	adds	r3, #1
 800258c:	60bb      	str	r3, [r7, #8]
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	2b05      	cmp	r3, #5
 8002592:	ddd1      	ble.n	8002538 <VL53L0X_GetDeviceParameters+0x80>
 8002594:	e002      	b.n	800259c <VL53L0X_GetDeviceParameters+0xe4>
				break;
 8002596:	bf00      	nop
 8002598:	e000      	b.n	800259c <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 800259a:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800259c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d107      	bne.n	80025b4 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	333c      	adds	r3, #60	; 0x3c
 80025a8:	4619      	mov	r1, r3
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f000 fb44 	bl	8002c38 <VL53L0X_GetWrapAroundCheckEnable>
 80025b0:	4603      	mov	r3, r0
 80025b2:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 80025b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d107      	bne.n	80025cc <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	3304      	adds	r3, #4
 80025c0:	4619      	mov	r1, r3
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f000 f895 	bl	80026f2 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 80025c8:	4603      	mov	r3, r0
 80025ca:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	
	return Status;
 80025cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3710      	adds	r7, #16
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}

080025d8 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 80025d8:	b480      	push	{r7}
 80025da:	b085      	sub	sp, #20
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	460b      	mov	r3, r1
 80025e2:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80025e4:	2300      	movs	r3, #0
 80025e6:	73fb      	strb	r3, [r7, #15]

	switch (DeviceMode) {
 80025e8:	78fb      	ldrb	r3, [r7, #3]
 80025ea:	2b15      	cmp	r3, #21
 80025ec:	d832      	bhi.n	8002654 <VL53L0X_SetDeviceMode+0x7c>
 80025ee:	a201      	add	r2, pc, #4	; (adr r2, 80025f4 <VL53L0X_SetDeviceMode+0x1c>)
 80025f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025f4:	0800264d 	.word	0x0800264d
 80025f8:	0800264d 	.word	0x0800264d
 80025fc:	08002655 	.word	0x08002655
 8002600:	0800264d 	.word	0x0800264d
 8002604:	08002655 	.word	0x08002655
 8002608:	08002655 	.word	0x08002655
 800260c:	08002655 	.word	0x08002655
 8002610:	08002655 	.word	0x08002655
 8002614:	08002655 	.word	0x08002655
 8002618:	08002655 	.word	0x08002655
 800261c:	08002655 	.word	0x08002655
 8002620:	08002655 	.word	0x08002655
 8002624:	08002655 	.word	0x08002655
 8002628:	08002655 	.word	0x08002655
 800262c:	08002655 	.word	0x08002655
 8002630:	08002655 	.word	0x08002655
 8002634:	08002655 	.word	0x08002655
 8002638:	08002655 	.word	0x08002655
 800263c:	08002655 	.word	0x08002655
 8002640:	08002655 	.word	0x08002655
 8002644:	0800264d 	.word	0x0800264d
 8002648:	0800264d 	.word	0x0800264d
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	78fa      	ldrb	r2, [r7, #3]
 8002650:	741a      	strb	r2, [r3, #16]
		break;
 8002652:	e001      	b.n	8002658 <VL53L0X_SetDeviceMode+0x80>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8002654:	23f8      	movs	r3, #248	; 0xf8
 8002656:	73fb      	strb	r3, [r7, #15]
	}

	
	return Status;
 8002658:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800265c:	4618      	mov	r0, r3
 800265e:	3714      	adds	r7, #20
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr

08002668 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 8002668:	b480      	push	{r7}
 800266a:	b085      	sub	sp, #20
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002672:	2300      	movs	r3, #0
 8002674:	73fb      	strb	r3, [r7, #15]
	

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	7c1a      	ldrb	r2, [r3, #16]
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	701a      	strb	r2, [r3, #0]

	
	return Status;
 800267e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002682:	4618      	mov	r0, r3
 8002684:	3714      	adds	r7, #20
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr

0800268e <VL53L0X_GetFractionEnable>:
	
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 800268e:	b580      	push	{r7, lr}
 8002690:	b084      	sub	sp, #16
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
 8002696:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002698:	2300      	movs	r3, #0
 800269a:	73fb      	strb	r3, [r7, #15]
	

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 800269c:	683a      	ldr	r2, [r7, #0]
 800269e:	2109      	movs	r1, #9
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f004 f8f5 	bl	8006890 <VL53L0X_RdByte>
 80026a6:	4603      	mov	r3, r0
 80026a8:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80026aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d106      	bne.n	80026c0 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	f003 0301 	and.w	r3, r3, #1
 80026ba:	b2da      	uxtb	r2, r3
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	701a      	strb	r2, [r3, #0]

	
	return Status;
 80026c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3710      	adds	r7, #16
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}

080026cc <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80026d6:	2300      	movs	r3, #0
 80026d8:	73fb      	strb	r3, [r7, #15]
	

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 80026da:	6839      	ldr	r1, [r7, #0]
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f002 ff2b 	bl	8005538 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 80026e2:	4603      	mov	r3, r0
 80026e4:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	

	return Status;
 80026e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3710      	adds	r7, #16
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}

080026f2 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 80026f2:	b580      	push	{r7, lr}
 80026f4:	b084      	sub	sp, #16
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
 80026fa:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80026fc:	2300      	movs	r3, #0
 80026fe:	73fb      	strb	r3, [r7, #15]
	

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8002700:	6839      	ldr	r1, [r7, #0]
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f002 fff8 	bl	80056f8 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 8002708:	4603      	mov	r3, r0
 800270a:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	
	return Status;
 800270c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002710:	4618      	mov	r0, r3
 8002712:	3710      	adds	r7, #16
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}

08002718 <VL53L0X_GetVcselPulsePeriod>:
	return Status;
}

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b086      	sub	sp, #24
 800271c:	af00      	add	r7, sp, #0
 800271e:	60f8      	str	r0, [r7, #12]
 8002720:	460b      	mov	r3, r1
 8002722:	607a      	str	r2, [r7, #4]
 8002724:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002726:	2300      	movs	r3, #0
 8002728:	75fb      	strb	r3, [r7, #23]
	

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 800272a:	7afb      	ldrb	r3, [r7, #11]
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	4619      	mov	r1, r3
 8002730:	68f8      	ldr	r0, [r7, #12]
 8002732:	f002 feca 	bl	80054ca <VL53L0X_get_vcsel_pulse_period>
 8002736:	4603      	mov	r3, r0
 8002738:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	
	return Status;
 800273a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800273e:	4618      	mov	r0, r3
 8002740:	3718      	adds	r7, #24
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
	...

08002748 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b086      	sub	sp, #24
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	460b      	mov	r3, r1
 8002752:	70fb      	strb	r3, [r7, #3]
 8002754:	4613      	mov	r3, r2
 8002756:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002758:	2300      	movs	r3, #0
 800275a:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800275c:	2300      	movs	r3, #0
 800275e:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 8002760:	2300      	movs	r3, #0
 8002762:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8002764:	f107 030f 	add.w	r3, r7, #15
 8002768:	461a      	mov	r2, r3
 800276a:	2101      	movs	r1, #1
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f004 f88f 	bl	8006890 <VL53L0X_RdByte>
 8002772:	4603      	mov	r3, r0
 8002774:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 8002776:	7bfb      	ldrb	r3, [r7, #15]
 8002778:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 800277a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d159      	bne.n	8002836 <VL53L0X_SetSequenceStepEnable+0xee>
		if (SequenceStepEnabled == 1) {
 8002782:	78bb      	ldrb	r3, [r7, #2]
 8002784:	2b01      	cmp	r3, #1
 8002786:	d12b      	bne.n	80027e0 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 8002788:	78fb      	ldrb	r3, [r7, #3]
 800278a:	2b04      	cmp	r3, #4
 800278c:	d825      	bhi.n	80027da <VL53L0X_SetSequenceStepEnable+0x92>
 800278e:	a201      	add	r2, pc, #4	; (adr r2, 8002794 <VL53L0X_SetSequenceStepEnable+0x4c>)
 8002790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002794:	080027a9 	.word	0x080027a9
 8002798:	080027b3 	.word	0x080027b3
 800279c:	080027bd 	.word	0x080027bd
 80027a0:	080027c7 	.word	0x080027c7
 80027a4:	080027d1 	.word	0x080027d1
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 80027a8:	7dbb      	ldrb	r3, [r7, #22]
 80027aa:	f043 0310 	orr.w	r3, r3, #16
 80027ae:	75bb      	strb	r3, [r7, #22]
				break;
 80027b0:	e041      	b.n	8002836 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 80027b2:	7dbb      	ldrb	r3, [r7, #22]
 80027b4:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 80027b8:	75bb      	strb	r3, [r7, #22]
				break;
 80027ba:	e03c      	b.n	8002836 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 80027bc:	7dbb      	ldrb	r3, [r7, #22]
 80027be:	f043 0304 	orr.w	r3, r3, #4
 80027c2:	75bb      	strb	r3, [r7, #22]
				break;
 80027c4:	e037      	b.n	8002836 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 80027c6:	7dbb      	ldrb	r3, [r7, #22]
 80027c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027cc:	75bb      	strb	r3, [r7, #22]
				break;
 80027ce:	e032      	b.n	8002836 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 80027d0:	7dbb      	ldrb	r3, [r7, #22]
 80027d2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80027d6:	75bb      	strb	r3, [r7, #22]
				break;
 80027d8:	e02d      	b.n	8002836 <VL53L0X_SetSequenceStepEnable+0xee>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80027da:	23fc      	movs	r3, #252	; 0xfc
 80027dc:	75fb      	strb	r3, [r7, #23]
 80027de:	e02a      	b.n	8002836 <VL53L0X_SetSequenceStepEnable+0xee>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 80027e0:	78fb      	ldrb	r3, [r7, #3]
 80027e2:	2b04      	cmp	r3, #4
 80027e4:	d825      	bhi.n	8002832 <VL53L0X_SetSequenceStepEnable+0xea>
 80027e6:	a201      	add	r2, pc, #4	; (adr r2, 80027ec <VL53L0X_SetSequenceStepEnable+0xa4>)
 80027e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027ec:	08002801 	.word	0x08002801
 80027f0:	0800280b 	.word	0x0800280b
 80027f4:	08002815 	.word	0x08002815
 80027f8:	0800281f 	.word	0x0800281f
 80027fc:	08002829 	.word	0x08002829
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 8002800:	7dbb      	ldrb	r3, [r7, #22]
 8002802:	f023 0310 	bic.w	r3, r3, #16
 8002806:	75bb      	strb	r3, [r7, #22]
				break;
 8002808:	e015      	b.n	8002836 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 800280a:	7dbb      	ldrb	r3, [r7, #22]
 800280c:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8002810:	75bb      	strb	r3, [r7, #22]
				break;
 8002812:	e010      	b.n	8002836 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 8002814:	7dbb      	ldrb	r3, [r7, #22]
 8002816:	f023 0304 	bic.w	r3, r3, #4
 800281a:	75bb      	strb	r3, [r7, #22]
				break;
 800281c:	e00b      	b.n	8002836 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 800281e:	7dbb      	ldrb	r3, [r7, #22]
 8002820:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002824:	75bb      	strb	r3, [r7, #22]
				break;
 8002826:	e006      	b.n	8002836 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 8002828:	7dbb      	ldrb	r3, [r7, #22]
 800282a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800282e:	75bb      	strb	r3, [r7, #22]
				break;
 8002830:	e001      	b.n	8002836 <VL53L0X_SetSequenceStepEnable+0xee>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8002832:	23fc      	movs	r3, #252	; 0xfc
 8002834:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	if (SequenceConfigNew != SequenceConfig) {
 8002836:	7bfb      	ldrb	r3, [r7, #15]
 8002838:	7dba      	ldrb	r2, [r7, #22]
 800283a:	429a      	cmp	r2, r3
 800283c:	d01e      	beq.n	800287c <VL53L0X_SetSequenceStepEnable+0x134>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 800283e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d107      	bne.n	8002856 <VL53L0X_SetSequenceStepEnable+0x10e>
			Status = VL53L0X_WrByte(Dev,
 8002846:	7dbb      	ldrb	r3, [r7, #22]
 8002848:	461a      	mov	r2, r3
 800284a:	2101      	movs	r1, #1
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f003 ffa1 	bl	8006794 <VL53L0X_WrByte>
 8002852:	4603      	mov	r3, r0
 8002854:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 8002856:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d103      	bne.n	8002866 <VL53L0X_SetSequenceStepEnable+0x11e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	7dba      	ldrb	r2, [r7, #22]
 8002862:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 8002866:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d106      	bne.n	800287c <VL53L0X_SetSequenceStepEnable+0x134>
			VL53L0X_GETPARAMETERFIELD(Dev,
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	695b      	ldr	r3, [r3, #20]
 8002872:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8002874:	6939      	ldr	r1, [r7, #16]
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f7ff ff28 	bl	80026cc <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	

	return Status;
 800287c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002880:	4618      	mov	r0, r3
 8002882:	3718      	adds	r7, #24
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}

08002888 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 8002888:	b480      	push	{r7}
 800288a:	b087      	sub	sp, #28
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	607b      	str	r3, [r7, #4]
 8002892:	460b      	mov	r3, r1
 8002894:	72fb      	strb	r3, [r7, #11]
 8002896:	4613      	mov	r3, r2
 8002898:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800289a:	2300      	movs	r3, #0
 800289c:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2200      	movs	r2, #0
 80028a2:	701a      	strb	r2, [r3, #0]
	

	switch (SequenceStepId) {
 80028a4:	7afb      	ldrb	r3, [r7, #11]
 80028a6:	2b04      	cmp	r3, #4
 80028a8:	d836      	bhi.n	8002918 <sequence_step_enabled+0x90>
 80028aa:	a201      	add	r2, pc, #4	; (adr r2, 80028b0 <sequence_step_enabled+0x28>)
 80028ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028b0:	080028c5 	.word	0x080028c5
 80028b4:	080028d7 	.word	0x080028d7
 80028b8:	080028e9 	.word	0x080028e9
 80028bc:	080028fb 	.word	0x080028fb
 80028c0:	0800290d 	.word	0x0800290d
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 80028c4:	7abb      	ldrb	r3, [r7, #10]
 80028c6:	111b      	asrs	r3, r3, #4
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	f003 0301 	and.w	r3, r3, #1
 80028ce:	b2da      	uxtb	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	701a      	strb	r2, [r3, #0]
		break;
 80028d4:	e022      	b.n	800291c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 80028d6:	7abb      	ldrb	r3, [r7, #10]
 80028d8:	10db      	asrs	r3, r3, #3
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	f003 0301 	and.w	r3, r3, #1
 80028e0:	b2da      	uxtb	r2, r3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	701a      	strb	r2, [r3, #0]
		break;
 80028e6:	e019      	b.n	800291c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 80028e8:	7abb      	ldrb	r3, [r7, #10]
 80028ea:	109b      	asrs	r3, r3, #2
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	b2da      	uxtb	r2, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	701a      	strb	r2, [r3, #0]
		break;
 80028f8:	e010      	b.n	800291c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 80028fa:	7abb      	ldrb	r3, [r7, #10]
 80028fc:	119b      	asrs	r3, r3, #6
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	f003 0301 	and.w	r3, r3, #1
 8002904:	b2da      	uxtb	r2, r3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	701a      	strb	r2, [r3, #0]
		break;
 800290a:	e007      	b.n	800291c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 800290c:	7abb      	ldrb	r3, [r7, #10]
 800290e:	09db      	lsrs	r3, r3, #7
 8002910:	b2da      	uxtb	r2, r3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	701a      	strb	r2, [r3, #0]
		break;
 8002916:	e001      	b.n	800291c <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8002918:	23fc      	movs	r3, #252	; 0xfc
 800291a:	75fb      	strb	r3, [r7, #23]
	}

	
	return Status;
 800291c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002920:	4618      	mov	r0, r3
 8002922:	371c      	adds	r7, #28
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr

0800292c <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002936:	2300      	movs	r3, #0
 8002938:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 800293a:	2300      	movs	r3, #0
 800293c:	73bb      	strb	r3, [r7, #14]
	

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800293e:	f107 030e 	add.w	r3, r7, #14
 8002942:	461a      	mov	r2, r3
 8002944:	2101      	movs	r1, #1
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f003 ffa2 	bl	8006890 <VL53L0X_RdByte>
 800294c:	4603      	mov	r3, r0
 800294e:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8002950:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d107      	bne.n	8002968 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 8002958:	7bba      	ldrb	r2, [r7, #14]
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	2100      	movs	r1, #0
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f7ff ff92 	bl	8002888 <sequence_step_enabled>
 8002964:	4603      	mov	r3, r0
 8002966:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8002968:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d108      	bne.n	8002982 <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 8002970:	7bba      	ldrb	r2, [r7, #14]
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	3302      	adds	r3, #2
 8002976:	2101      	movs	r1, #1
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f7ff ff85 	bl	8002888 <sequence_step_enabled>
 800297e:	4603      	mov	r3, r0
 8002980:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8002982:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d108      	bne.n	800299c <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 800298a:	7bba      	ldrb	r2, [r7, #14]
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	3301      	adds	r3, #1
 8002990:	2102      	movs	r1, #2
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f7ff ff78 	bl	8002888 <sequence_step_enabled>
 8002998:	4603      	mov	r3, r0
 800299a:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800299c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d108      	bne.n	80029b6 <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 80029a4:	7bba      	ldrb	r2, [r7, #14]
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	3303      	adds	r3, #3
 80029aa:	2103      	movs	r1, #3
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f7ff ff6b 	bl	8002888 <sequence_step_enabled>
 80029b2:	4603      	mov	r3, r0
 80029b4:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80029b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d108      	bne.n	80029d0 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 80029be:	7bba      	ldrb	r2, [r7, #14]
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	3304      	adds	r3, #4
 80029c4:	2104      	movs	r1, #4
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f7ff ff5e 	bl	8002888 <sequence_step_enabled>
 80029cc:	4603      	mov	r3, r0
 80029ce:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	
	return Status;
 80029d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3710      	adds	r7, #16
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}

080029dc <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80029e6:	2300      	movs	r3, #0
 80029e8:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 80029ea:	f107 030c 	add.w	r3, r7, #12
 80029ee:	461a      	mov	r2, r3
 80029f0:	21f8      	movs	r1, #248	; 0xf8
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f003 ff6b 	bl	80068ce <VL53L0X_RdWord>
 80029f8:	4603      	mov	r3, r0
 80029fa:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 80029fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d108      	bne.n	8002a16 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 8002a04:	f107 0308 	add.w	r3, r7, #8
 8002a08:	461a      	mov	r2, r3
 8002a0a:	2104      	movs	r1, #4
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f003 ff7d 	bl	800690c <VL53L0X_RdDWord>
 8002a12:	4603      	mov	r3, r0
 8002a14:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002a16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d10c      	bne.n	8002a38 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 8002a1e:	89bb      	ldrh	r3, [r7, #12]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d005      	beq.n	8002a30 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	89ba      	ldrh	r2, [r7, #12]
 8002a28:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	
	return Status;
 8002a38:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3710      	adds	r7, #16
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}

08002a44 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b085      	sub	sp, #20
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	7f1b      	ldrb	r3, [r3, #28]
 8002a56:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	7bba      	ldrb	r2, [r7, #14]
 8002a5c:	701a      	strb	r2, [r3, #0]

	
	return Status;
 8002a5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3714      	adds	r7, #20
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr

08002a6e <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 8002a6e:	b580      	push	{r7, lr}
 8002a70:	b086      	sub	sp, #24
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]
 8002a76:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	

	Status = VL53L0X_RdWord(Dev,
 8002a7c:	f107 030e 	add.w	r3, r7, #14
 8002a80:	461a      	mov	r2, r3
 8002a82:	2120      	movs	r1, #32
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f003 ff22 	bl	80068ce <VL53L0X_RdWord>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 8002a8e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d118      	bne.n	8002ac8 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 8002a96:	89fb      	ldrh	r3, [r7, #14]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d109      	bne.n	8002ab0 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6a1b      	ldr	r3, [r3, #32]
 8002aa0:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	693a      	ldr	r2, [r7, #16]
 8002aa6:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	771a      	strb	r2, [r3, #28]
 8002aae:	e00b      	b.n	8002ac8 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8002ab0:	89fb      	ldrh	r3, [r7, #14]
 8002ab2:	00db      	lsls	r3, r3, #3
 8002ab4:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	693a      	ldr	r2, [r7, #16]
 8002aba:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	693a      	ldr	r2, [r7, #16]
 8002ac0:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	
	return Status;
 8002ac8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3718      	adds	r7, #24
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}

08002ad4 <VL53L0X_GetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b087      	sub	sp, #28
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	460b      	mov	r3, r1
 8002ade:	607a      	str	r2, [r7, #4]
 8002ae0:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8002ae6:	897b      	ldrh	r3, [r7, #10]
 8002ae8:	2b05      	cmp	r3, #5
 8002aea:	d905      	bls.n	8002af8 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8002aec:	23fc      	movs	r3, #252	; 0xfc
 8002aee:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2200      	movs	r2, #0
 8002af4:	701a      	strb	r2, [r3, #0]
 8002af6:	e008      	b.n	8002b0a <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8002af8:	897b      	ldrh	r3, [r7, #10]
 8002afa:	68fa      	ldr	r2, [r7, #12]
 8002afc:	4413      	add	r3, r2
 8002afe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002b02:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	7dba      	ldrb	r2, [r7, #22]
 8002b08:	701a      	strb	r2, [r3, #0]
	}

	
	return Status;
 8002b0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	371c      	adds	r7, #28
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
	...

08002b1c <VL53L0X_GetLimitCheckValue>:
	return Status;
}

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b088      	sub	sp, #32
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	60f8      	str	r0, [r7, #12]
 8002b24:	460b      	mov	r3, r1
 8002b26:	607a      	str	r2, [r7, #4]
 8002b28:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	

	switch (LimitCheckId) {
 8002b32:	897b      	ldrh	r3, [r7, #10]
 8002b34:	2b05      	cmp	r3, #5
 8002b36:	d847      	bhi.n	8002bc8 <VL53L0X_GetLimitCheckValue+0xac>
 8002b38:	a201      	add	r2, pc, #4	; (adr r2, 8002b40 <VL53L0X_GetLimitCheckValue+0x24>)
 8002b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b3e:	bf00      	nop
 8002b40:	08002b59 	.word	0x08002b59
 8002b44:	08002b65 	.word	0x08002b65
 8002b48:	08002b8b 	.word	0x08002b8b
 8002b4c:	08002b97 	.word	0x08002b97
 8002b50:	08002ba3 	.word	0x08002ba3
 8002b54:	08002ba3 	.word	0x08002ba3

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b5c:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	77bb      	strb	r3, [r7, #30]
		break;
 8002b62:	e033      	b.n	8002bcc <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8002b64:	f107 0316 	add.w	r3, r7, #22
 8002b68:	461a      	mov	r2, r3
 8002b6a:	2144      	movs	r1, #68	; 0x44
 8002b6c:	68f8      	ldr	r0, [r7, #12]
 8002b6e:	f003 feae 	bl	80068ce <VL53L0X_RdWord>
 8002b72:	4603      	mov	r3, r0
 8002b74:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8002b76:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d102      	bne.n	8002b84 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8002b7e:	8afb      	ldrh	r3, [r7, #22]
 8002b80:	025b      	lsls	r3, r3, #9
 8002b82:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 8002b84:	2301      	movs	r3, #1
 8002b86:	77bb      	strb	r3, [r7, #30]
		break;
 8002b88:	e020      	b.n	8002bcc <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b8e:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8002b90:	2300      	movs	r3, #0
 8002b92:	77bb      	strb	r3, [r7, #30]
		break;
 8002b94:	e01a      	b.n	8002bcc <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9a:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	77bb      	strb	r3, [r7, #30]
		break;
 8002ba0:	e014      	b.n	8002bcc <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8002ba2:	f107 0316 	add.w	r3, r7, #22
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	2164      	movs	r1, #100	; 0x64
 8002baa:	68f8      	ldr	r0, [r7, #12]
 8002bac:	f003 fe8f 	bl	80068ce <VL53L0X_RdWord>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8002bb4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d102      	bne.n	8002bc2 <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8002bbc:	8afb      	ldrh	r3, [r7, #22]
 8002bbe:	025b      	lsls	r3, r3, #9
 8002bc0:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	77bb      	strb	r3, [r7, #30]
		break;
 8002bc6:	e001      	b.n	8002bcc <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8002bc8:	23fc      	movs	r3, #252	; 0xfc
 8002bca:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002bcc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d12a      	bne.n	8002c2a <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 8002bd4:	7fbb      	ldrb	r3, [r7, #30]
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d124      	bne.n	8002c24 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 8002bda:	69bb      	ldr	r3, [r7, #24]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d110      	bne.n	8002c02 <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8002be0:	897b      	ldrh	r3, [r7, #10]
 8002be2:	68fa      	ldr	r2, [r7, #12]
 8002be4:	330c      	adds	r3, #12
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	4413      	add	r3, r2
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	69ba      	ldr	r2, [r7, #24]
 8002bf2:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8002bf4:	897b      	ldrh	r3, [r7, #10]
 8002bf6:	68fa      	ldr	r2, [r7, #12]
 8002bf8:	4413      	add	r3, r2
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8002c00:	e013      	b.n	8002c2a <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	69ba      	ldr	r2, [r7, #24]
 8002c06:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8002c08:	897b      	ldrh	r3, [r7, #10]
 8002c0a:	68fa      	ldr	r2, [r7, #12]
 8002c0c:	330c      	adds	r3, #12
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	4413      	add	r3, r2
 8002c12:	69ba      	ldr	r2, [r7, #24]
 8002c14:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8002c16:	897b      	ldrh	r3, [r7, #10]
 8002c18:	68fa      	ldr	r2, [r7, #12]
 8002c1a:	4413      	add	r3, r2
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8002c22:	e002      	b.n	8002c2a <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	69ba      	ldr	r2, [r7, #24]
 8002c28:	601a      	str	r2, [r3, #0]
		}
	}

	
	return Status;
 8002c2a:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3720      	adds	r7, #32
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop

08002c38 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002c42:	2300      	movs	r3, #0
 8002c44:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8002c46:	f107 030e 	add.w	r3, r7, #14
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	2101      	movs	r1, #1
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f003 fe1e 	bl	8006890 <VL53L0X_RdByte>
 8002c54:	4603      	mov	r3, r0
 8002c56:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 8002c58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d10e      	bne.n	8002c7e <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 8002c60:	7bba      	ldrb	r2, [r7, #14]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 8002c68:	7bbb      	ldrb	r3, [r7, #14]
 8002c6a:	b25b      	sxtb	r3, r3
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	da03      	bge.n	8002c78 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	2201      	movs	r2, #1
 8002c74:	701a      	strb	r2, [r3, #0]
 8002c76:	e002      	b.n	8002c7e <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8002c7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d104      	bne.n	8002c90 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	781a      	ldrb	r2, [r3, #0]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	
	return Status;
 8002c90:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3710      	adds	r7, #16
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8002ca8:	f107 030e 	add.w	r3, r7, #14
 8002cac:	4619      	mov	r1, r3
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f7ff fcda 	bl	8002668 <VL53L0X_GetDeviceMode>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8002cb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d107      	bne.n	8002cd0 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8002cc0:	7bbb      	ldrb	r3, [r7, #14]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d104      	bne.n	8002cd0 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f000 f898 	bl	8002dfc <VL53L0X_StartMeasurement>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8002cd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d104      	bne.n	8002ce2 <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f001 fbef 	bl	80044bc <VL53L0X_measurement_poll_for_completion>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8002ce2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d106      	bne.n	8002cf8 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8002cea:	7bbb      	ldrb	r3, [r7, #14]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d103      	bne.n	8002cf8 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2203      	movs	r2, #3
 8002cf4:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	
	return Status;
 8002cf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3710      	adds	r7, #16
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b086      	sub	sp, #24
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	60b9      	str	r1, [r7, #8]
 8002d0e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002d10:	2300      	movs	r3, #0
 8002d12:	75fb      	strb	r3, [r7, #23]
	

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8002d14:	2301      	movs	r3, #1
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	68b9      	ldr	r1, [r7, #8]
 8002d1a:	68f8      	ldr	r0, [r7, #12]
 8002d1c:	f001 fb91 	bl	8004442 <VL53L0X_perform_ref_calibration>
 8002d20:	4603      	mov	r3, r0
 8002d22:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	
	return Status;
 8002d24:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3718      	adds	r7, #24
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b086      	sub	sp, #24
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	460b      	mov	r3, r1
 8002d3a:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8002d46:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 8002d48:	7dbb      	ldrb	r3, [r7, #22]
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d005      	beq.n	8002d5a <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 8002d4e:	7dbb      	ldrb	r3, [r7, #22]
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d002      	beq.n	8002d5a <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 8002d54:	7dbb      	ldrb	r3, [r7, #22]
 8002d56:	2b03      	cmp	r3, #3
 8002d58:	d147      	bne.n	8002dea <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 8002d5a:	f107 030c 	add.w	r3, r7, #12
 8002d5e:	f107 0210 	add.w	r2, r7, #16
 8002d62:	2101      	movs	r1, #1
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f000 fc09 	bl	800357c <VL53L0X_GetInterruptThresholds>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8002d74:	d803      	bhi.n	8002d7e <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 8002d76:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 8002d78:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8002d7c:	d935      	bls.n	8002dea <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 8002d7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d131      	bne.n	8002dea <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 8002d86:	78fb      	ldrb	r3, [r7, #3]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d006      	beq.n	8002d9a <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 8002d8c:	491a      	ldr	r1, [pc, #104]	; (8002df8 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f002 fd64 	bl	800585c <VL53L0X_load_tuning_settings>
 8002d94:	4603      	mov	r3, r0
 8002d96:	75fb      	strb	r3, [r7, #23]
 8002d98:	e027      	b.n	8002dea <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8002d9a:	2204      	movs	r2, #4
 8002d9c:	21ff      	movs	r1, #255	; 0xff
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f003 fcf8 	bl	8006794 <VL53L0X_WrByte>
 8002da4:	4603      	mov	r3, r0
 8002da6:	461a      	mov	r2, r3
 8002da8:	7dfb      	ldrb	r3, [r7, #23]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8002dae:	2200      	movs	r2, #0
 8002db0:	2170      	movs	r1, #112	; 0x70
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f003 fcee 	bl	8006794 <VL53L0X_WrByte>
 8002db8:	4603      	mov	r3, r0
 8002dba:	461a      	mov	r2, r3
 8002dbc:	7dfb      	ldrb	r3, [r7, #23]
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	21ff      	movs	r1, #255	; 0xff
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f003 fce4 	bl	8006794 <VL53L0X_WrByte>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	461a      	mov	r2, r3
 8002dd0:	7dfb      	ldrb	r3, [r7, #23]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	2180      	movs	r1, #128	; 0x80
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f003 fcda 	bl	8006794 <VL53L0X_WrByte>
 8002de0:	4603      	mov	r3, r0
 8002de2:	461a      	mov	r2, r3
 8002de4:	7dfb      	ldrb	r3, [r7, #23]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 8002dea:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3718      	adds	r7, #24
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	20000114 	.word	0x20000114

08002dfc <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b086      	sub	sp, #24
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002e04:	2300      	movs	r3, #0
 8002e06:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8002e0c:	f107 030e 	add.w	r3, r7, #14
 8002e10:	4619      	mov	r1, r3
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f7ff fc28 	bl	8002668 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 8002e18:	2201      	movs	r2, #1
 8002e1a:	2180      	movs	r1, #128	; 0x80
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	f003 fcb9 	bl	8006794 <VL53L0X_WrByte>
 8002e22:	4603      	mov	r3, r0
 8002e24:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8002e26:	2201      	movs	r2, #1
 8002e28:	21ff      	movs	r1, #255	; 0xff
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f003 fcb2 	bl	8006794 <VL53L0X_WrByte>
 8002e30:	4603      	mov	r3, r0
 8002e32:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 8002e34:	2200      	movs	r2, #0
 8002e36:	2100      	movs	r1, #0
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f003 fcab 	bl	8006794 <VL53L0X_WrByte>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8002e48:	461a      	mov	r2, r3
 8002e4a:	2191      	movs	r1, #145	; 0x91
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f003 fca1 	bl	8006794 <VL53L0X_WrByte>
 8002e52:	4603      	mov	r3, r0
 8002e54:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 8002e56:	2201      	movs	r2, #1
 8002e58:	2100      	movs	r1, #0
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f003 fc9a 	bl	8006794 <VL53L0X_WrByte>
 8002e60:	4603      	mov	r3, r0
 8002e62:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8002e64:	2200      	movs	r2, #0
 8002e66:	21ff      	movs	r1, #255	; 0xff
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f003 fc93 	bl	8006794 <VL53L0X_WrByte>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 8002e72:	2200      	movs	r2, #0
 8002e74:	2180      	movs	r1, #128	; 0x80
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f003 fc8c 	bl	8006794 <VL53L0X_WrByte>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 8002e80:	7bbb      	ldrb	r3, [r7, #14]
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d037      	beq.n	8002ef6 <VL53L0X_StartMeasurement+0xfa>
 8002e86:	2b03      	cmp	r3, #3
 8002e88:	d04f      	beq.n	8002f2a <VL53L0X_StartMeasurement+0x12e>
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d167      	bne.n	8002f5e <VL53L0X_StartMeasurement+0x162>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8002e8e:	2201      	movs	r2, #1
 8002e90:	2100      	movs	r1, #0
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f003 fc7e 	bl	8006794 <VL53L0X_WrByte>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 8002e9c:	7bfb      	ldrb	r3, [r7, #15]
 8002e9e:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 8002ea0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d15d      	bne.n	8002f64 <VL53L0X_StartMeasurement+0x168>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d008      	beq.n	8002ec4 <VL53L0X_StartMeasurement+0xc8>
					Status = VL53L0X_RdByte(Dev,
 8002eb2:	f107 030d 	add.w	r3, r7, #13
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	2100      	movs	r1, #0
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f003 fce8 	bl	8006890 <VL53L0X_RdByte>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	3301      	adds	r3, #1
 8002ec8:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 8002eca:	7b7a      	ldrb	r2, [r7, #13]
 8002ecc:	7bfb      	ldrb	r3, [r7, #15]
 8002ece:	4013      	ands	r3, r2
 8002ed0:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8002ed2:	7bfa      	ldrb	r2, [r7, #15]
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d107      	bne.n	8002ee8 <VL53L0X_StartMeasurement+0xec>
				&& (Status == VL53L0X_ERROR_NONE)
 8002ed8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d103      	bne.n	8002ee8 <VL53L0X_StartMeasurement+0xec>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002ee6:	d3e1      	bcc.n	8002eac <VL53L0X_StartMeasurement+0xb0>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002eee:	d339      	bcc.n	8002f64 <VL53L0X_StartMeasurement+0x168>
				Status = VL53L0X_ERROR_TIME_OUT;
 8002ef0:	23f9      	movs	r3, #249	; 0xf9
 8002ef2:	75fb      	strb	r3, [r7, #23]

		}

		break;
 8002ef4:	e036      	b.n	8002f64 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8002ef6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d105      	bne.n	8002f0a <VL53L0X_StartMeasurement+0x10e>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8002efe:	2101      	movs	r1, #1
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	f7ff ff15 	bl	8002d30 <VL53L0X_CheckAndLoadInterruptSettings>
 8002f06:	4603      	mov	r3, r0
 8002f08:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8002f0a:	2202      	movs	r2, #2
 8002f0c:	2100      	movs	r1, #0
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f003 fc40 	bl	8006794 <VL53L0X_WrByte>
 8002f14:	4603      	mov	r3, r0
 8002f16:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 8002f18:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d123      	bne.n	8002f68 <VL53L0X_StartMeasurement+0x16c>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2204      	movs	r2, #4
 8002f24:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8002f28:	e01e      	b.n	8002f68 <VL53L0X_StartMeasurement+0x16c>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8002f2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d105      	bne.n	8002f3e <VL53L0X_StartMeasurement+0x142>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8002f32:	2101      	movs	r1, #1
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f7ff fefb 	bl	8002d30 <VL53L0X_CheckAndLoadInterruptSettings>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8002f3e:	2204      	movs	r2, #4
 8002f40:	2100      	movs	r1, #0
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f003 fc26 	bl	8006794 <VL53L0X_WrByte>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 8002f4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d10b      	bne.n	8002f6c <VL53L0X_StartMeasurement+0x170>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2204      	movs	r2, #4
 8002f58:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8002f5c:	e006      	b.n	8002f6c <VL53L0X_StartMeasurement+0x170>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8002f5e:	23f8      	movs	r3, #248	; 0xf8
 8002f60:	75fb      	strb	r3, [r7, #23]
 8002f62:	e004      	b.n	8002f6e <VL53L0X_StartMeasurement+0x172>
		break;
 8002f64:	bf00      	nop
 8002f66:	e002      	b.n	8002f6e <VL53L0X_StartMeasurement+0x172>
		break;
 8002f68:	bf00      	nop
 8002f6a:	e000      	b.n	8002f6e <VL53L0X_StartMeasurement+0x172>
		break;
 8002f6c:	bf00      	nop
	}


	
	return Status;
 8002f6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3718      	adds	r7, #24
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}

08002f7a <VL53L0X_StopMeasurement>:

VL53L0X_Error VL53L0X_StopMeasurement(VL53L0X_DEV Dev)
{
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	b084      	sub	sp, #16
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002f82:	2300      	movs	r3, #0
 8002f84:	73fb      	strb	r3, [r7, #15]
	

	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 8002f86:	2200      	movs	r2, #0
 8002f88:	2100      	movs	r1, #0
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f003 fc02 	bl	8006794 <VL53L0X_WrByte>
 8002f90:	4603      	mov	r3, r0
 8002f92:	73fb      	strb	r3, [r7, #15]
	VL53L0X_REG_SYSRANGE_MODE_SINGLESHOT);

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8002f94:	2201      	movs	r2, #1
 8002f96:	21ff      	movs	r1, #255	; 0xff
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f003 fbfb 	bl	8006794 <VL53L0X_WrByte>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	73fb      	strb	r3, [r7, #15]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	2100      	movs	r1, #0
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f003 fbf4 	bl	8006794 <VL53L0X_WrByte>
 8002fac:	4603      	mov	r3, r0
 8002fae:	73fb      	strb	r3, [r7, #15]
	Status = VL53L0X_WrByte(Dev, 0x91, 0x00);
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	2191      	movs	r1, #145	; 0x91
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f003 fbed 	bl	8006794 <VL53L0X_WrByte>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	73fb      	strb	r3, [r7, #15]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	2100      	movs	r1, #0
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f003 fbe6 	bl	8006794 <VL53L0X_WrByte>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	73fb      	strb	r3, [r7, #15]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8002fcc:	2200      	movs	r2, #0
 8002fce:	21ff      	movs	r1, #255	; 0xff
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f003 fbdf 	bl	8006794 <VL53L0X_WrByte>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE) {
 8002fda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d103      	bne.n	8002fea <VL53L0X_StopMeasurement+0x70>
		/* Set PAL State to Idle */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2203      	movs	r2, #3
 8002fe6:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	/* Check if need to apply interrupt settings */
	if (Status == VL53L0X_ERROR_NONE)
 8002fea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d105      	bne.n	8002ffe <VL53L0X_StopMeasurement+0x84>
		Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 0);
 8002ff2:	2100      	movs	r1, #0
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f7ff fe9b 	bl	8002d30 <VL53L0X_CheckAndLoadInterruptSettings>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	73fb      	strb	r3, [r7, #15]

	
	return Status;
 8002ffe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003002:	4618      	mov	r0, r3
 8003004:	3710      	adds	r7, #16
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}

0800300a <VL53L0X_GetMeasurementDataReady>:

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 800300a:	b580      	push	{r7, lr}
 800300c:	b084      	sub	sp, #16
 800300e:	af00      	add	r7, sp, #0
 8003010:	6078      	str	r0, [r7, #4]
 8003012:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003014:	2300      	movs	r3, #0
 8003016:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 800301e:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 8003020:	7bbb      	ldrb	r3, [r7, #14]
 8003022:	2b04      	cmp	r3, #4
 8003024:	d112      	bne.n	800304c <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8003026:	f107 0308 	add.w	r3, r7, #8
 800302a:	4619      	mov	r1, r3
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f000 fb84 	bl	800373a <VL53L0X_GetInterruptMaskStatus>
 8003032:	4603      	mov	r3, r0
 8003034:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	2b04      	cmp	r3, #4
 800303a:	d103      	bne.n	8003044 <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	2201      	movs	r2, #1
 8003040:	701a      	strb	r2, [r3, #0]
 8003042:	e01c      	b.n	800307e <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	2200      	movs	r2, #0
 8003048:	701a      	strb	r2, [r3, #0]
 800304a:	e018      	b.n	800307e <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 800304c:	f107 030d 	add.w	r3, r7, #13
 8003050:	461a      	mov	r2, r3
 8003052:	2114      	movs	r1, #20
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f003 fc1b 	bl	8006890 <VL53L0X_RdByte>
 800305a:	4603      	mov	r3, r0
 800305c:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 800305e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d10b      	bne.n	800307e <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 8003066:	7b7b      	ldrb	r3, [r7, #13]
 8003068:	f003 0301 	and.w	r3, r3, #1
 800306c:	2b00      	cmp	r3, #0
 800306e:	d003      	beq.n	8003078 <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	2201      	movs	r2, #1
 8003074:	701a      	strb	r2, [r3, #0]
 8003076:	e002      	b.n	800307e <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	2200      	movs	r2, #0
 800307c:	701a      	strb	r2, [r3, #0]
		}
	}

	
	return Status;
 800307e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003082:	4618      	mov	r0, r3
 8003084:	3710      	adds	r7, #16
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
	...

0800308c <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800308c:	b5b0      	push	{r4, r5, r7, lr}
 800308e:	b096      	sub	sp, #88	; 0x58
 8003090:	af02      	add	r7, sp, #8
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003096:	2300      	movs	r3, #0
 8003098:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 800309c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80030a0:	230c      	movs	r3, #12
 80030a2:	2114      	movs	r1, #20
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f003 fb50 	bl	800674a <VL53L0X_ReadMulti>
 80030aa:	4603      	mov	r3, r0
 80030ac:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 80030b0:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	f040 80d2 	bne.w	800325e <VL53L0X_GetRangingMeasurementData+0x1d2>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	2200      	movs	r2, #0
 80030be:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	2200      	movs	r2, #0
 80030c4:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 80030c6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	021b      	lsls	r3, r3, #8
 80030ce:	b29a      	uxth	r2, r3
 80030d0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	4413      	add	r3, r2
 80030d8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	2200      	movs	r2, #0
 80030e0:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 80030e2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	021b      	lsls	r3, r3, #8
 80030ea:	b29a      	uxth	r2, r3
 80030ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	4413      	add	r3, r2
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	025b      	lsls	r3, r3, #9
 80030f8:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80030fe:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8003100:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003104:	b29b      	uxth	r3, r3
 8003106:	021b      	lsls	r3, r3, #8
 8003108:	b29a      	uxth	r2, r3
 800310a:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800310e:	b29b      	uxth	r3, r3
 8003110:	4413      	add	r3, r2
 8003112:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 8003116:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800311a:	025b      	lsls	r3, r3, #9
 800311c:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8003122:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8003126:	b29b      	uxth	r3, r3
 8003128:	021b      	lsls	r3, r3, #8
 800312a:	b29a      	uxth	r2, r3
 800312c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003130:	b29b      	uxth	r3, r3
 8003132:	4413      	add	r3, r2
 8003134:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800313e:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 8003140:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003144:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 800314e:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8003156:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 800315a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800315c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003160:	d047      	beq.n	80031f2 <VL53L0X_GetRangingMeasurementData+0x166>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 8003162:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003164:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8003168:	fb02 f303 	mul.w	r3, r2, r3
 800316c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8003170:	4a58      	ldr	r2, [pc, #352]	; (80032d4 <VL53L0X_GetRangingMeasurementData+0x248>)
 8003172:	fb82 1203 	smull	r1, r2, r2, r3
 8003176:	1192      	asrs	r2, r2, #6
 8003178:	17db      	asrs	r3, r3, #31
 800317a:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 800317c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6a1b      	ldr	r3, [r3, #32]
 8003184:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	7f1b      	ldrb	r3, [r3, #28]
 800318a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 800318e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003192:	2b00      	cmp	r3, #0
 8003194:	d02d      	beq.n	80031f2 <VL53L0X_GetRangingMeasurementData+0x166>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 8003196:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003198:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800319c:	fb02 f303 	mul.w	r3, r2, r3
 80031a0:	121b      	asrs	r3, r3, #8
 80031a2:	461a      	mov	r2, r3
				if ((SignalRate
 80031a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d10d      	bne.n	80031c6 <VL53L0X_GetRangingMeasurementData+0x13a>
					<= 0) {
					if (RangeFractionalEnable)
 80031aa:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d004      	beq.n	80031bc <VL53L0X_GetRangingMeasurementData+0x130>
						XtalkRangeMilliMeter = 8888;
 80031b2:	f242 23b8 	movw	r3, #8888	; 0x22b8
 80031b6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80031ba:	e016      	b.n	80031ea <VL53L0X_GetRangingMeasurementData+0x15e>
					else
						XtalkRangeMilliMeter = 8888
 80031bc:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 80031c0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80031c4:	e011      	b.n	80031ea <VL53L0X_GetRangingMeasurementData+0x15e>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 80031c6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80031ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80031cc:	fb02 f203 	mul.w	r2, r2, r3
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 80031d0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80031d2:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 80031d6:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 80031da:	121b      	asrs	r3, r3, #8
 80031dc:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 80031de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031e0:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 80031e2:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 80031e6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 80031ea:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80031ee:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 80031f2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d00d      	beq.n	8003216 <VL53L0X_GetRangingMeasurementData+0x18a>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 80031fa:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80031fe:	089b      	lsrs	r3, r3, #2
 8003200:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 8003206:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800320a:	b2db      	uxtb	r3, r3
 800320c:	019b      	lsls	r3, r3, #6
 800320e:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	75da      	strb	r2, [r3, #23]
 8003214:	e006      	b.n	8003224 <VL53L0X_GetRangingMeasurementData+0x198>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800321c:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	2200      	movs	r2, #0
 8003222:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 8003224:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8003228:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 800322c:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8003230:	9301      	str	r3, [sp, #4]
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	9300      	str	r3, [sp, #0]
 8003236:	4613      	mov	r3, r2
 8003238:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f002 ffb6 	bl	80061ac <VL53L0X_get_pal_range_status>
 8003240:	4603      	mov	r3, r0
 8003242:	461a      	mov	r2, r3
 8003244:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003248:	4313      	orrs	r3, r2
 800324a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 800324e:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8003252:	2b00      	cmp	r3, #0
 8003254:	d103      	bne.n	800325e <VL53L0X_GetRangingMeasurementData+0x1d2>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 8003256:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800325e:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8003262:	2b00      	cmp	r3, #0
 8003264:	d12f      	bne.n	80032c6 <VL53L0X_GetRangingMeasurementData+0x23a>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f107 040c 	add.w	r4, r7, #12
 800326c:	f103 0550 	add.w	r5, r3, #80	; 0x50
 8003270:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003272:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003274:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003278:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 8003280:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 8003286:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 800328e:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 8003294:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 800329a:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 80032a0:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 80032a6:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 80032ac:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	f103 0450 	add.w	r4, r3, #80	; 0x50
 80032b6:	f107 050c 	add.w	r5, r7, #12
 80032ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80032bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80032be:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80032c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	
	return Status;
 80032c6:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3750      	adds	r7, #80	; 0x50
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bdb0      	pop	{r4, r5, r7, pc}
 80032d2:	bf00      	nop
 80032d4:	10624dd3 	.word	0x10624dd3

080032d8 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80032e2:	2300      	movs	r3, #0
 80032e4:	73fb      	strb	r3, [r7, #15]

	

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 80032e6:	2100      	movs	r1, #0
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f7ff f975 	bl	80025d8 <VL53L0X_SetDeviceMode>
 80032ee:	4603      	mov	r3, r0
 80032f0:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80032f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d104      	bne.n	8003304 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f7ff fcce 	bl	8002c9c <VL53L0X_PerformSingleMeasurement>
 8003300:	4603      	mov	r3, r0
 8003302:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8003304:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d105      	bne.n	8003318 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 800330c:	6839      	ldr	r1, [r7, #0]
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f7ff febc 	bl	800308c <VL53L0X_GetRangingMeasurementData>
 8003314:	4603      	mov	r3, r0
 8003316:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 8003318:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d105      	bne.n	800332c <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8003320:	2100      	movs	r1, #0
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f000 f9c9 	bl	80036ba <VL53L0X_ClearInterruptMask>
 8003328:	4603      	mov	r3, r0
 800332a:	73fb      	strb	r3, [r7, #15]


	
	return Status;
 800332c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003330:	4618      	mov	r0, r3
 8003332:	3710      	adds	r7, #16
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}

08003338 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	4608      	mov	r0, r1
 8003342:	4611      	mov	r1, r2
 8003344:	461a      	mov	r2, r3
 8003346:	4603      	mov	r3, r0
 8003348:	70fb      	strb	r3, [r7, #3]
 800334a:	460b      	mov	r3, r1
 800334c:	70bb      	strb	r3, [r7, #2]
 800334e:	4613      	mov	r3, r2
 8003350:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003352:	2300      	movs	r3, #0
 8003354:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	

	if (Pin != 0) {
 8003356:	78fb      	ldrb	r3, [r7, #3]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d002      	beq.n	8003362 <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 800335c:	23f6      	movs	r3, #246	; 0xf6
 800335e:	73fb      	strb	r3, [r7, #15]
 8003360:	e105      	b.n	800356e <VL53L0X_SetGpioConfig+0x236>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 8003362:	78bb      	ldrb	r3, [r7, #2]
 8003364:	2b14      	cmp	r3, #20
 8003366:	d110      	bne.n	800338a <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8003368:	7e3b      	ldrb	r3, [r7, #24]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d102      	bne.n	8003374 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 800336e:	2310      	movs	r3, #16
 8003370:	73bb      	strb	r3, [r7, #14]
 8003372:	e001      	b.n	8003378 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 8003374:	2301      	movs	r3, #1
 8003376:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 8003378:	7bbb      	ldrb	r3, [r7, #14]
 800337a:	461a      	mov	r2, r3
 800337c:	2184      	movs	r1, #132	; 0x84
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f003 fa08 	bl	8006794 <VL53L0X_WrByte>
 8003384:	4603      	mov	r3, r0
 8003386:	73fb      	strb	r3, [r7, #15]
 8003388:	e0f1      	b.n	800356e <VL53L0X_SetGpioConfig+0x236>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 800338a:	78bb      	ldrb	r3, [r7, #2]
 800338c:	2b15      	cmp	r3, #21
 800338e:	f040 8097 	bne.w	80034c0 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8003392:	2201      	movs	r2, #1
 8003394:	21ff      	movs	r1, #255	; 0xff
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f003 f9fc 	bl	8006794 <VL53L0X_WrByte>
 800339c:	4603      	mov	r3, r0
 800339e:	461a      	mov	r2, r3
 80033a0:	7bfb      	ldrb	r3, [r7, #15]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80033a6:	2200      	movs	r2, #0
 80033a8:	2100      	movs	r1, #0
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f003 f9f2 	bl	8006794 <VL53L0X_WrByte>
 80033b0:	4603      	mov	r3, r0
 80033b2:	461a      	mov	r2, r3
 80033b4:	7bfb      	ldrb	r3, [r7, #15]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80033ba:	2200      	movs	r2, #0
 80033bc:	21ff      	movs	r1, #255	; 0xff
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f003 f9e8 	bl	8006794 <VL53L0X_WrByte>
 80033c4:	4603      	mov	r3, r0
 80033c6:	461a      	mov	r2, r3
 80033c8:	7bfb      	ldrb	r3, [r7, #15]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80033ce:	2201      	movs	r2, #1
 80033d0:	2180      	movs	r1, #128	; 0x80
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f003 f9de 	bl	8006794 <VL53L0X_WrByte>
 80033d8:	4603      	mov	r3, r0
 80033da:	461a      	mov	r2, r3
 80033dc:	7bfb      	ldrb	r3, [r7, #15]
 80033de:	4313      	orrs	r3, r2
 80033e0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 80033e2:	2202      	movs	r2, #2
 80033e4:	2185      	movs	r1, #133	; 0x85
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f003 f9d4 	bl	8006794 <VL53L0X_WrByte>
 80033ec:	4603      	mov	r3, r0
 80033ee:	461a      	mov	r2, r3
 80033f0:	7bfb      	ldrb	r3, [r7, #15]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 80033f6:	2204      	movs	r2, #4
 80033f8:	21ff      	movs	r1, #255	; 0xff
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f003 f9ca 	bl	8006794 <VL53L0X_WrByte>
 8003400:	4603      	mov	r3, r0
 8003402:	461a      	mov	r2, r3
 8003404:	7bfb      	ldrb	r3, [r7, #15]
 8003406:	4313      	orrs	r3, r2
 8003408:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 800340a:	2200      	movs	r2, #0
 800340c:	21cd      	movs	r1, #205	; 0xcd
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f003 f9c0 	bl	8006794 <VL53L0X_WrByte>
 8003414:	4603      	mov	r3, r0
 8003416:	461a      	mov	r2, r3
 8003418:	7bfb      	ldrb	r3, [r7, #15]
 800341a:	4313      	orrs	r3, r2
 800341c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 800341e:	2211      	movs	r2, #17
 8003420:	21cc      	movs	r1, #204	; 0xcc
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f003 f9b6 	bl	8006794 <VL53L0X_WrByte>
 8003428:	4603      	mov	r3, r0
 800342a:	461a      	mov	r2, r3
 800342c:	7bfb      	ldrb	r3, [r7, #15]
 800342e:	4313      	orrs	r3, r2
 8003430:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 8003432:	2207      	movs	r2, #7
 8003434:	21ff      	movs	r1, #255	; 0xff
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f003 f9ac 	bl	8006794 <VL53L0X_WrByte>
 800343c:	4603      	mov	r3, r0
 800343e:	461a      	mov	r2, r3
 8003440:	7bfb      	ldrb	r3, [r7, #15]
 8003442:	4313      	orrs	r3, r2
 8003444:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 8003446:	2200      	movs	r2, #0
 8003448:	21be      	movs	r1, #190	; 0xbe
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f003 f9a2 	bl	8006794 <VL53L0X_WrByte>
 8003450:	4603      	mov	r3, r0
 8003452:	461a      	mov	r2, r3
 8003454:	7bfb      	ldrb	r3, [r7, #15]
 8003456:	4313      	orrs	r3, r2
 8003458:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 800345a:	2206      	movs	r2, #6
 800345c:	21ff      	movs	r1, #255	; 0xff
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f003 f998 	bl	8006794 <VL53L0X_WrByte>
 8003464:	4603      	mov	r3, r0
 8003466:	461a      	mov	r2, r3
 8003468:	7bfb      	ldrb	r3, [r7, #15]
 800346a:	4313      	orrs	r3, r2
 800346c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 800346e:	2209      	movs	r2, #9
 8003470:	21cc      	movs	r1, #204	; 0xcc
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f003 f98e 	bl	8006794 <VL53L0X_WrByte>
 8003478:	4603      	mov	r3, r0
 800347a:	461a      	mov	r2, r3
 800347c:	7bfb      	ldrb	r3, [r7, #15]
 800347e:	4313      	orrs	r3, r2
 8003480:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8003482:	2200      	movs	r2, #0
 8003484:	21ff      	movs	r1, #255	; 0xff
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f003 f984 	bl	8006794 <VL53L0X_WrByte>
 800348c:	4603      	mov	r3, r0
 800348e:	461a      	mov	r2, r3
 8003490:	7bfb      	ldrb	r3, [r7, #15]
 8003492:	4313      	orrs	r3, r2
 8003494:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8003496:	2201      	movs	r2, #1
 8003498:	21ff      	movs	r1, #255	; 0xff
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f003 f97a 	bl	8006794 <VL53L0X_WrByte>
 80034a0:	4603      	mov	r3, r0
 80034a2:	461a      	mov	r2, r3
 80034a4:	7bfb      	ldrb	r3, [r7, #15]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80034aa:	2200      	movs	r2, #0
 80034ac:	2100      	movs	r1, #0
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f003 f970 	bl	8006794 <VL53L0X_WrByte>
 80034b4:	4603      	mov	r3, r0
 80034b6:	461a      	mov	r2, r3
 80034b8:	7bfb      	ldrb	r3, [r7, #15]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	73fb      	strb	r3, [r7, #15]
 80034be:	e056      	b.n	800356e <VL53L0X_SetGpioConfig+0x236>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 80034c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d120      	bne.n	800350a <VL53L0X_SetGpioConfig+0x1d2>
			switch (Functionality) {
 80034c8:	787b      	ldrb	r3, [r7, #1]
 80034ca:	2b04      	cmp	r3, #4
 80034cc:	d81b      	bhi.n	8003506 <VL53L0X_SetGpioConfig+0x1ce>
 80034ce:	a201      	add	r2, pc, #4	; (adr r2, 80034d4 <VL53L0X_SetGpioConfig+0x19c>)
 80034d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034d4:	080034e9 	.word	0x080034e9
 80034d8:	080034ef 	.word	0x080034ef
 80034dc:	080034f5 	.word	0x080034f5
 80034e0:	080034fb 	.word	0x080034fb
 80034e4:	08003501 	.word	0x08003501
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 80034e8:	2300      	movs	r3, #0
 80034ea:	73bb      	strb	r3, [r7, #14]
				break;
 80034ec:	e00d      	b.n	800350a <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 80034ee:	2301      	movs	r3, #1
 80034f0:	73bb      	strb	r3, [r7, #14]
				break;
 80034f2:	e00a      	b.n	800350a <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 80034f4:	2302      	movs	r3, #2
 80034f6:	73bb      	strb	r3, [r7, #14]
				break;
 80034f8:	e007      	b.n	800350a <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 80034fa:	2303      	movs	r3, #3
 80034fc:	73bb      	strb	r3, [r7, #14]
				break;
 80034fe:	e004      	b.n	800350a <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 8003500:	2304      	movs	r3, #4
 8003502:	73bb      	strb	r3, [r7, #14]
				break;
 8003504:	e001      	b.n	800350a <VL53L0X_SetGpioConfig+0x1d2>
			default:
				Status =
 8003506:	23f5      	movs	r3, #245	; 0xf5
 8003508:	73fb      	strb	r3, [r7, #15]
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}

		if (Status == VL53L0X_ERROR_NONE)
 800350a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d107      	bne.n	8003522 <VL53L0X_SetGpioConfig+0x1ea>
			Status = VL53L0X_WrByte(Dev,
 8003512:	7bbb      	ldrb	r3, [r7, #14]
 8003514:	461a      	mov	r2, r3
 8003516:	210a      	movs	r1, #10
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f003 f93b 	bl	8006794 <VL53L0X_WrByte>
 800351e:	4603      	mov	r3, r0
 8003520:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 8003522:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d10f      	bne.n	800354a <VL53L0X_SetGpioConfig+0x212>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800352a:	7e3b      	ldrb	r3, [r7, #24]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d102      	bne.n	8003536 <VL53L0X_SetGpioConfig+0x1fe>
				data = 0;
 8003530:	2300      	movs	r3, #0
 8003532:	73bb      	strb	r3, [r7, #14]
 8003534:	e001      	b.n	800353a <VL53L0X_SetGpioConfig+0x202>
			else
				data = (uint8_t)(1 << 4);
 8003536:	2310      	movs	r3, #16
 8003538:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 800353a:	7bbb      	ldrb	r3, [r7, #14]
 800353c:	22ef      	movs	r2, #239	; 0xef
 800353e:	2184      	movs	r1, #132	; 0x84
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f003 f967 	bl	8006814 <VL53L0X_UpdateByte>
 8003546:	4603      	mov	r3, r0
 8003548:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 800354a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d103      	bne.n	800355a <VL53L0X_SetGpioConfig+0x222>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	787a      	ldrb	r2, [r7, #1]
 8003556:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 800355a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d105      	bne.n	800356e <VL53L0X_SetGpioConfig+0x236>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8003562:	2100      	movs	r1, #0
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f000 f8a8 	bl	80036ba <VL53L0X_ClearInterruptMask>
 800356a:	4603      	mov	r3, r0
 800356c:	73fb      	strb	r3, [r7, #15]

	}

	
	return Status;
 800356e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003572:	4618      	mov	r0, r3
 8003574:	3710      	adds	r7, #16
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop

0800357c <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b086      	sub	sp, #24
 8003580:	af00      	add	r7, sp, #0
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	607a      	str	r2, [r7, #4]
 8003586:	603b      	str	r3, [r7, #0]
 8003588:	460b      	mov	r3, r1
 800358a:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800358c:	2300      	movs	r3, #0
 800358e:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 8003590:	f107 0314 	add.w	r3, r7, #20
 8003594:	461a      	mov	r2, r3
 8003596:	210e      	movs	r1, #14
 8003598:	68f8      	ldr	r0, [r7, #12]
 800359a:	f003 f998 	bl	80068ce <VL53L0X_RdWord>
 800359e:	4603      	mov	r3, r0
 80035a0:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 80035a2:	8abb      	ldrh	r3, [r7, #20]
 80035a4:	045b      	lsls	r3, r3, #17
 80035a6:	461a      	mov	r2, r3
 80035a8:	4b0e      	ldr	r3, [pc, #56]	; (80035e4 <VL53L0X_GetInterruptThresholds+0x68>)
 80035aa:	4013      	ands	r3, r2
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 80035b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d10f      	bne.n	80035d8 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 80035b8:	f107 0314 	add.w	r3, r7, #20
 80035bc:	461a      	mov	r2, r3
 80035be:	210c      	movs	r1, #12
 80035c0:	68f8      	ldr	r0, [r7, #12]
 80035c2:	f003 f984 	bl	80068ce <VL53L0X_RdWord>
 80035c6:	4603      	mov	r3, r0
 80035c8:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 80035ca:	8abb      	ldrh	r3, [r7, #20]
 80035cc:	045b      	lsls	r3, r3, #17
 80035ce:	461a      	mov	r2, r3
 80035d0:	4b04      	ldr	r3, [pc, #16]	; (80035e4 <VL53L0X_GetInterruptThresholds+0x68>)
 80035d2:	4013      	ands	r3, r2
		*pThresholdHigh =
 80035d4:	683a      	ldr	r2, [r7, #0]
 80035d6:	6013      	str	r3, [r2, #0]
	}

	
	return Status;
 80035d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3718      	adds	r7, #24
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	1ffe0000 	.word	0x1ffe0000

080035e8 <VL53L0X_GetStopCompletedStatus>:

VL53L0X_Error VL53L0X_GetStopCompletedStatus(VL53L0X_DEV Dev,
	uint32_t *pStopStatus)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b084      	sub	sp, #16
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80035f2:	2300      	movs	r3, #0
 80035f4:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte = 0;
 80035f6:	2300      	movs	r3, #0
 80035f8:	73bb      	strb	r3, [r7, #14]
	

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80035fa:	2201      	movs	r2, #1
 80035fc:	21ff      	movs	r1, #255	; 0xff
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f003 f8c8 	bl	8006794 <VL53L0X_WrByte>
 8003604:	4603      	mov	r3, r0
 8003606:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8003608:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d108      	bne.n	8003622 <VL53L0X_GetStopCompletedStatus+0x3a>
		Status = VL53L0X_RdByte(Dev, 0x04, &Byte);
 8003610:	f107 030e 	add.w	r3, r7, #14
 8003614:	461a      	mov	r2, r3
 8003616:	2104      	movs	r1, #4
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f003 f939 	bl	8006890 <VL53L0X_RdByte>
 800361e:	4603      	mov	r3, r0
 8003620:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8003622:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d106      	bne.n	8003638 <VL53L0X_GetStopCompletedStatus+0x50>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x0);
 800362a:	2200      	movs	r2, #0
 800362c:	21ff      	movs	r1, #255	; 0xff
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f003 f8b0 	bl	8006794 <VL53L0X_WrByte>
 8003634:	4603      	mov	r3, r0
 8003636:	73fb      	strb	r3, [r7, #15]

	*pStopStatus = Byte;
 8003638:	7bbb      	ldrb	r3, [r7, #14]
 800363a:	461a      	mov	r2, r3
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	601a      	str	r2, [r3, #0]

	if (Byte == 0) {
 8003640:	7bbb      	ldrb	r3, [r7, #14]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d133      	bne.n	80036ae <VL53L0X_GetStopCompletedStatus+0xc6>
		Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 8003646:	2201      	movs	r2, #1
 8003648:	2180      	movs	r1, #128	; 0x80
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f003 f8a2 	bl	8006794 <VL53L0X_WrByte>
 8003650:	4603      	mov	r3, r0
 8003652:	73fb      	strb	r3, [r7, #15]
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003654:	2201      	movs	r2, #1
 8003656:	21ff      	movs	r1, #255	; 0xff
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f003 f89b 	bl	8006794 <VL53L0X_WrByte>
 800365e:	4603      	mov	r3, r0
 8003660:	73fb      	strb	r3, [r7, #15]
		Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 8003662:	2200      	movs	r2, #0
 8003664:	2100      	movs	r1, #0
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f003 f894 	bl	8006794 <VL53L0X_WrByte>
 800366c:	4603      	mov	r3, r0
 800366e:	73fb      	strb	r3, [r7, #15]
		Status = VL53L0X_WrByte(Dev, 0x91,
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8003676:	461a      	mov	r2, r3
 8003678:	2191      	movs	r1, #145	; 0x91
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f003 f88a 	bl	8006794 <VL53L0X_WrByte>
 8003680:	4603      	mov	r3, r0
 8003682:	73fb      	strb	r3, [r7, #15]
			PALDevDataGet(Dev, StopVariable));
		Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 8003684:	2201      	movs	r2, #1
 8003686:	2100      	movs	r1, #0
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f003 f883 	bl	8006794 <VL53L0X_WrByte>
 800368e:	4603      	mov	r3, r0
 8003690:	73fb      	strb	r3, [r7, #15]
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003692:	2200      	movs	r2, #0
 8003694:	21ff      	movs	r1, #255	; 0xff
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f003 f87c 	bl	8006794 <VL53L0X_WrByte>
 800369c:	4603      	mov	r3, r0
 800369e:	73fb      	strb	r3, [r7, #15]
		Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 80036a0:	2200      	movs	r2, #0
 80036a2:	2180      	movs	r1, #128	; 0x80
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f003 f875 	bl	8006794 <VL53L0X_WrByte>
 80036aa:	4603      	mov	r3, r0
 80036ac:	73fb      	strb	r3, [r7, #15]
	}

	
	return Status;
 80036ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3710      	adds	r7, #16
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}

080036ba <VL53L0X_ClearInterruptMask>:

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 80036ba:	b580      	push	{r7, lr}
 80036bc:	b084      	sub	sp, #16
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
 80036c2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80036c4:	2300      	movs	r3, #0
 80036c6:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 80036c8:	2300      	movs	r3, #0
 80036ca:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 80036cc:	2201      	movs	r2, #1
 80036ce:	210b      	movs	r1, #11
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f003 f85f 	bl	8006794 <VL53L0X_WrByte>
 80036d6:	4603      	mov	r3, r0
 80036d8:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 80036da:	2200      	movs	r2, #0
 80036dc:	210b      	movs	r1, #11
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f003 f858 	bl	8006794 <VL53L0X_WrByte>
 80036e4:	4603      	mov	r3, r0
 80036e6:	461a      	mov	r2, r3
 80036e8:	7bfb      	ldrb	r3, [r7, #15]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 80036ee:	f107 030d 	add.w	r3, r7, #13
 80036f2:	461a      	mov	r2, r3
 80036f4:	2113      	movs	r1, #19
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f003 f8ca 	bl	8006890 <VL53L0X_RdByte>
 80036fc:	4603      	mov	r3, r0
 80036fe:	461a      	mov	r2, r3
 8003700:	7bfb      	ldrb	r3, [r7, #15]
 8003702:	4313      	orrs	r3, r2
 8003704:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 8003706:	7bbb      	ldrb	r3, [r7, #14]
 8003708:	3301      	adds	r3, #1
 800370a:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 800370c:	7b7b      	ldrb	r3, [r7, #13]
 800370e:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 8003712:	2b00      	cmp	r3, #0
 8003714:	d006      	beq.n	8003724 <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 8003716:	7bbb      	ldrb	r3, [r7, #14]
 8003718:	2b02      	cmp	r3, #2
 800371a:	d803      	bhi.n	8003724 <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 800371c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d0d3      	beq.n	80036cc <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 8003724:	7bbb      	ldrb	r3, [r7, #14]
 8003726:	2b02      	cmp	r3, #2
 8003728:	d901      	bls.n	800372e <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 800372a:	23f4      	movs	r3, #244	; 0xf4
 800372c:	73fb      	strb	r3, [r7, #15]

	
	return Status;
 800372e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003732:	4618      	mov	r0, r3
 8003734:	3710      	adds	r7, #16
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}

0800373a <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 800373a:	b580      	push	{r7, lr}
 800373c:	b084      	sub	sp, #16
 800373e:	af00      	add	r7, sp, #0
 8003740:	6078      	str	r0, [r7, #4]
 8003742:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003744:	2300      	movs	r3, #0
 8003746:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 8003748:	f107 030e 	add.w	r3, r7, #14
 800374c:	461a      	mov	r2, r3
 800374e:	2113      	movs	r1, #19
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f003 f89d 	bl	8006890 <VL53L0X_RdByte>
 8003756:	4603      	mov	r3, r0
 8003758:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 800375a:	7bbb      	ldrb	r3, [r7, #14]
 800375c:	f003 0207 	and.w	r2, r3, #7
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 8003764:	7bbb      	ldrb	r3, [r7, #14]
 8003766:	f003 0318 	and.w	r3, r3, #24
 800376a:	2b00      	cmp	r3, #0
 800376c:	d001      	beq.n	8003772 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 800376e:	23fa      	movs	r3, #250	; 0xfa
 8003770:	73fb      	strb	r3, [r7, #15]

	
	return Status;
 8003772:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003776:	4618      	mov	r0, r3
 8003778:	3710      	adds	r7, #16
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}

0800377e <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 800377e:	b580      	push	{r7, lr}
 8003780:	b086      	sub	sp, #24
 8003782:	af00      	add	r7, sp, #0
 8003784:	60f8      	str	r0, [r7, #12]
 8003786:	60b9      	str	r1, [r7, #8]
 8003788:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800378a:	2300      	movs	r3, #0
 800378c:	75fb      	strb	r3, [r7, #23]
	

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	68b9      	ldr	r1, [r7, #8]
 8003792:	68f8      	ldr	r0, [r7, #12]
 8003794:	f000 fa04 	bl	8003ba0 <VL53L0X_perform_ref_spad_management>
 8003798:	4603      	mov	r3, r0
 800379a:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	

	return Status;
 800379c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3718      	adds	r7, #24
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}

080037a8 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80037b2:	2300      	movs	r3, #0
 80037b4:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 80037b6:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80037ba:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 80037bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037c0:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 80037c2:	f107 0308 	add.w	r3, r7, #8
 80037c6:	461a      	mov	r2, r3
 80037c8:	2128      	movs	r1, #40	; 0x28
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f003 f87f 	bl	80068ce <VL53L0X_RdWord>
 80037d0:	4603      	mov	r3, r0
 80037d2:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 80037d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d11e      	bne.n	800381a <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 80037dc:	893b      	ldrh	r3, [r7, #8]
 80037de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 80037e6:	893b      	ldrh	r3, [r7, #8]
 80037e8:	461a      	mov	r2, r3
 80037ea:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80037ee:	429a      	cmp	r2, r3
 80037f0:	dd0b      	ble.n	800380a <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 80037f2:	893a      	ldrh	r2, [r7, #8]
 80037f4:	897b      	ldrh	r3, [r7, #10]
 80037f6:	1ad3      	subs	r3, r2, r3
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	b21b      	sxth	r3, r3
 80037fc:	461a      	mov	r2, r3
					* 250;
 80037fe:	23fa      	movs	r3, #250	; 0xfa
 8003800:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	601a      	str	r2, [r3, #0]
 8003808:	e007      	b.n	800381a <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 800380a:	893b      	ldrh	r3, [r7, #8]
 800380c:	b21b      	sxth	r3, r3
 800380e:	461a      	mov	r2, r3
 8003810:	23fa      	movs	r3, #250	; 0xfa
 8003812:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	601a      	str	r2, [r3, #0]

	}

	return Status;
 800381a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800381e:	4618      	mov	r0, r3
 8003820:	3710      	adds	r7, #16
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}

08003826 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 8003826:	b480      	push	{r7}
 8003828:	b08b      	sub	sp, #44	; 0x2c
 800382a:	af00      	add	r7, sp, #0
 800382c:	60f8      	str	r0, [r7, #12]
 800382e:	60b9      	str	r1, [r7, #8]
 8003830:	607a      	str	r2, [r7, #4]
 8003832:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 8003834:	2308      	movs	r3, #8
 8003836:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 8003838:	2300      	movs	r3, #0
 800383a:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	f04f 32ff 	mov.w	r2, #4294967295
 8003842:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	fbb2 f3f3 	udiv	r3, r2, r3
 800384c:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	69ba      	ldr	r2, [r7, #24]
 8003852:	fbb3 f2f2 	udiv	r2, r3, r2
 8003856:	69b9      	ldr	r1, [r7, #24]
 8003858:	fb01 f202 	mul.w	r2, r1, r2
 800385c:	1a9b      	subs	r3, r3, r2
 800385e:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	627b      	str	r3, [r7, #36]	; 0x24
 8003864:	e030      	b.n	80038c8 <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 8003866:	2300      	movs	r3, #0
 8003868:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 800386a:	68fa      	ldr	r2, [r7, #12]
 800386c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386e:	4413      	add	r3, r2
 8003870:	781b      	ldrb	r3, [r3, #0]
 8003872:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 8003874:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	429a      	cmp	r2, r3
 800387a:	d11e      	bne.n	80038ba <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 800387c:	7ffa      	ldrb	r2, [r7, #31]
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	fa42 f303 	asr.w	r3, r2, r3
 8003884:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 800388a:	e016      	b.n	80038ba <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 800388c:	7ffb      	ldrb	r3, [r7, #31]
 800388e:	f003 0301 	and.w	r3, r3, #1
 8003892:	2b00      	cmp	r3, #0
 8003894:	d00b      	beq.n	80038ae <get_next_good_spad+0x88>
				success = 1;
 8003896:	2301      	movs	r3, #1
 8003898:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 800389a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389c:	69ba      	ldr	r2, [r7, #24]
 800389e:	fb02 f203 	mul.w	r2, r2, r3
 80038a2:	6a3b      	ldr	r3, [r7, #32]
 80038a4:	4413      	add	r3, r2
 80038a6:	461a      	mov	r2, r3
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	601a      	str	r2, [r3, #0]
				break;
 80038ac:	e009      	b.n	80038c2 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 80038ae:	7ffb      	ldrb	r3, [r7, #31]
 80038b0:	085b      	lsrs	r3, r3, #1
 80038b2:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 80038b4:	6a3b      	ldr	r3, [r7, #32]
 80038b6:	3301      	adds	r3, #1
 80038b8:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 80038ba:	6a3a      	ldr	r2, [r7, #32]
 80038bc:	69bb      	ldr	r3, [r7, #24]
 80038be:	429a      	cmp	r2, r3
 80038c0:	d3e4      	bcc.n	800388c <get_next_good_spad+0x66>
				coarseIndex++) {
 80038c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c4:	3301      	adds	r3, #1
 80038c6:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 80038c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d202      	bcs.n	80038d6 <get_next_good_spad+0xb0>
 80038d0:	7fbb      	ldrb	r3, [r7, #30]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d0c7      	beq.n	8003866 <get_next_good_spad+0x40>
		}
	}
}
 80038d6:	bf00      	nop
 80038d8:	372c      	adds	r7, #44	; 0x2c
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr
	...

080038e4 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b085      	sub	sp, #20
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 80038ec:	2301      	movs	r3, #1
 80038ee:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	099b      	lsrs	r3, r3, #6
 80038f4:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 80038f6:	4a07      	ldr	r2, [pc, #28]	; (8003914 <is_aperture+0x30>)
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d101      	bne.n	8003906 <is_aperture+0x22>
		isAperture = 0;
 8003902:	2300      	movs	r3, #0
 8003904:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 8003906:	7bfb      	ldrb	r3, [r7, #15]
}
 8003908:	4618      	mov	r0, r3
 800390a:	3714      	adds	r7, #20
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr
 8003914:	200002cc 	.word	0x200002cc

08003918 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 8003918:	b480      	push	{r7}
 800391a:	b089      	sub	sp, #36	; 0x24
 800391c:	af00      	add	r7, sp, #0
 800391e:	60f8      	str	r0, [r7, #12]
 8003920:	60b9      	str	r1, [r7, #8]
 8003922:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8003924:	2300      	movs	r3, #0
 8003926:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 8003928:	2308      	movs	r3, #8
 800392a:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	fbb2 f3f3 	udiv	r3, r2, r3
 8003934:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	69ba      	ldr	r2, [r7, #24]
 800393a:	fbb3 f2f2 	udiv	r2, r3, r2
 800393e:	69b9      	ldr	r1, [r7, #24]
 8003940:	fb01 f202 	mul.w	r2, r1, r2
 8003944:	1a9b      	subs	r3, r3, r2
 8003946:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 8003948:	697a      	ldr	r2, [r7, #20]
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	429a      	cmp	r2, r3
 800394e:	d302      	bcc.n	8003956 <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 8003950:	23ce      	movs	r3, #206	; 0xce
 8003952:	77fb      	strb	r3, [r7, #31]
 8003954:	e010      	b.n	8003978 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 8003956:	68fa      	ldr	r2, [r7, #12]
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	4413      	add	r3, r2
 800395c:	68f9      	ldr	r1, [r7, #12]
 800395e:	697a      	ldr	r2, [r7, #20]
 8003960:	440a      	add	r2, r1
 8003962:	7812      	ldrb	r2, [r2, #0]
 8003964:	b251      	sxtb	r1, r2
 8003966:	2001      	movs	r0, #1
 8003968:	693a      	ldr	r2, [r7, #16]
 800396a:	fa00 f202 	lsl.w	r2, r0, r2
 800396e:	b252      	sxtb	r2, r2
 8003970:	430a      	orrs	r2, r1
 8003972:	b252      	sxtb	r2, r2
 8003974:	b2d2      	uxtb	r2, r2
 8003976:	701a      	strb	r2, [r3, #0]

	return status;
 8003978:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800397c:	4618      	mov	r0, r3
 800397e:	3724      	adds	r7, #36	; 0x24
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 8003992:	2306      	movs	r3, #6
 8003994:	683a      	ldr	r2, [r7, #0]
 8003996:	21b0      	movs	r1, #176	; 0xb0
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f002 feaf 	bl	80066fc <VL53L0X_WriteMulti>
 800399e:	4603      	mov	r3, r0
 80039a0:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 80039a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3710      	adds	r7, #16
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}

080039ae <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 80039ae:	b580      	push	{r7, lr}
 80039b0:	b084      	sub	sp, #16
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	6078      	str	r0, [r7, #4]
 80039b6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 80039b8:	2306      	movs	r3, #6
 80039ba:	683a      	ldr	r2, [r7, #0]
 80039bc:	21b0      	movs	r1, #176	; 0xb0
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f002 fec3 	bl	800674a <VL53L0X_ReadMulti>
 80039c4:	4603      	mov	r3, r0
 80039c6:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 80039c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3710      	adds	r7, #16
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}

080039d4 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b08c      	sub	sp, #48	; 0x30
 80039d8:	af00      	add	r7, sp, #0
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	607a      	str	r2, [r7, #4]
 80039de:	603b      	str	r3, [r7, #0]
 80039e0:	460b      	mov	r3, r1
 80039e2:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80039e4:	2300      	movs	r3, #0
 80039e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 80039ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039ec:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 80039ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039f0:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 80039f2:	2300      	movs	r3, #0
 80039f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80039f6:	e02b      	b.n	8003a50 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 80039f8:	f107 031c 	add.w	r3, r7, #28
 80039fc:	6a3a      	ldr	r2, [r7, #32]
 80039fe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f7ff ff10 	bl	8003826 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a0c:	d103      	bne.n	8003a16 <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8003a0e:	23ce      	movs	r3, #206	; 0xce
 8003a10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8003a14:	e020      	b.n	8003a58 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	461a      	mov	r2, r3
 8003a1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a1c:	4413      	add	r3, r2
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f7ff ff60 	bl	80038e4 <is_aperture>
 8003a24:	4603      	mov	r3, r0
 8003a26:	461a      	mov	r2, r3
 8003a28:	7afb      	ldrb	r3, [r7, #11]
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d003      	beq.n	8003a36 <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8003a2e:	23ce      	movs	r3, #206	; 0xce
 8003a30:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8003a34:	e010      	b.n	8003a58 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 8003a3a:	6a3a      	ldr	r2, [r7, #32]
 8003a3c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003a3e:	6838      	ldr	r0, [r7, #0]
 8003a40:	f7ff ff6a 	bl	8003918 <enable_spad_bit>
		currentSpad++;
 8003a44:	6a3b      	ldr	r3, [r7, #32]
 8003a46:	3301      	adds	r3, #1
 8003a48:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8003a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a4c:	3301      	adds	r3, #1
 8003a4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d3cf      	bcc.n	80039f8 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 8003a58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a5a:	6a3a      	ldr	r2, [r7, #32]
 8003a5c:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 8003a5e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d106      	bne.n	8003a74 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 8003a66:	6839      	ldr	r1, [r7, #0]
 8003a68:	68f8      	ldr	r0, [r7, #12]
 8003a6a:	f7ff ff8d 	bl	8003988 <set_ref_spad_map>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 8003a74:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d121      	bne.n	8003ac0 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 8003a7c:	f107 0314 	add.w	r3, r7, #20
 8003a80:	4619      	mov	r1, r3
 8003a82:	68f8      	ldr	r0, [r7, #12]
 8003a84:	f7ff ff93 	bl	80039ae <get_ref_spad_map>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 8003a92:	e011      	b.n	8003ab8 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 8003a94:	683a      	ldr	r2, [r7, #0]
 8003a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a98:	4413      	add	r3, r2
 8003a9a:	781a      	ldrb	r2, [r3, #0]
 8003a9c:	f107 0114 	add.w	r1, r7, #20
 8003aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa2:	440b      	add	r3, r1
 8003aa4:	781b      	ldrb	r3, [r3, #0]
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d003      	beq.n	8003ab2 <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 8003aaa:	23ce      	movs	r3, #206	; 0xce
 8003aac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 8003ab0:	e006      	b.n	8003ac0 <enable_ref_spads+0xec>
			}
			i++;
 8003ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab4:	3301      	adds	r3, #1
 8003ab6:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 8003ab8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d3e9      	bcc.n	8003a94 <enable_ref_spads+0xc0>
		}
	}
	return status;
 8003ac0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3730      	adds	r7, #48	; 0x30
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}

08003acc <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b08a      	sub	sp, #40	; 0x28
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 8003adc:	2300      	movs	r3, #0
 8003ade:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8003ae8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 8003aec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d107      	bne.n	8003b04 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 8003af4:	22c0      	movs	r2, #192	; 0xc0
 8003af6:	2101      	movs	r1, #1
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f002 fe4b 	bl	8006794 <VL53L0X_WrByte>
 8003afe:	4603      	mov	r3, r0
 8003b00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 8003b04:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d108      	bne.n	8003b1e <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 8003b0c:	f107 0308 	add.w	r3, r7, #8
 8003b10:	4619      	mov	r1, r3
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f7ff fbe0 	bl	80032d8 <VL53L0X_PerformSingleRangingMeasurement>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 8003b1e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d107      	bne.n	8003b36 <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003b26:	2201      	movs	r2, #1
 8003b28:	21ff      	movs	r1, #255	; 0xff
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f002 fe32 	bl	8006794 <VL53L0X_WrByte>
 8003b30:	4603      	mov	r3, r0
 8003b32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 8003b36:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d107      	bne.n	8003b4e <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 8003b3e:	683a      	ldr	r2, [r7, #0]
 8003b40:	21b6      	movs	r1, #182	; 0xb6
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f002 fec3 	bl	80068ce <VL53L0X_RdWord>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 8003b4e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d107      	bne.n	8003b66 <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003b56:	2200      	movs	r2, #0
 8003b58:	21ff      	movs	r1, #255	; 0xff
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f002 fe1a 	bl	8006794 <VL53L0X_WrByte>
 8003b60:	4603      	mov	r3, r0
 8003b62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 8003b66:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d112      	bne.n	8003b94 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8003b6e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003b72:	461a      	mov	r2, r3
 8003b74:	2101      	movs	r1, #1
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f002 fe0c 	bl	8006794 <VL53L0X_WrByte>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 8003b82:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d104      	bne.n	8003b94 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003b90:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 8003b94:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3728      	adds	r7, #40	; 0x28
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 8003ba0:	b590      	push	{r4, r7, lr}
 8003ba2:	b09d      	sub	sp, #116	; 0x74
 8003ba4:	af06      	add	r7, sp, #24
 8003ba6:	60f8      	str	r0, [r7, #12]
 8003ba8:	60b9      	str	r1, [r7, #8]
 8003baa:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003bac:	2300      	movs	r3, #0
 8003bae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 8003bb2:	23b4      	movs	r3, #180	; 0xb4
 8003bb4:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 8003bb8:	2303      	movs	r3, #3
 8003bba:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 8003bbc:	232c      	movs	r3, #44	; 0x2c
 8003bbe:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 8003bcc:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8003bd0:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 8003bda:	2306      	movs	r3, #6
 8003bdc:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 8003bde:	2300      	movs	r3, #0
 8003be0:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 8003be2:	2300      	movs	r3, #0
 8003be4:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 8003be6:	2300      	movs	r3, #0
 8003be8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 8003bec:	2300      	movs	r3, #0
 8003bee:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 8003c04:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 8003c06:	2300      	movs	r3, #0
 8003c08:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c0a:	e009      	b.n	8003c20 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8003c0c:	68fa      	ldr	r2, [r7, #12]
 8003c0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c10:	4413      	add	r3, r2
 8003c12:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8003c16:	2200      	movs	r2, #0
 8003c18:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8003c1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c1c:	3301      	adds	r3, #1
 8003c1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d3f1      	bcc.n	8003c0c <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003c28:	2201      	movs	r2, #1
 8003c2a:	21ff      	movs	r1, #255	; 0xff
 8003c2c:	68f8      	ldr	r0, [r7, #12]
 8003c2e:	f002 fdb1 	bl	8006794 <VL53L0X_WrByte>
 8003c32:	4603      	mov	r3, r0
 8003c34:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8003c38:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d107      	bne.n	8003c50 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 8003c40:	2200      	movs	r2, #0
 8003c42:	214f      	movs	r1, #79	; 0x4f
 8003c44:	68f8      	ldr	r0, [r7, #12]
 8003c46:	f002 fda5 	bl	8006794 <VL53L0X_WrByte>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8003c50:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d107      	bne.n	8003c68 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 8003c58:	222c      	movs	r2, #44	; 0x2c
 8003c5a:	214e      	movs	r1, #78	; 0x4e
 8003c5c:	68f8      	ldr	r0, [r7, #12]
 8003c5e:	f002 fd99 	bl	8006794 <VL53L0X_WrByte>
 8003c62:	4603      	mov	r3, r0
 8003c64:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8003c68:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d107      	bne.n	8003c80 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003c70:	2200      	movs	r2, #0
 8003c72:	21ff      	movs	r1, #255	; 0xff
 8003c74:	68f8      	ldr	r0, [r7, #12]
 8003c76:	f002 fd8d 	bl	8006794 <VL53L0X_WrByte>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8003c80:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d109      	bne.n	8003c9c <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 8003c88:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	21b6      	movs	r1, #182	; 0xb6
 8003c90:	68f8      	ldr	r0, [r7, #12]
 8003c92:	f002 fd7f 	bl	8006794 <VL53L0X_WrByte>
 8003c96:	4603      	mov	r3, r0
 8003c98:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 8003c9c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d107      	bne.n	8003cb4 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	2180      	movs	r1, #128	; 0x80
 8003ca8:	68f8      	ldr	r0, [r7, #12]
 8003caa:	f002 fd73 	bl	8006794 <VL53L0X_WrByte>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 8003cb4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d10a      	bne.n	8003cd2 <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 8003cbc:	f107 0210 	add.w	r2, r7, #16
 8003cc0:	f107 0111 	add.w	r1, r7, #17
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	68f8      	ldr	r0, [r7, #12]
 8003cc8:	f000 fbbb 	bl	8004442 <VL53L0X_perform_ref_calibration>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 8003cd2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d121      	bne.n	8003d1e <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 8003cde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ce0:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 8003ce6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ce8:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 8003cf6:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8003cfa:	f107 0218 	add.w	r2, r7, #24
 8003cfe:	9204      	str	r2, [sp, #16]
 8003d00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d02:	9203      	str	r2, [sp, #12]
 8003d04:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003d06:	9202      	str	r2, [sp, #8]
 8003d08:	9301      	str	r3, [sp, #4]
 8003d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d0c:	9300      	str	r3, [sp, #0]
 8003d0e:	4623      	mov	r3, r4
 8003d10:	4602      	mov	r2, r0
 8003d12:	68f8      	ldr	r0, [r7, #12]
 8003d14:	f7ff fe5e 	bl	80039d4 <enable_ref_spads>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003d1e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d174      	bne.n	8003e10 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 8003d26:	69bb      	ldr	r3, [r7, #24]
 8003d28:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 8003d2a:	f107 0312 	add.w	r3, r7, #18
 8003d2e:	4619      	mov	r1, r3
 8003d30:	68f8      	ldr	r0, [r7, #12]
 8003d32:	f7ff fecb 	bl	8003acc <perform_ref_signal_measurement>
 8003d36:	4603      	mov	r3, r0
 8003d38:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 8003d3c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d161      	bne.n	8003e08 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 8003d44:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 8003d46:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d25d      	bcs.n	8003e08 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d50:	e009      	b.n	8003d66 <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8003d52:	68fa      	ldr	r2, [r7, #12]
 8003d54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d56:	4413      	add	r3, r2
 8003d58:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 8003d60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d62:	3301      	adds	r3, #1
 8003d64:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d3f1      	bcc.n	8003d52 <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 8003d6e:	e002      	b.n	8003d76 <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 8003d70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d72:	3301      	adds	r3, #1
 8003d74:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 8003d76:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8003d7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d7c:	4413      	add	r3, r2
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f7ff fdb0 	bl	80038e4 <is_aperture>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d103      	bne.n	8003d92 <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 8003d8a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d3ee      	bcc.n	8003d70 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 8003d92:	2301      	movs	r3, #1
 8003d94:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 8003d96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d98:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 8003da6:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8003daa:	f107 0218 	add.w	r2, r7, #24
 8003dae:	9204      	str	r2, [sp, #16]
 8003db0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003db2:	9203      	str	r2, [sp, #12]
 8003db4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003db6:	9202      	str	r2, [sp, #8]
 8003db8:	9301      	str	r3, [sp, #4]
 8003dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dbc:	9300      	str	r3, [sp, #0]
 8003dbe:	4623      	mov	r3, r4
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	68f8      	ldr	r0, [r7, #12]
 8003dc4:	f7ff fe06 	bl	80039d4 <enable_ref_spads>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8003dce:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d11b      	bne.n	8003e0e <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 8003dda:	f107 0312 	add.w	r3, r7, #18
 8003dde:	4619      	mov	r1, r3
 8003de0:	68f8      	ldr	r0, [r7, #12]
 8003de2:	f7ff fe73 	bl	8003acc <perform_ref_signal_measurement>
 8003de6:	4603      	mov	r3, r0
 8003de8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 8003dec:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d10c      	bne.n	8003e0e <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 8003df4:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 8003df6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d208      	bcs.n	8003e0e <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 8003e02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e04:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 8003e06:	e002      	b.n	8003e0e <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e0c:	e000      	b.n	8003e10 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 8003e0e:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8003e10:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	f040 80af 	bne.w	8003f78 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 8003e1a:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8003e1c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	f240 80aa 	bls.w	8003f78 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 8003e24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e26:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 8003e2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e2c:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	f503 7192 	add.w	r1, r3, #292	; 0x124
 8003e34:	f107 031c 	add.w	r3, r7, #28
 8003e38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f002 fdd2 	bl	80069e4 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 8003e40:	8a7b      	ldrh	r3, [r7, #18]
 8003e42:	461a      	mov	r2, r3
 8003e44:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	bfb8      	it	lt
 8003e4c:	425b      	neglt	r3, r3
 8003e4e:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 8003e50:	2300      	movs	r3, #0
 8003e52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 8003e56:	e086      	b.n	8003f66 <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 8003e5e:	f107 0314 	add.w	r3, r7, #20
 8003e62:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003e64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e66:	f7ff fcde 	bl	8003826 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e70:	d103      	bne.n	8003e7a <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8003e72:	23ce      	movs	r3, #206	; 0xce
 8003e74:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 8003e78:	e07e      	b.n	8003f78 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 8003e7a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8003e7e:	697a      	ldr	r2, [r7, #20]
 8003e80:	4413      	add	r3, r2
 8003e82:	4618      	mov	r0, r3
 8003e84:	f7ff fd2e 	bl	80038e4 <is_aperture>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d003      	beq.n	8003e9a <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 8003e92:	2301      	movs	r3, #1
 8003e94:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 8003e98:	e06e      	b.n	8003f78 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 8003e9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e9c:	3301      	adds	r3, #1
 8003e9e:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 8003eaa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003eac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f7ff fd32 	bl	8003918 <enable_spad_bit>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8003eba:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d10c      	bne.n	8003edc <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 8003ec2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ec4:	3301      	adds	r3, #1
 8003ec6:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 8003ece:	4619      	mov	r1, r3
 8003ed0:	68f8      	ldr	r0, [r7, #12]
 8003ed2:	f7ff fd59 	bl	8003988 <set_ref_spad_map>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 8003edc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d146      	bne.n	8003f72 <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 8003ee4:	f107 0312 	add.w	r3, r7, #18
 8003ee8:	4619      	mov	r1, r3
 8003eea:	68f8      	ldr	r0, [r7, #12]
 8003eec:	f7ff fdee 	bl	8003acc <perform_ref_signal_measurement>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 8003ef6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d13b      	bne.n	8003f76 <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8003efe:	8a7b      	ldrh	r3, [r7, #18]
 8003f00:	461a      	mov	r2, r3
 8003f02:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	bfb8      	it	lt
 8003f0a:	425b      	neglt	r3, r3
 8003f0c:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 8003f0e:	8a7b      	ldrh	r3, [r7, #18]
 8003f10:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d21c      	bcs.n	8003f50 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 8003f16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d914      	bls.n	8003f48 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 8003f1e:	f107 031c 	add.w	r3, r7, #28
 8003f22:	4619      	mov	r1, r3
 8003f24:	68f8      	ldr	r0, [r7, #12]
 8003f26:	f7ff fd2f 	bl	8003988 <set_ref_spad_map>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 8003f36:	f107 011c 	add.w	r1, r7, #28
 8003f3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f002 fd51 	bl	80069e4 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 8003f42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f44:	3b01      	subs	r3, #1
 8003f46:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003f4e:	e00a      	b.n	8003f66 <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 8003f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f52:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 8003f5a:	f107 031c 	add.w	r3, r7, #28
 8003f5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f60:	4618      	mov	r0, r3
 8003f62:	f002 fd3f 	bl	80069e4 <memcpy>
		while (!complete) {
 8003f66:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	f43f af74 	beq.w	8003e58 <VL53L0X_perform_ref_spad_management+0x2b8>
 8003f70:	e002      	b.n	8003f78 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8003f72:	bf00      	nop
 8003f74:	e000      	b.n	8003f78 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8003f76:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003f78:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d115      	bne.n	8003fac <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f84:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8003f8c:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2201      	movs	r2, #1
 8003f92:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	b2da      	uxtb	r2, r3
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	781a      	ldrb	r2, [r3, #0]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 8003fac:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	375c      	adds	r7, #92	; 0x5c
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd90      	pop	{r4, r7, pc}

08003fb8 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 8003fb8:	b590      	push	{r4, r7, lr}
 8003fba:	b093      	sub	sp, #76	; 0x4c
 8003fbc:	af06      	add	r7, sp, #24
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	60b9      	str	r1, [r7, #8]
 8003fc2:	4613      	mov	r3, r2
 8003fc4:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 8003fd0:	23b4      	movs	r3, #180	; 0xb4
 8003fd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 8003fd6:	2306      	movs	r3, #6
 8003fd8:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 8003fda:	232c      	movs	r3, #44	; 0x2c
 8003fdc:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003fde:	2201      	movs	r2, #1
 8003fe0:	21ff      	movs	r1, #255	; 0xff
 8003fe2:	68f8      	ldr	r0, [r7, #12]
 8003fe4:	f002 fbd6 	bl	8006794 <VL53L0X_WrByte>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8003fee:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d107      	bne.n	8004006 <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	214f      	movs	r1, #79	; 0x4f
 8003ffa:	68f8      	ldr	r0, [r7, #12]
 8003ffc:	f002 fbca 	bl	8006794 <VL53L0X_WrByte>
 8004000:	4603      	mov	r3, r0
 8004002:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8004006:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800400a:	2b00      	cmp	r3, #0
 800400c:	d107      	bne.n	800401e <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 800400e:	222c      	movs	r2, #44	; 0x2c
 8004010:	214e      	movs	r1, #78	; 0x4e
 8004012:	68f8      	ldr	r0, [r7, #12]
 8004014:	f002 fbbe 	bl	8006794 <VL53L0X_WrByte>
 8004018:	4603      	mov	r3, r0
 800401a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800401e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004022:	2b00      	cmp	r3, #0
 8004024:	d107      	bne.n	8004036 <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004026:	2200      	movs	r2, #0
 8004028:	21ff      	movs	r1, #255	; 0xff
 800402a:	68f8      	ldr	r0, [r7, #12]
 800402c:	f002 fbb2 	bl	8006794 <VL53L0X_WrByte>
 8004030:	4603      	mov	r3, r0
 8004032:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8004036:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800403a:	2b00      	cmp	r3, #0
 800403c:	d109      	bne.n	8004052 <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 800403e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004042:	461a      	mov	r2, r3
 8004044:	21b6      	movs	r1, #182	; 0xb6
 8004046:	68f8      	ldr	r0, [r7, #12]
 8004048:	f002 fba4 	bl	8006794 <VL53L0X_WrByte>
 800404c:	4603      	mov	r3, r0
 800404e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 8004052:	2300      	movs	r3, #0
 8004054:	627b      	str	r3, [r7, #36]	; 0x24
 8004056:	e009      	b.n	800406c <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8004058:	68fa      	ldr	r2, [r7, #12]
 800405a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405c:	4413      	add	r3, r2
 800405e:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8004062:	2200      	movs	r2, #0
 8004064:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8004066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004068:	3301      	adds	r3, #1
 800406a:	627b      	str	r3, [r7, #36]	; 0x24
 800406c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800406e:	69fb      	ldr	r3, [r7, #28]
 8004070:	429a      	cmp	r2, r3
 8004072:	d3f1      	bcc.n	8004058 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 8004074:	79fb      	ldrb	r3, [r7, #7]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d011      	beq.n	800409e <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800407a:	e002      	b.n	8004082 <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 800407c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800407e:	3301      	adds	r3, #1
 8004080:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8004082:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8004086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004088:	4413      	add	r3, r2
 800408a:	4618      	mov	r0, r3
 800408c:	f7ff fc2a 	bl	80038e4 <is_aperture>
 8004090:	4603      	mov	r3, r0
 8004092:	2b00      	cmp	r3, #0
 8004094:	d103      	bne.n	800409e <VL53L0X_set_reference_spads+0xe6>
 8004096:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004098:	69bb      	ldr	r3, [r7, #24]
 800409a:	429a      	cmp	r2, r3
 800409c:	d3ee      	bcc.n	800407c <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 80040aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80040ae:	79f9      	ldrb	r1, [r7, #7]
 80040b0:	f107 0214 	add.w	r2, r7, #20
 80040b4:	9204      	str	r2, [sp, #16]
 80040b6:	68ba      	ldr	r2, [r7, #8]
 80040b8:	9203      	str	r2, [sp, #12]
 80040ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040bc:	9202      	str	r2, [sp, #8]
 80040be:	9301      	str	r3, [sp, #4]
 80040c0:	69fb      	ldr	r3, [r7, #28]
 80040c2:	9300      	str	r3, [sp, #0]
 80040c4:	4623      	mov	r3, r4
 80040c6:	4602      	mov	r2, r0
 80040c8:	68f8      	ldr	r0, [r7, #12]
 80040ca:	f7ff fc83 	bl	80039d4 <enable_ref_spads>
 80040ce:	4603      	mov	r3, r0
 80040d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 80040d4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d10c      	bne.n	80040f6 <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	b2da      	uxtb	r2, r3
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	79fa      	ldrb	r2, [r7, #7]
 80040f2:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 80040f6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3734      	adds	r7, #52	; 0x34
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd90      	pop	{r4, r7, pc}

08004102 <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 8004102:	b580      	push	{r7, lr}
 8004104:	b084      	sub	sp, #16
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]
 800410a:	460b      	mov	r3, r1
 800410c:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800410e:	2300      	movs	r3, #0
 8004110:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8004112:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d10a      	bne.n	8004130 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 800411a:	78fb      	ldrb	r3, [r7, #3]
 800411c:	f043 0301 	orr.w	r3, r3, #1
 8004120:	b2db      	uxtb	r3, r3
 8004122:	461a      	mov	r2, r3
 8004124:	2100      	movs	r1, #0
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f002 fb34 	bl	8006794 <VL53L0X_WrByte>
 800412c:	4603      	mov	r3, r0
 800412e:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 8004130:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d104      	bne.n	8004142 <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f000 f9bf 	bl	80044bc <VL53L0X_measurement_poll_for_completion>
 800413e:	4603      	mov	r3, r0
 8004140:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8004142:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d105      	bne.n	8004156 <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800414a:	2100      	movs	r1, #0
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f7ff fab4 	bl	80036ba <VL53L0X_ClearInterruptMask>
 8004152:	4603      	mov	r3, r0
 8004154:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8004156:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d106      	bne.n	800416c <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 800415e:	2200      	movs	r2, #0
 8004160:	2100      	movs	r1, #0
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f002 fb16 	bl	8006794 <VL53L0X_WrByte>
 8004168:	4603      	mov	r3, r0
 800416a:	73fb      	strb	r3, [r7, #15]

	return Status;
 800416c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004170:	4618      	mov	r0, r3
 8004172:	3710      	adds	r7, #16
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}

08004178 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b084      	sub	sp, #16
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	4608      	mov	r0, r1
 8004182:	4611      	mov	r1, r2
 8004184:	461a      	mov	r2, r3
 8004186:	4603      	mov	r3, r0
 8004188:	70fb      	strb	r3, [r7, #3]
 800418a:	460b      	mov	r3, r1
 800418c:	70bb      	strb	r3, [r7, #2]
 800418e:	4613      	mov	r3, r2
 8004190:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004192:	2300      	movs	r3, #0
 8004194:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 8004196:	2300      	movs	r3, #0
 8004198:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800419a:	2201      	movs	r2, #1
 800419c:	21ff      	movs	r1, #255	; 0xff
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f002 faf8 	bl	8006794 <VL53L0X_WrByte>
 80041a4:	4603      	mov	r3, r0
 80041a6:	461a      	mov	r2, r3
 80041a8:	7bfb      	ldrb	r3, [r7, #15]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80041ae:	2200      	movs	r2, #0
 80041b0:	2100      	movs	r1, #0
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f002 faee 	bl	8006794 <VL53L0X_WrByte>
 80041b8:	4603      	mov	r3, r0
 80041ba:	461a      	mov	r2, r3
 80041bc:	7bfb      	ldrb	r3, [r7, #15]
 80041be:	4313      	orrs	r3, r2
 80041c0:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80041c2:	2200      	movs	r2, #0
 80041c4:	21ff      	movs	r1, #255	; 0xff
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f002 fae4 	bl	8006794 <VL53L0X_WrByte>
 80041cc:	4603      	mov	r3, r0
 80041ce:	461a      	mov	r2, r3
 80041d0:	7bfb      	ldrb	r3, [r7, #15]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 80041d6:	78fb      	ldrb	r3, [r7, #3]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d01e      	beq.n	800421a <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 80041dc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d009      	beq.n	80041f8 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 80041e4:	69ba      	ldr	r2, [r7, #24]
 80041e6:	21cb      	movs	r1, #203	; 0xcb
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f002 fb51 	bl	8006890 <VL53L0X_RdByte>
 80041ee:	4603      	mov	r3, r0
 80041f0:	461a      	mov	r2, r3
 80041f2:	7bfb      	ldrb	r3, [r7, #15]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 80041f8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d02a      	beq.n	8004256 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 8004200:	f107 030e 	add.w	r3, r7, #14
 8004204:	461a      	mov	r2, r3
 8004206:	21ee      	movs	r1, #238	; 0xee
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f002 fb41 	bl	8006890 <VL53L0X_RdByte>
 800420e:	4603      	mov	r3, r0
 8004210:	461a      	mov	r2, r3
 8004212:	7bfb      	ldrb	r3, [r7, #15]
 8004214:	4313      	orrs	r3, r2
 8004216:	73fb      	strb	r3, [r7, #15]
 8004218:	e01d      	b.n	8004256 <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 800421a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d00a      	beq.n	8004238 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 8004222:	78bb      	ldrb	r3, [r7, #2]
 8004224:	461a      	mov	r2, r3
 8004226:	21cb      	movs	r1, #203	; 0xcb
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f002 fab3 	bl	8006794 <VL53L0X_WrByte>
 800422e:	4603      	mov	r3, r0
 8004230:	461a      	mov	r2, r3
 8004232:	7bfb      	ldrb	r3, [r7, #15]
 8004234:	4313      	orrs	r3, r2
 8004236:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8004238:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800423c:	2b00      	cmp	r3, #0
 800423e:	d00a      	beq.n	8004256 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8004240:	787b      	ldrb	r3, [r7, #1]
 8004242:	2280      	movs	r2, #128	; 0x80
 8004244:	21ee      	movs	r1, #238	; 0xee
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f002 fae4 	bl	8006814 <VL53L0X_UpdateByte>
 800424c:	4603      	mov	r3, r0
 800424e:	461a      	mov	r2, r3
 8004250:	7bfb      	ldrb	r3, [r7, #15]
 8004252:	4313      	orrs	r3, r2
 8004254:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8004256:	2201      	movs	r2, #1
 8004258:	21ff      	movs	r1, #255	; 0xff
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f002 fa9a 	bl	8006794 <VL53L0X_WrByte>
 8004260:	4603      	mov	r3, r0
 8004262:	461a      	mov	r2, r3
 8004264:	7bfb      	ldrb	r3, [r7, #15]
 8004266:	4313      	orrs	r3, r2
 8004268:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800426a:	2201      	movs	r2, #1
 800426c:	2100      	movs	r1, #0
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f002 fa90 	bl	8006794 <VL53L0X_WrByte>
 8004274:	4603      	mov	r3, r0
 8004276:	461a      	mov	r2, r3
 8004278:	7bfb      	ldrb	r3, [r7, #15]
 800427a:	4313      	orrs	r3, r2
 800427c:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800427e:	2200      	movs	r2, #0
 8004280:	21ff      	movs	r1, #255	; 0xff
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f002 fa86 	bl	8006794 <VL53L0X_WrByte>
 8004288:	4603      	mov	r3, r0
 800428a:	461a      	mov	r2, r3
 800428c:	7bfb      	ldrb	r3, [r7, #15]
 800428e:	4313      	orrs	r3, r2
 8004290:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 8004292:	7bbb      	ldrb	r3, [r7, #14]
 8004294:	f023 0310 	bic.w	r3, r3, #16
 8004298:	b2da      	uxtb	r2, r3
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	701a      	strb	r2, [r3, #0]

	return Status;
 800429e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3710      	adds	r7, #16
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}

080042aa <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 80042aa:	b580      	push	{r7, lr}
 80042ac:	b08a      	sub	sp, #40	; 0x28
 80042ae:	af04      	add	r7, sp, #16
 80042b0:	60f8      	str	r0, [r7, #12]
 80042b2:	60b9      	str	r1, [r7, #8]
 80042b4:	4611      	mov	r1, r2
 80042b6:	461a      	mov	r2, r3
 80042b8:	460b      	mov	r3, r1
 80042ba:	71fb      	strb	r3, [r7, #7]
 80042bc:	4613      	mov	r3, r2
 80042be:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80042c0:	2300      	movs	r3, #0
 80042c2:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80042c4:	2300      	movs	r3, #0
 80042c6:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 80042c8:	2300      	movs	r3, #0
 80042ca:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 80042cc:	2300      	movs	r3, #0
 80042ce:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 80042d0:	2300      	movs	r3, #0
 80042d2:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 80042d4:	79bb      	ldrb	r3, [r7, #6]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d003      	beq.n	80042e2 <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80042e0:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 80042e2:	2201      	movs	r2, #1
 80042e4:	2101      	movs	r1, #1
 80042e6:	68f8      	ldr	r0, [r7, #12]
 80042e8:	f002 fa54 	bl	8006794 <VL53L0X_WrByte>
 80042ec:	4603      	mov	r3, r0
 80042ee:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 80042f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d105      	bne.n	8004304 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 80042f8:	2140      	movs	r1, #64	; 0x40
 80042fa:	68f8      	ldr	r0, [r7, #12]
 80042fc:	f7ff ff01 	bl	8004102 <VL53L0X_perform_single_ref_calibration>
 8004300:	4603      	mov	r3, r0
 8004302:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8004304:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d115      	bne.n	8004338 <VL53L0X_perform_vhv_calibration+0x8e>
 800430c:	79fb      	ldrb	r3, [r7, #7]
 800430e:	2b01      	cmp	r3, #1
 8004310:	d112      	bne.n	8004338 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8004312:	7d39      	ldrb	r1, [r7, #20]
 8004314:	7d7a      	ldrb	r2, [r7, #21]
 8004316:	2300      	movs	r3, #0
 8004318:	9303      	str	r3, [sp, #12]
 800431a:	2301      	movs	r3, #1
 800431c:	9302      	str	r3, [sp, #8]
 800431e:	f107 0313 	add.w	r3, r7, #19
 8004322:	9301      	str	r3, [sp, #4]
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	9300      	str	r3, [sp, #0]
 8004328:	460b      	mov	r3, r1
 800432a:	2101      	movs	r1, #1
 800432c:	68f8      	ldr	r0, [r7, #12]
 800432e:	f7ff ff23 	bl	8004178 <VL53L0X_ref_calibration_io>
 8004332:	4603      	mov	r3, r0
 8004334:	75fb      	strb	r3, [r7, #23]
 8004336:	e002      	b.n	800433e <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	2200      	movs	r2, #0
 800433c:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800433e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d112      	bne.n	800436c <VL53L0X_perform_vhv_calibration+0xc2>
 8004346:	79bb      	ldrb	r3, [r7, #6]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d00f      	beq.n	800436c <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800434c:	7dbb      	ldrb	r3, [r7, #22]
 800434e:	461a      	mov	r2, r3
 8004350:	2101      	movs	r1, #1
 8004352:	68f8      	ldr	r0, [r7, #12]
 8004354:	f002 fa1e 	bl	8006794 <VL53L0X_WrByte>
 8004358:	4603      	mov	r3, r0
 800435a:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800435c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d103      	bne.n	800436c <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	7dba      	ldrb	r2, [r7, #22]
 8004368:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800436c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004370:	4618      	mov	r0, r3
 8004372:	3718      	adds	r7, #24
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}

08004378 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b08a      	sub	sp, #40	; 0x28
 800437c:	af04      	add	r7, sp, #16
 800437e:	60f8      	str	r0, [r7, #12]
 8004380:	60b9      	str	r1, [r7, #8]
 8004382:	4611      	mov	r1, r2
 8004384:	461a      	mov	r2, r3
 8004386:	460b      	mov	r3, r1
 8004388:	71fb      	strb	r3, [r7, #7]
 800438a:	4613      	mov	r3, r2
 800438c:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800438e:	2300      	movs	r3, #0
 8004390:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8004392:	2300      	movs	r3, #0
 8004394:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8004396:	2300      	movs	r3, #0
 8004398:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800439a:	2300      	movs	r3, #0
 800439c:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800439e:	79bb      	ldrb	r3, [r7, #6]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d003      	beq.n	80043ac <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80043aa:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 80043ac:	2202      	movs	r2, #2
 80043ae:	2101      	movs	r1, #1
 80043b0:	68f8      	ldr	r0, [r7, #12]
 80043b2:	f002 f9ef 	bl	8006794 <VL53L0X_WrByte>
 80043b6:	4603      	mov	r3, r0
 80043b8:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 80043ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d105      	bne.n	80043ce <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 80043c2:	2100      	movs	r1, #0
 80043c4:	68f8      	ldr	r0, [r7, #12]
 80043c6:	f7ff fe9c 	bl	8004102 <VL53L0X_perform_single_ref_calibration>
 80043ca:	4603      	mov	r3, r0
 80043cc:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 80043ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d115      	bne.n	8004402 <VL53L0X_perform_phase_calibration+0x8a>
 80043d6:	79fb      	ldrb	r3, [r7, #7]
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d112      	bne.n	8004402 <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 80043dc:	7d39      	ldrb	r1, [r7, #20]
 80043de:	7d7a      	ldrb	r2, [r7, #21]
 80043e0:	2301      	movs	r3, #1
 80043e2:	9303      	str	r3, [sp, #12]
 80043e4:	2300      	movs	r3, #0
 80043e6:	9302      	str	r3, [sp, #8]
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	9301      	str	r3, [sp, #4]
 80043ec:	f107 0313 	add.w	r3, r7, #19
 80043f0:	9300      	str	r3, [sp, #0]
 80043f2:	460b      	mov	r3, r1
 80043f4:	2101      	movs	r1, #1
 80043f6:	68f8      	ldr	r0, [r7, #12]
 80043f8:	f7ff febe 	bl	8004178 <VL53L0X_ref_calibration_io>
 80043fc:	4603      	mov	r3, r0
 80043fe:	75fb      	strb	r3, [r7, #23]
 8004400:	e002      	b.n	8004408 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	2200      	movs	r2, #0
 8004406:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8004408:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d112      	bne.n	8004436 <VL53L0X_perform_phase_calibration+0xbe>
 8004410:	79bb      	ldrb	r3, [r7, #6]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d00f      	beq.n	8004436 <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8004416:	7dbb      	ldrb	r3, [r7, #22]
 8004418:	461a      	mov	r2, r3
 800441a:	2101      	movs	r1, #1
 800441c:	68f8      	ldr	r0, [r7, #12]
 800441e:	f002 f9b9 	bl	8006794 <VL53L0X_WrByte>
 8004422:	4603      	mov	r3, r0
 8004424:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8004426:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d103      	bne.n	8004436 <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	7dba      	ldrb	r2, [r7, #22]
 8004432:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8004436:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800443a:	4618      	mov	r0, r3
 800443c:	3718      	adds	r7, #24
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}

08004442 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 8004442:	b580      	push	{r7, lr}
 8004444:	b086      	sub	sp, #24
 8004446:	af00      	add	r7, sp, #0
 8004448:	60f8      	str	r0, [r7, #12]
 800444a:	60b9      	str	r1, [r7, #8]
 800444c:	607a      	str	r2, [r7, #4]
 800444e:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004450:	2300      	movs	r3, #0
 8004452:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8004454:	2300      	movs	r3, #0
 8004456:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800445e:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 8004460:	78fa      	ldrb	r2, [r7, #3]
 8004462:	2300      	movs	r3, #0
 8004464:	68b9      	ldr	r1, [r7, #8]
 8004466:	68f8      	ldr	r0, [r7, #12]
 8004468:	f7ff ff1f 	bl	80042aa <VL53L0X_perform_vhv_calibration>
 800446c:	4603      	mov	r3, r0
 800446e:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8004470:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d107      	bne.n	8004488 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 8004478:	78fa      	ldrb	r2, [r7, #3]
 800447a:	2300      	movs	r3, #0
 800447c:	6879      	ldr	r1, [r7, #4]
 800447e:	68f8      	ldr	r0, [r7, #12]
 8004480:	f7ff ff7a 	bl	8004378 <VL53L0X_perform_phase_calibration>
 8004484:	4603      	mov	r3, r0
 8004486:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 8004488:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d10f      	bne.n	80044b0 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8004490:	7dbb      	ldrb	r3, [r7, #22]
 8004492:	461a      	mov	r2, r3
 8004494:	2101      	movs	r1, #1
 8004496:	68f8      	ldr	r0, [r7, #12]
 8004498:	f002 f97c 	bl	8006794 <VL53L0X_WrByte>
 800449c:	4603      	mov	r3, r0
 800449e:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 80044a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d103      	bne.n	80044b0 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	7dba      	ldrb	r2, [r7, #22]
 80044ac:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 80044b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3718      	adds	r7, #24
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}

080044bc <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b086      	sub	sp, #24
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80044c4:	2300      	movs	r3, #0
 80044c6:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 80044c8:	2300      	movs	r3, #0
 80044ca:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	

	LoopNb = 0;
 80044cc:	2300      	movs	r3, #0
 80044ce:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 80044d0:	f107 030f 	add.w	r3, r7, #15
 80044d4:	4619      	mov	r1, r3
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f7fe fd97 	bl	800300a <VL53L0X_GetMeasurementDataReady>
 80044dc:	4603      	mov	r3, r0
 80044de:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 80044e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d110      	bne.n	800450a <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 80044e8:	7bfb      	ldrb	r3, [r7, #15]
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d00f      	beq.n	800450e <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	3301      	adds	r3, #1
 80044f2:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80044fa:	d302      	bcc.n	8004502 <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 80044fc:	23f9      	movs	r3, #249	; 0xf9
 80044fe:	75fb      	strb	r3, [r7, #23]
			break;
 8004500:	e006      	b.n	8004510 <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f002 fa21 	bl	800694a <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8004508:	e7e2      	b.n	80044d0 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 800450a:	bf00      	nop
 800450c:	e000      	b.n	8004510 <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 800450e:	bf00      	nop
	} while (1);

	

	return Status;
 8004510:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004514:	4618      	mov	r0, r3
 8004516:	3718      	adds	r7, #24
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}

0800451c <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800451c:	b480      	push	{r7}
 800451e:	b085      	sub	sp, #20
 8004520:	af00      	add	r7, sp, #0
 8004522:	4603      	mov	r3, r0
 8004524:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 8004526:	2300      	movs	r3, #0
 8004528:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 800452a:	79fb      	ldrb	r3, [r7, #7]
 800452c:	3301      	adds	r3, #1
 800452e:	b2db      	uxtb	r3, r3
 8004530:	005b      	lsls	r3, r3, #1
 8004532:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 8004534:	7bfb      	ldrb	r3, [r7, #15]
}
 8004536:	4618      	mov	r0, r3
 8004538:	3714      	adds	r7, #20
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr

08004542 <VL53L0X_isqrt>:
	return vcsel_period_reg;
}


uint32_t VL53L0X_isqrt(uint32_t num)
{
 8004542:	b480      	push	{r7}
 8004544:	b085      	sub	sp, #20
 8004546:	af00      	add	r7, sp, #0
 8004548:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 800454a:	2300      	movs	r3, #0
 800454c:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 800454e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004552:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 8004554:	e002      	b.n	800455c <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	089b      	lsrs	r3, r3, #2
 800455a:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 800455c:	68ba      	ldr	r2, [r7, #8]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	429a      	cmp	r2, r3
 8004562:	d8f8      	bhi.n	8004556 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 8004564:	e017      	b.n	8004596 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 8004566:	68fa      	ldr	r2, [r7, #12]
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	441a      	add	r2, r3
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	429a      	cmp	r2, r3
 8004570:	d80b      	bhi.n	800458a <VL53L0X_isqrt+0x48>
			num -= res + bit;
 8004572:	68fa      	ldr	r2, [r7, #12]
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	4413      	add	r3, r2
 8004578:	687a      	ldr	r2, [r7, #4]
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	085a      	lsrs	r2, r3, #1
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	4413      	add	r3, r2
 8004586:	60fb      	str	r3, [r7, #12]
 8004588:	e002      	b.n	8004590 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	085b      	lsrs	r3, r3, #1
 800458e:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	089b      	lsrs	r3, r3, #2
 8004594:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d1e4      	bne.n	8004566 <VL53L0X_isqrt+0x24>
	}

	return res;
 800459c:	68fb      	ldr	r3, [r7, #12]
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3714      	adds	r7, #20
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr

080045aa <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 80045aa:	b580      	push	{r7, lr}
 80045ac:	b086      	sub	sp, #24
 80045ae:	af00      	add	r7, sp, #0
 80045b0:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80045b2:	2300      	movs	r3, #0
 80045b4:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 80045b6:	2200      	movs	r2, #0
 80045b8:	2183      	movs	r1, #131	; 0x83
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f002 f8ea 	bl	8006794 <VL53L0X_WrByte>
 80045c0:	4603      	mov	r3, r0
 80045c2:	461a      	mov	r2, r3
 80045c4:	7dfb      	ldrb	r3, [r7, #23]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 80045ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d11e      	bne.n	8004610 <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 80045d2:	2300      	movs	r3, #0
 80045d4:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 80045d6:	f107 030f 	add.w	r3, r7, #15
 80045da:	461a      	mov	r2, r3
 80045dc:	2183      	movs	r1, #131	; 0x83
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f002 f956 	bl	8006890 <VL53L0X_RdByte>
 80045e4:	4603      	mov	r3, r0
 80045e6:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 80045e8:	7bfb      	ldrb	r3, [r7, #15]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d10a      	bne.n	8004604 <VL53L0X_device_read_strobe+0x5a>
 80045ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d106      	bne.n	8004604 <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	3301      	adds	r3, #1
 80045fa:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004602:	d3e8      	bcc.n	80045d6 <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800460a:	d301      	bcc.n	8004610 <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 800460c:	23f9      	movs	r3, #249	; 0xf9
 800460e:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 8004610:	2201      	movs	r2, #1
 8004612:	2183      	movs	r1, #131	; 0x83
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f002 f8bd 	bl	8006794 <VL53L0X_WrByte>
 800461a:	4603      	mov	r3, r0
 800461c:	461a      	mov	r2, r3
 800461e:	7dfb      	ldrb	r3, [r7, #23]
 8004620:	4313      	orrs	r3, r2
 8004622:	75fb      	strb	r3, [r7, #23]

	
	return Status;
 8004624:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8004628:	4618      	mov	r0, r3
 800462a:	3718      	adds	r7, #24
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}

08004630 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b098      	sub	sp, #96	; 0x60
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	460b      	mov	r3, r1
 800463a:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800463c:	2300      	movs	r3, #0
 800463e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 8004642:	2300      	movs	r3, #0
 8004644:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 8004648:	2300      	movs	r3, #0
 800464a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 800464e:	2300      	movs	r3, #0
 8004650:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 8004652:	2300      	movs	r3, #0
 8004654:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 8004656:	2300      	movs	r3, #0
 8004658:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 800465a:	2300      	movs	r3, #0
 800465c:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 8004660:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8004664:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 8004666:	2300      	movs	r3, #0
 8004668:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 800466a:	2300      	movs	r3, #0
 800466c:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 800466e:	2300      	movs	r3, #0
 8004670:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8004678:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 800467c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004680:	2b07      	cmp	r3, #7
 8004682:	f000 8408 	beq.w	8004e96 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8004686:	2201      	movs	r2, #1
 8004688:	2180      	movs	r1, #128	; 0x80
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f002 f882 	bl	8006794 <VL53L0X_WrByte>
 8004690:	4603      	mov	r3, r0
 8004692:	461a      	mov	r2, r3
 8004694:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004698:	4313      	orrs	r3, r2
 800469a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800469e:	2201      	movs	r2, #1
 80046a0:	21ff      	movs	r1, #255	; 0xff
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f002 f876 	bl	8006794 <VL53L0X_WrByte>
 80046a8:	4603      	mov	r3, r0
 80046aa:	461a      	mov	r2, r3
 80046ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80046b0:	4313      	orrs	r3, r2
 80046b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80046b6:	2200      	movs	r2, #0
 80046b8:	2100      	movs	r1, #0
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f002 f86a 	bl	8006794 <VL53L0X_WrByte>
 80046c0:	4603      	mov	r3, r0
 80046c2:	461a      	mov	r2, r3
 80046c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80046c8:	4313      	orrs	r3, r2
 80046ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 80046ce:	2206      	movs	r2, #6
 80046d0:	21ff      	movs	r1, #255	; 0xff
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f002 f85e 	bl	8006794 <VL53L0X_WrByte>
 80046d8:	4603      	mov	r3, r0
 80046da:	461a      	mov	r2, r3
 80046dc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80046e0:	4313      	orrs	r3, r2
 80046e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 80046e6:	f107 0337 	add.w	r3, r7, #55	; 0x37
 80046ea:	461a      	mov	r2, r3
 80046ec:	2183      	movs	r1, #131	; 0x83
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f002 f8ce 	bl	8006890 <VL53L0X_RdByte>
 80046f4:	4603      	mov	r3, r0
 80046f6:	461a      	mov	r2, r3
 80046f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80046fc:	4313      	orrs	r3, r2
 80046fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8004702:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004706:	f043 0304 	orr.w	r3, r3, #4
 800470a:	b2db      	uxtb	r3, r3
 800470c:	461a      	mov	r2, r3
 800470e:	2183      	movs	r1, #131	; 0x83
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f002 f83f 	bl	8006794 <VL53L0X_WrByte>
 8004716:	4603      	mov	r3, r0
 8004718:	461a      	mov	r2, r3
 800471a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800471e:	4313      	orrs	r3, r2
 8004720:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8004724:	2207      	movs	r2, #7
 8004726:	21ff      	movs	r1, #255	; 0xff
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f002 f833 	bl	8006794 <VL53L0X_WrByte>
 800472e:	4603      	mov	r3, r0
 8004730:	461a      	mov	r2, r3
 8004732:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004736:	4313      	orrs	r3, r2
 8004738:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 800473c:	2201      	movs	r2, #1
 800473e:	2181      	movs	r1, #129	; 0x81
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f002 f827 	bl	8006794 <VL53L0X_WrByte>
 8004746:	4603      	mov	r3, r0
 8004748:	461a      	mov	r2, r3
 800474a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800474e:	4313      	orrs	r3, r2
 8004750:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f002 f8f8 	bl	800694a <VL53L0X_PollingDelay>
 800475a:	4603      	mov	r3, r0
 800475c:	461a      	mov	r2, r3
 800475e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004762:	4313      	orrs	r3, r2
 8004764:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8004768:	2201      	movs	r2, #1
 800476a:	2180      	movs	r1, #128	; 0x80
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f002 f811 	bl	8006794 <VL53L0X_WrByte>
 8004772:	4603      	mov	r3, r0
 8004774:	461a      	mov	r2, r3
 8004776:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800477a:	4313      	orrs	r3, r2
 800477c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 8004780:	78fb      	ldrb	r3, [r7, #3]
 8004782:	f003 0301 	and.w	r3, r3, #1
 8004786:	2b00      	cmp	r3, #0
 8004788:	f000 8098 	beq.w	80048bc <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800478c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004790:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8004794:	2b00      	cmp	r3, #0
 8004796:	f040 8091 	bne.w	80048bc <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 800479a:	226b      	movs	r2, #107	; 0x6b
 800479c:	2194      	movs	r1, #148	; 0x94
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f001 fff8 	bl	8006794 <VL53L0X_WrByte>
 80047a4:	4603      	mov	r3, r0
 80047a6:	461a      	mov	r2, r3
 80047a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80047ac:	4313      	orrs	r3, r2
 80047ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f7ff fef9 	bl	80045aa <VL53L0X_device_read_strobe>
 80047b8:	4603      	mov	r3, r0
 80047ba:	461a      	mov	r2, r3
 80047bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80047c0:	4313      	orrs	r3, r2
 80047c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80047c6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80047ca:	461a      	mov	r2, r3
 80047cc:	2190      	movs	r1, #144	; 0x90
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f002 f89c 	bl	800690c <VL53L0X_RdDWord>
 80047d4:	4603      	mov	r3, r0
 80047d6:	461a      	mov	r2, r3
 80047d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80047dc:	4313      	orrs	r3, r2
 80047de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 80047e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e4:	0a1b      	lsrs	r3, r3, #8
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047ec:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 80047f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f2:	0bdb      	lsrs	r3, r3, #15
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	f003 0301 	and.w	r3, r3, #1
 80047fa:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 80047fe:	2224      	movs	r2, #36	; 0x24
 8004800:	2194      	movs	r1, #148	; 0x94
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f001 ffc6 	bl	8006794 <VL53L0X_WrByte>
 8004808:	4603      	mov	r3, r0
 800480a:	461a      	mov	r2, r3
 800480c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004810:	4313      	orrs	r3, r2
 8004812:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f7ff fec7 	bl	80045aa <VL53L0X_device_read_strobe>
 800481c:	4603      	mov	r3, r0
 800481e:	461a      	mov	r2, r3
 8004820:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004824:	4313      	orrs	r3, r2
 8004826:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800482a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800482e:	461a      	mov	r2, r3
 8004830:	2190      	movs	r1, #144	; 0x90
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f002 f86a 	bl	800690c <VL53L0X_RdDWord>
 8004838:	4603      	mov	r3, r0
 800483a:	461a      	mov	r2, r3
 800483c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004840:	4313      	orrs	r3, r2
 8004842:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 8004846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004848:	0e1b      	lsrs	r3, r3, #24
 800484a:	b2db      	uxtb	r3, r3
 800484c:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 800484e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004850:	0c1b      	lsrs	r3, r3, #16
 8004852:	b2db      	uxtb	r3, r3
 8004854:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 8004856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004858:	0a1b      	lsrs	r3, r3, #8
 800485a:	b2db      	uxtb	r3, r3
 800485c:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 800485e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004860:	b2db      	uxtb	r3, r3
 8004862:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 8004864:	2225      	movs	r2, #37	; 0x25
 8004866:	2194      	movs	r1, #148	; 0x94
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f001 ff93 	bl	8006794 <VL53L0X_WrByte>
 800486e:	4603      	mov	r3, r0
 8004870:	461a      	mov	r2, r3
 8004872:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004876:	4313      	orrs	r3, r2
 8004878:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f7ff fe94 	bl	80045aa <VL53L0X_device_read_strobe>
 8004882:	4603      	mov	r3, r0
 8004884:	461a      	mov	r2, r3
 8004886:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800488a:	4313      	orrs	r3, r2
 800488c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8004890:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004894:	461a      	mov	r2, r3
 8004896:	2190      	movs	r1, #144	; 0x90
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	f002 f837 	bl	800690c <VL53L0X_RdDWord>
 800489e:	4603      	mov	r3, r0
 80048a0:	461a      	mov	r2, r3
 80048a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80048a6:	4313      	orrs	r3, r2
 80048a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 80048ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ae:	0e1b      	lsrs	r3, r3, #24
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 80048b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048b6:	0c1b      	lsrs	r3, r3, #16
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 80048bc:	78fb      	ldrb	r3, [r7, #3]
 80048be:	f003 0302 	and.w	r3, r3, #2
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	f000 8189 	beq.w	8004bda <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 80048c8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80048cc:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	f040 8182 	bne.w	8004bda <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 80048d6:	2202      	movs	r2, #2
 80048d8:	2194      	movs	r1, #148	; 0x94
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f001 ff5a 	bl	8006794 <VL53L0X_WrByte>
 80048e0:	4603      	mov	r3, r0
 80048e2:	461a      	mov	r2, r3
 80048e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80048e8:	4313      	orrs	r3, r2
 80048ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f7ff fe5b 	bl	80045aa <VL53L0X_device_read_strobe>
 80048f4:	4603      	mov	r3, r0
 80048f6:	461a      	mov	r2, r3
 80048f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80048fc:	4313      	orrs	r3, r2
 80048fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8004902:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8004906:	461a      	mov	r2, r3
 8004908:	2190      	movs	r1, #144	; 0x90
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f001 ffc0 	bl	8006890 <VL53L0X_RdByte>
 8004910:	4603      	mov	r3, r0
 8004912:	461a      	mov	r2, r3
 8004914:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004918:	4313      	orrs	r3, r2
 800491a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800491e:	227b      	movs	r2, #123	; 0x7b
 8004920:	2194      	movs	r1, #148	; 0x94
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f001 ff36 	bl	8006794 <VL53L0X_WrByte>
 8004928:	4603      	mov	r3, r0
 800492a:	461a      	mov	r2, r3
 800492c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004930:	4313      	orrs	r3, r2
 8004932:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f7ff fe37 	bl	80045aa <VL53L0X_device_read_strobe>
 800493c:	4603      	mov	r3, r0
 800493e:	461a      	mov	r2, r3
 8004940:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004944:	4313      	orrs	r3, r2
 8004946:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 800494a:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800494e:	461a      	mov	r2, r3
 8004950:	2190      	movs	r1, #144	; 0x90
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f001 ff9c 	bl	8006890 <VL53L0X_RdByte>
 8004958:	4603      	mov	r3, r0
 800495a:	461a      	mov	r2, r3
 800495c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004960:	4313      	orrs	r3, r2
 8004962:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 8004966:	2277      	movs	r2, #119	; 0x77
 8004968:	2194      	movs	r1, #148	; 0x94
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f001 ff12 	bl	8006794 <VL53L0X_WrByte>
 8004970:	4603      	mov	r3, r0
 8004972:	461a      	mov	r2, r3
 8004974:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004978:	4313      	orrs	r3, r2
 800497a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f7ff fe13 	bl	80045aa <VL53L0X_device_read_strobe>
 8004984:	4603      	mov	r3, r0
 8004986:	461a      	mov	r2, r3
 8004988:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800498c:	4313      	orrs	r3, r2
 800498e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8004992:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004996:	461a      	mov	r2, r3
 8004998:	2190      	movs	r1, #144	; 0x90
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f001 ffb6 	bl	800690c <VL53L0X_RdDWord>
 80049a0:	4603      	mov	r3, r0
 80049a2:	461a      	mov	r2, r3
 80049a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80049a8:	4313      	orrs	r3, r2
 80049aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 80049ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b0:	0e5b      	lsrs	r3, r3, #25
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 80049bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049be:	0c9b      	lsrs	r3, r3, #18
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 80049ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049cc:	0adb      	lsrs	r3, r3, #11
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 80049d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049da:	091b      	lsrs	r3, r3, #4
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 80049e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	00db      	lsls	r3, r3, #3
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	f003 0378 	and.w	r3, r3, #120	; 0x78
 80049f2:	b2db      	uxtb	r3, r3
 80049f4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 80049f8:	2278      	movs	r2, #120	; 0x78
 80049fa:	2194      	movs	r1, #148	; 0x94
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	f001 fec9 	bl	8006794 <VL53L0X_WrByte>
 8004a02:	4603      	mov	r3, r0
 8004a04:	461a      	mov	r2, r3
 8004a06:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f7ff fdca 	bl	80045aa <VL53L0X_device_read_strobe>
 8004a16:	4603      	mov	r3, r0
 8004a18:	461a      	mov	r2, r3
 8004a1a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8004a24:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004a28:	461a      	mov	r2, r3
 8004a2a:	2190      	movs	r1, #144	; 0x90
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f001 ff6d 	bl	800690c <VL53L0X_RdDWord>
 8004a32:	4603      	mov	r3, r0
 8004a34:	461a      	mov	r2, r3
 8004a36:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 8004a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a42:	0f5b      	lsrs	r3, r3, #29
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a4a:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 8004a4c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004a50:	4413      	add	r3, r2
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 8004a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a58:	0d9b      	lsrs	r3, r3, #22
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 8004a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a66:	0bdb      	lsrs	r3, r3, #15
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a6e:	b2db      	uxtb	r3, r3
 8004a70:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 8004a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a74:	0a1b      	lsrs	r3, r3, #8
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 8004a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a82:	085b      	lsrs	r3, r3, #1
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 8004a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	019b      	lsls	r3, r3, #6
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8004aa0:	2279      	movs	r2, #121	; 0x79
 8004aa2:	2194      	movs	r1, #148	; 0x94
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f001 fe75 	bl	8006794 <VL53L0X_WrByte>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	461a      	mov	r2, r3
 8004aae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f7ff fd76 	bl	80045aa <VL53L0X_device_read_strobe>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8004acc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	2190      	movs	r1, #144	; 0x90
 8004ad4:	6878      	ldr	r0, [r7, #4]
 8004ad6:	f001 ff19 	bl	800690c <VL53L0X_RdDWord>
 8004ada:	4603      	mov	r3, r0
 8004adc:	461a      	mov	r2, r3
 8004ade:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 8004ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aea:	0e9b      	lsrs	r3, r3, #26
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004af2:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 8004af4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004af8:	4413      	add	r3, r2
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 8004afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b00:	0cdb      	lsrs	r3, r3, #19
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b08:	b2db      	uxtb	r3, r3
 8004b0a:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 8004b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b0e:	0b1b      	lsrs	r3, r3, #12
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 8004b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b1c:	095b      	lsrs	r3, r3, #5
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 8004b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	009b      	lsls	r3, r3, #2
 8004b2e:	b2db      	uxtb	r3, r3
 8004b30:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8004b3a:	227a      	movs	r2, #122	; 0x7a
 8004b3c:	2194      	movs	r1, #148	; 0x94
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f001 fe28 	bl	8006794 <VL53L0X_WrByte>
 8004b44:	4603      	mov	r3, r0
 8004b46:	461a      	mov	r2, r3
 8004b48:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f7ff fd29 	bl	80045aa <VL53L0X_device_read_strobe>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	461a      	mov	r2, r3
 8004b5c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004b60:	4313      	orrs	r3, r2
 8004b62:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8004b66:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	2190      	movs	r1, #144	; 0x90
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f001 fecc 	bl	800690c <VL53L0X_RdDWord>
 8004b74:	4603      	mov	r3, r0
 8004b76:	461a      	mov	r2, r3
 8004b78:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 8004b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b84:	0f9b      	lsrs	r3, r3, #30
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b8c:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 8004b8e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004b92:	4413      	add	r3, r2
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 8004b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b9a:	0ddb      	lsrs	r3, r3, #23
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 8004ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ba8:	0c1b      	lsrs	r3, r3, #16
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 8004bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bb6:	0a5b      	lsrs	r3, r3, #9
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bbe:	b2db      	uxtb	r3, r3
 8004bc0:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 8004bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bc6:	089b      	lsrs	r3, r3, #2
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bce:	b2db      	uxtb	r3, r3
 8004bd0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 8004bda:	78fb      	ldrb	r3, [r7, #3]
 8004bdc:	f003 0304 	and.w	r3, r3, #4
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	f000 80f1 	beq.w	8004dc8 <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8004be6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004bea:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	f040 80ea 	bne.w	8004dc8 <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8004bf4:	227b      	movs	r2, #123	; 0x7b
 8004bf6:	2194      	movs	r1, #148	; 0x94
 8004bf8:	6878      	ldr	r0, [r7, #4]
 8004bfa:	f001 fdcb 	bl	8006794 <VL53L0X_WrByte>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	461a      	mov	r2, r3
 8004c02:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004c06:	4313      	orrs	r3, r2
 8004c08:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f7ff fccc 	bl	80045aa <VL53L0X_device_read_strobe>
 8004c12:	4603      	mov	r3, r0
 8004c14:	461a      	mov	r2, r3
 8004c16:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 8004c20:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004c24:	461a      	mov	r2, r3
 8004c26:	2190      	movs	r1, #144	; 0x90
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f001 fe6f 	bl	800690c <VL53L0X_RdDWord>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	461a      	mov	r2, r3
 8004c32:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004c36:	4313      	orrs	r3, r2
 8004c38:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8004c3c:	227c      	movs	r2, #124	; 0x7c
 8004c3e:	2194      	movs	r1, #148	; 0x94
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f001 fda7 	bl	8006794 <VL53L0X_WrByte>
 8004c46:	4603      	mov	r3, r0
 8004c48:	461a      	mov	r2, r3
 8004c4a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	f7ff fca8 	bl	80045aa <VL53L0X_device_read_strobe>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	461a      	mov	r2, r3
 8004c5e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004c62:	4313      	orrs	r3, r2
 8004c64:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 8004c68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c6c:	461a      	mov	r2, r3
 8004c6e:	2190      	movs	r1, #144	; 0x90
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	f001 fe4b 	bl	800690c <VL53L0X_RdDWord>
 8004c76:	4603      	mov	r3, r0
 8004c78:	461a      	mov	r2, r3
 8004c7a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 8004c84:	2273      	movs	r2, #115	; 0x73
 8004c86:	2194      	movs	r1, #148	; 0x94
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f001 fd83 	bl	8006794 <VL53L0X_WrByte>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	461a      	mov	r2, r3
 8004c92:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004c96:	4313      	orrs	r3, r2
 8004c98:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f7ff fc84 	bl	80045aa <VL53L0X_device_read_strobe>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004caa:	4313      	orrs	r3, r2
 8004cac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8004cb0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	2190      	movs	r1, #144	; 0x90
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f001 fe27 	bl	800690c <VL53L0X_RdDWord>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 8004ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cce:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8004cd4:	2274      	movs	r2, #116	; 0x74
 8004cd6:	2194      	movs	r1, #148	; 0x94
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f001 fd5b 	bl	8006794 <VL53L0X_WrByte>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f7ff fc5c 	bl	80045aa <VL53L0X_device_read_strobe>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8004d00:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004d04:	461a      	mov	r2, r3
 8004d06:	2190      	movs	r1, #144	; 0x90
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	f001 fdff 	bl	800690c <VL53L0X_RdDWord>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	461a      	mov	r2, r3
 8004d12:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004d16:	4313      	orrs	r3, r2
 8004d18:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 8004d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d1e:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 8004d20:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004d22:	4313      	orrs	r3, r2
 8004d24:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8004d26:	2275      	movs	r2, #117	; 0x75
 8004d28:	2194      	movs	r1, #148	; 0x94
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f001 fd32 	bl	8006794 <VL53L0X_WrByte>
 8004d30:	4603      	mov	r3, r0
 8004d32:	461a      	mov	r2, r3
 8004d34:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f7ff fc33 	bl	80045aa <VL53L0X_device_read_strobe>
 8004d44:	4603      	mov	r3, r0
 8004d46:	461a      	mov	r2, r3
 8004d48:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8004d52:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004d56:	461a      	mov	r2, r3
 8004d58:	2190      	movs	r1, #144	; 0x90
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f001 fdd6 	bl	800690c <VL53L0X_RdDWord>
 8004d60:	4603      	mov	r3, r0
 8004d62:	461a      	mov	r2, r3
 8004d64:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 8004d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d70:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 8004d76:	2276      	movs	r2, #118	; 0x76
 8004d78:	2194      	movs	r1, #148	; 0x94
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f001 fd0a 	bl	8006794 <VL53L0X_WrByte>
 8004d80:	4603      	mov	r3, r0
 8004d82:	461a      	mov	r2, r3
 8004d84:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f7ff fc0b 	bl	80045aa <VL53L0X_device_read_strobe>
 8004d94:	4603      	mov	r3, r0
 8004d96:	461a      	mov	r2, r3
 8004d98:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8004da2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004da6:	461a      	mov	r2, r3
 8004da8:	2190      	movs	r1, #144	; 0x90
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f001 fdae 	bl	800690c <VL53L0X_RdDWord>
 8004db0:	4603      	mov	r3, r0
 8004db2:	461a      	mov	r2, r3
 8004db4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004db8:	4313      	orrs	r3, r2
 8004dba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 8004dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dc0:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 8004dc2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 8004dc8:	2200      	movs	r2, #0
 8004dca:	2181      	movs	r1, #129	; 0x81
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f001 fce1 	bl	8006794 <VL53L0X_WrByte>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8004de0:	2206      	movs	r2, #6
 8004de2:	21ff      	movs	r1, #255	; 0xff
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f001 fcd5 	bl	8006794 <VL53L0X_WrByte>
 8004dea:	4603      	mov	r3, r0
 8004dec:	461a      	mov	r2, r3
 8004dee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004df2:	4313      	orrs	r3, r2
 8004df4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8004df8:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8004dfc:	461a      	mov	r2, r3
 8004dfe:	2183      	movs	r1, #131	; 0x83
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f001 fd45 	bl	8006890 <VL53L0X_RdByte>
 8004e06:	4603      	mov	r3, r0
 8004e08:	461a      	mov	r2, r3
 8004e0a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8004e14:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004e18:	f023 0304 	bic.w	r3, r3, #4
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	461a      	mov	r2, r3
 8004e20:	2183      	movs	r1, #131	; 0x83
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f001 fcb6 	bl	8006794 <VL53L0X_WrByte>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	461a      	mov	r2, r3
 8004e2c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004e30:	4313      	orrs	r3, r2
 8004e32:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8004e36:	2201      	movs	r2, #1
 8004e38:	21ff      	movs	r1, #255	; 0xff
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f001 fcaa 	bl	8006794 <VL53L0X_WrByte>
 8004e40:	4603      	mov	r3, r0
 8004e42:	461a      	mov	r2, r3
 8004e44:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8004e4e:	2201      	movs	r2, #1
 8004e50:	2100      	movs	r1, #0
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f001 fc9e 	bl	8006794 <VL53L0X_WrByte>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004e60:	4313      	orrs	r3, r2
 8004e62:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004e66:	2200      	movs	r2, #0
 8004e68:	21ff      	movs	r1, #255	; 0xff
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f001 fc92 	bl	8006794 <VL53L0X_WrByte>
 8004e70:	4603      	mov	r3, r0
 8004e72:	461a      	mov	r2, r3
 8004e74:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8004e7e:	2200      	movs	r2, #0
 8004e80:	2180      	movs	r1, #128	; 0x80
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f001 fc86 	bl	8006794 <VL53L0X_WrByte>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004e90:	4313      	orrs	r3, r2
 8004e92:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8004e96:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	f040 8089 	bne.w	8004fb2 <VL53L0X_get_info_from_device+0x982>
 8004ea0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004ea4:	2b07      	cmp	r3, #7
 8004ea6:	f000 8084 	beq.w	8004fb2 <VL53L0X_get_info_from_device+0x982>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 8004eaa:	78fb      	ldrb	r3, [r7, #3]
 8004eac:	f003 0301 	and.w	r3, r3, #1
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d024      	beq.n	8004efe <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8004eb4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004eb8:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d11e      	bne.n	8004efe <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8004ec6:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8004ed0:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ed8:	e00e      	b.n	8004ef8 <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 8004eda:	f107 0208 	add.w	r2, r7, #8
 8004ede:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ee0:	4413      	add	r3, r2
 8004ee2:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ee8:	4413      	add	r3, r2
 8004eea:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8004eee:	460a      	mov	r2, r1
 8004ef0:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8004ef2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ef4:	3301      	adds	r3, #1
 8004ef6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ef8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004efa:	2b05      	cmp	r3, #5
 8004efc:	dded      	ble.n	8004eda <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 8004efe:	78fb      	ldrb	r3, [r7, #3]
 8004f00:	f003 0302 	and.w	r3, r3, #2
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d012      	beq.n	8004f2e <VL53L0X_get_info_from_device+0x8fe>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8004f08:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004f0c:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d10c      	bne.n	8004f2e <VL53L0X_get_info_from_device+0x8fe>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004f14:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004f1e:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	33f3      	adds	r3, #243	; 0xf3
 8004f2c:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);

		}

		if (((option & 4) == 4) &&
 8004f2e:	78fb      	ldrb	r3, [r7, #3]
 8004f30:	f003 0304 	and.w	r3, r3, #4
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d030      	beq.n	8004f9a <VL53L0X_get_info_from_device+0x96a>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8004f38:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004f3c:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d12a      	bne.n	8004f9a <VL53L0X_get_info_from_device+0x96a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004f44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004f4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 8004f54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f56:	025b      	lsls	r3, r3, #9
 8004f58:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004f5e:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 8004f62:	2300      	movs	r3, #0
 8004f64:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 8004f68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d011      	beq.n	8004f92 <VL53L0X_get_info_from_device+0x962>
					OffsetFixed1104_mm =
 8004f6e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004f70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f72:	1ad3      	subs	r3, r2, r3
 8004f74:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 8004f76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004f7c:	fb02 f303 	mul.w	r3, r2, r3
 8004f80:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 8004f82:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 8004f86:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004f8a:	425b      	negs	r3, r3
 8004f8c:	b29b      	uxth	r3, r3
 8004f8e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 8004f92:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 8004f9a:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8004f9e:	78fb      	ldrb	r3, [r7, #3]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 8004fa8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	
	return Status;
 8004fb2:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3760      	adds	r7, #96	; 0x60
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}

08004fbe <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 8004fbe:	b490      	push	{r4, r7}
 8004fc0:	b086      	sub	sp, #24
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	6078      	str	r0, [r7, #4]
 8004fc6:	460b      	mov	r3, r1
 8004fc8:	70fb      	strb	r3, [r7, #3]
	

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 8004fca:	f240 6377 	movw	r3, #1655	; 0x677
 8004fce:	f04f 0400 	mov.w	r4, #0
 8004fd2:	e9c7 3404 	strd	r3, r4, [r7, #16]

	macro_period_vclks = 2304;
 8004fd6:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8004fda:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 8004fdc:	78fb      	ldrb	r3, [r7, #3]
 8004fde:	68fa      	ldr	r2, [r7, #12]
 8004fe0:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 8004fe4:	693a      	ldr	r2, [r7, #16]
 8004fe6:	fb02 f303 	mul.w	r3, r2, r3
 8004fea:	60bb      	str	r3, [r7, #8]

	return macro_period_ps;
 8004fec:	68bb      	ldr	r3, [r7, #8]
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3718      	adds	r7, #24
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bc90      	pop	{r4, r7}
 8004ff6:	4770      	bx	lr

08004ff8 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b087      	sub	sp, #28
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 8005000:	2300      	movs	r3, #0
 8005002:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8005004:	2300      	movs	r3, #0
 8005006:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8005008:	2300      	movs	r3, #0
 800500a:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d017      	beq.n	8005042 <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	3b01      	subs	r3, #1
 8005016:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8005018:	e005      	b.n	8005026 <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	085b      	lsrs	r3, r3, #1
 800501e:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8005020:	89fb      	ldrh	r3, [r7, #14]
 8005022:	3301      	adds	r3, #1
 8005024:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800502c:	2b00      	cmp	r3, #0
 800502e:	d1f4      	bne.n	800501a <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8005030:	89fb      	ldrh	r3, [r7, #14]
 8005032:	021b      	lsls	r3, r3, #8
 8005034:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	b29b      	uxth	r3, r3
 800503a:	b2db      	uxtb	r3, r3
 800503c:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800503e:	4413      	add	r3, r2
 8005040:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 8005042:	8afb      	ldrh	r3, [r7, #22]

}
 8005044:	4618      	mov	r0, r3
 8005046:	371c      	adds	r7, #28
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr

08005050 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 8005050:	b480      	push	{r7}
 8005052:	b085      	sub	sp, #20
 8005054:	af00      	add	r7, sp, #0
 8005056:	4603      	mov	r3, r0
 8005058:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 800505a:	2300      	movs	r3, #0
 800505c:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800505e:	88fb      	ldrh	r3, [r7, #6]
 8005060:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8005062:	88fa      	ldrh	r2, [r7, #6]
 8005064:	0a12      	lsrs	r2, r2, #8
 8005066:	b292      	uxth	r2, r2
 8005068:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800506a:	3301      	adds	r3, #1
 800506c:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800506e:	68fb      	ldr	r3, [r7, #12]
}
 8005070:	4618      	mov	r0, r3
 8005072:	3714      	adds	r7, #20
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr

0800507c <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b088      	sub	sp, #32
 8005080:	af00      	add	r7, sp, #0
 8005082:	60f8      	str	r0, [r7, #12]
 8005084:	60b9      	str	r1, [r7, #8]
 8005086:	4613      	mov	r3, r2
 8005088:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 800508a:	2300      	movs	r3, #0
 800508c:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800508e:	79fb      	ldrb	r3, [r7, #7]
 8005090:	4619      	mov	r1, r3
 8005092:	68f8      	ldr	r0, [r7, #12]
 8005094:	f7ff ff93 	bl	8004fbe <VL53L0X_calc_macro_period_ps>
 8005098:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800509a:	69bb      	ldr	r3, [r7, #24]
 800509c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80050a0:	4a0a      	ldr	r2, [pc, #40]	; (80050cc <VL53L0X_calc_timeout_mclks+0x50>)
 80050a2:	fba2 2303 	umull	r2, r3, r2, r3
 80050a6:	099b      	lsrs	r3, r3, #6
 80050a8:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80050b0:	fb02 f203 	mul.w	r2, r2, r3
		+ (macro_period_ns / 2)) / macro_period_ns);
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	085b      	lsrs	r3, r3, #1
 80050b8:	441a      	add	r2, r3
	timeout_period_mclks =
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80050c0:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 80050c2:	69fb      	ldr	r3, [r7, #28]
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3720      	adds	r7, #32
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}
 80050cc:	10624dd3 	.word	0x10624dd3

080050d0 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b086      	sub	sp, #24
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	460b      	mov	r3, r1
 80050da:	807b      	strh	r3, [r7, #2]
 80050dc:	4613      	mov	r3, r2
 80050de:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 80050e0:	2300      	movs	r3, #0
 80050e2:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 80050e4:	787b      	ldrb	r3, [r7, #1]
 80050e6:	4619      	mov	r1, r3
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f7ff ff68 	bl	8004fbe <VL53L0X_calc_macro_period_ps>
 80050ee:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80050f6:	4a0a      	ldr	r2, [pc, #40]	; (8005120 <VL53L0X_calc_timeout_us+0x50>)
 80050f8:	fba2 2303 	umull	r2, r3, r2, r3
 80050fc:	099b      	lsrs	r3, r3, #6
 80050fe:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 8005100:	887b      	ldrh	r3, [r7, #2]
 8005102:	68fa      	ldr	r2, [r7, #12]
 8005104:	fb02 f303 	mul.w	r3, r2, r3
 8005108:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 800510c:	4a04      	ldr	r2, [pc, #16]	; (8005120 <VL53L0X_calc_timeout_us+0x50>)
 800510e:	fba2 2303 	umull	r2, r3, r2, r3
 8005112:	099b      	lsrs	r3, r3, #6
 8005114:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 8005116:	697b      	ldr	r3, [r7, #20]
}
 8005118:	4618      	mov	r0, r3
 800511a:	3718      	adds	r7, #24
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}
 8005120:	10624dd3 	.word	0x10624dd3

08005124 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b08c      	sub	sp, #48	; 0x30
 8005128:	af00      	add	r7, sp, #0
 800512a:	60f8      	str	r0, [r7, #12]
 800512c:	460b      	mov	r3, r1
 800512e:	607a      	str	r2, [r7, #4]
 8005130:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005132:	2300      	movs	r3, #0
 8005134:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 8005138:	2300      	movs	r3, #0
 800513a:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 800513e:	2300      	movs	r3, #0
 8005140:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 8005142:	2300      	movs	r3, #0
 8005144:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 8005146:	2300      	movs	r3, #0
 8005148:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800514a:	7afb      	ldrb	r3, [r7, #11]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d005      	beq.n	800515c <get_sequence_step_timeout+0x38>
 8005150:	7afb      	ldrb	r3, [r7, #11]
 8005152:	2b01      	cmp	r3, #1
 8005154:	d002      	beq.n	800515c <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8005156:	7afb      	ldrb	r3, [r7, #11]
 8005158:	2b02      	cmp	r3, #2
 800515a:	d128      	bne.n	80051ae <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800515c:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8005160:	461a      	mov	r2, r3
 8005162:	2100      	movs	r1, #0
 8005164:	68f8      	ldr	r0, [r7, #12]
 8005166:	f7fd fad7 	bl	8002718 <VL53L0X_GetVcselPulsePeriod>
 800516a:	4603      	mov	r3, r0
 800516c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 8005170:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005174:	2b00      	cmp	r3, #0
 8005176:	d109      	bne.n	800518c <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 8005178:	f107 0320 	add.w	r3, r7, #32
 800517c:	461a      	mov	r2, r3
 800517e:	2146      	movs	r1, #70	; 0x46
 8005180:	68f8      	ldr	r0, [r7, #12]
 8005182:	f001 fb85 	bl	8006890 <VL53L0X_RdByte>
 8005186:	4603      	mov	r3, r0
 8005188:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 800518c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005190:	b29b      	uxth	r3, r3
 8005192:	4618      	mov	r0, r3
 8005194:	f7ff ff5c 	bl	8005050 <VL53L0X_decode_timeout>
 8005198:	4603      	mov	r3, r0
 800519a:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800519c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80051a0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80051a2:	4619      	mov	r1, r3
 80051a4:	68f8      	ldr	r0, [r7, #12]
 80051a6:	f7ff ff93 	bl	80050d0 <VL53L0X_calc_timeout_us>
 80051aa:	62b8      	str	r0, [r7, #40]	; 0x28
 80051ac:	e092      	b.n	80052d4 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 80051ae:	7afb      	ldrb	r3, [r7, #11]
 80051b0:	2b03      	cmp	r3, #3
 80051b2:	d135      	bne.n	8005220 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80051b4:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80051b8:	461a      	mov	r2, r3
 80051ba:	2100      	movs	r1, #0
 80051bc:	68f8      	ldr	r0, [r7, #12]
 80051be:	f7fd faab 	bl	8002718 <VL53L0X_GetVcselPulsePeriod>
 80051c2:	4603      	mov	r3, r0
 80051c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 80051c8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	f040 8081 	bne.w	80052d4 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80051d2:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80051d6:	461a      	mov	r2, r3
 80051d8:	2100      	movs	r1, #0
 80051da:	68f8      	ldr	r0, [r7, #12]
 80051dc:	f7fd fa9c 	bl	8002718 <VL53L0X_GetVcselPulsePeriod>
 80051e0:	4603      	mov	r3, r0
 80051e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 80051e6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d109      	bne.n	8005202 <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 80051ee:	f107 031e 	add.w	r3, r7, #30
 80051f2:	461a      	mov	r2, r3
 80051f4:	2151      	movs	r1, #81	; 0x51
 80051f6:	68f8      	ldr	r0, [r7, #12]
 80051f8:	f001 fb69 	bl	80068ce <VL53L0X_RdWord>
 80051fc:	4603      	mov	r3, r0
 80051fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8005202:	8bfb      	ldrh	r3, [r7, #30]
 8005204:	4618      	mov	r0, r3
 8005206:	f7ff ff23 	bl	8005050 <VL53L0X_decode_timeout>
 800520a:	4603      	mov	r3, r0
 800520c:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800520e:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8005212:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005214:	4619      	mov	r1, r3
 8005216:	68f8      	ldr	r0, [r7, #12]
 8005218:	f7ff ff5a 	bl	80050d0 <VL53L0X_calc_timeout_us>
 800521c:	62b8      	str	r0, [r7, #40]	; 0x28
 800521e:	e059      	b.n	80052d4 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8005220:	7afb      	ldrb	r3, [r7, #11]
 8005222:	2b04      	cmp	r3, #4
 8005224:	d156      	bne.n	80052d4 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8005226:	f107 0314 	add.w	r3, r7, #20
 800522a:	4619      	mov	r1, r3
 800522c:	68f8      	ldr	r0, [r7, #12]
 800522e:	f7fd fb7d 	bl	800292c <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 8005232:	2300      	movs	r3, #0
 8005234:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 8005236:	7dfb      	ldrb	r3, [r7, #23]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d01d      	beq.n	8005278 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800523c:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8005240:	461a      	mov	r2, r3
 8005242:	2100      	movs	r1, #0
 8005244:	68f8      	ldr	r0, [r7, #12]
 8005246:	f7fd fa67 	bl	8002718 <VL53L0X_GetVcselPulsePeriod>
 800524a:	4603      	mov	r3, r0
 800524c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 8005250:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005254:	2b00      	cmp	r3, #0
 8005256:	d10f      	bne.n	8005278 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 8005258:	f107 031e 	add.w	r3, r7, #30
 800525c:	461a      	mov	r2, r3
 800525e:	2151      	movs	r1, #81	; 0x51
 8005260:	68f8      	ldr	r0, [r7, #12]
 8005262:	f001 fb34 	bl	80068ce <VL53L0X_RdWord>
 8005266:	4603      	mov	r3, r0
 8005268:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800526c:	8bfb      	ldrh	r3, [r7, #30]
 800526e:	4618      	mov	r0, r3
 8005270:	f7ff feee 	bl	8005050 <VL53L0X_decode_timeout>
 8005274:	4603      	mov	r3, r0
 8005276:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8005278:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800527c:	2b00      	cmp	r3, #0
 800527e:	d109      	bne.n	8005294 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005280:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8005284:	461a      	mov	r2, r3
 8005286:	2101      	movs	r1, #1
 8005288:	68f8      	ldr	r0, [r7, #12]
 800528a:	f7fd fa45 	bl	8002718 <VL53L0X_GetVcselPulsePeriod>
 800528e:	4603      	mov	r3, r0
 8005290:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8005294:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005298:	2b00      	cmp	r3, #0
 800529a:	d10f      	bne.n	80052bc <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 800529c:	f107 031c 	add.w	r3, r7, #28
 80052a0:	461a      	mov	r2, r3
 80052a2:	2171      	movs	r1, #113	; 0x71
 80052a4:	68f8      	ldr	r0, [r7, #12]
 80052a6:	f001 fb12 	bl	80068ce <VL53L0X_RdWord>
 80052aa:	4603      	mov	r3, r0
 80052ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 80052b0:	8bbb      	ldrh	r3, [r7, #28]
 80052b2:	4618      	mov	r0, r3
 80052b4:	f7ff fecc 	bl	8005050 <VL53L0X_decode_timeout>
 80052b8:	4603      	mov	r3, r0
 80052ba:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 80052bc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80052be:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 80052c4:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80052c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80052ca:	4619      	mov	r1, r3
 80052cc:	68f8      	ldr	r0, [r7, #12]
 80052ce:	f7ff feff 	bl	80050d0 <VL53L0X_calc_timeout_us>
 80052d2:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052d8:	601a      	str	r2, [r3, #0]

	return Status;
 80052da:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3730      	adds	r7, #48	; 0x30
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}

080052e6 <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 80052e6:	b580      	push	{r7, lr}
 80052e8:	b08a      	sub	sp, #40	; 0x28
 80052ea:	af00      	add	r7, sp, #0
 80052ec:	60f8      	str	r0, [r7, #12]
 80052ee:	460b      	mov	r3, r1
 80052f0:	607a      	str	r2, [r7, #4]
 80052f2:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80052f4:	2300      	movs	r3, #0
 80052f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 80052fa:	7afb      	ldrb	r3, [r7, #11]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d005      	beq.n	800530c <set_sequence_step_timeout+0x26>
 8005300:	7afb      	ldrb	r3, [r7, #11]
 8005302:	2b01      	cmp	r3, #1
 8005304:	d002      	beq.n	800530c <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8005306:	7afb      	ldrb	r3, [r7, #11]
 8005308:	2b02      	cmp	r3, #2
 800530a:	d138      	bne.n	800537e <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800530c:	f107 031b 	add.w	r3, r7, #27
 8005310:	461a      	mov	r2, r3
 8005312:	2100      	movs	r1, #0
 8005314:	68f8      	ldr	r0, [r7, #12]
 8005316:	f7fd f9ff 	bl	8002718 <VL53L0X_GetVcselPulsePeriod>
 800531a:	4603      	mov	r3, r0
 800531c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 8005320:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005324:	2b00      	cmp	r3, #0
 8005326:	d11a      	bne.n	800535e <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 8005328:	7efb      	ldrb	r3, [r7, #27]
 800532a:	461a      	mov	r2, r3
 800532c:	6879      	ldr	r1, [r7, #4]
 800532e:	68f8      	ldr	r0, [r7, #12]
 8005330:	f7ff fea4 	bl	800507c <VL53L0X_calc_timeout_mclks>
 8005334:	4603      	mov	r3, r0
 8005336:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 8005338:	8bbb      	ldrh	r3, [r7, #28]
 800533a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800533e:	d903      	bls.n	8005348 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 8005340:	23ff      	movs	r3, #255	; 0xff
 8005342:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005346:	e004      	b.n	8005352 <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 8005348:	8bbb      	ldrh	r3, [r7, #28]
 800534a:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 800534c:	3b01      	subs	r3, #1
 800534e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005352:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005356:	b29a      	uxth	r2, r3
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800535e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005362:	2b00      	cmp	r3, #0
 8005364:	f040 80ab 	bne.w	80054be <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 8005368:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800536c:	461a      	mov	r2, r3
 800536e:	2146      	movs	r1, #70	; 0x46
 8005370:	68f8      	ldr	r0, [r7, #12]
 8005372:	f001 fa0f 	bl	8006794 <VL53L0X_WrByte>
 8005376:	4603      	mov	r3, r0
 8005378:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 800537c:	e09f      	b.n	80054be <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800537e:	7afb      	ldrb	r3, [r7, #11]
 8005380:	2b03      	cmp	r3, #3
 8005382:	d135      	bne.n	80053f0 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 8005384:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005388:	2b00      	cmp	r3, #0
 800538a:	d11b      	bne.n	80053c4 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800538c:	f107 031b 	add.w	r3, r7, #27
 8005390:	461a      	mov	r2, r3
 8005392:	2100      	movs	r1, #0
 8005394:	68f8      	ldr	r0, [r7, #12]
 8005396:	f7fd f9bf 	bl	8002718 <VL53L0X_GetVcselPulsePeriod>
 800539a:	4603      	mov	r3, r0
 800539c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 80053a0:	7efb      	ldrb	r3, [r7, #27]
 80053a2:	461a      	mov	r2, r3
 80053a4:	6879      	ldr	r1, [r7, #4]
 80053a6:	68f8      	ldr	r0, [r7, #12]
 80053a8:	f7ff fe68 	bl	800507c <VL53L0X_calc_timeout_mclks>
 80053ac:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 80053ae:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 80053b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80053b2:	4618      	mov	r0, r3
 80053b4:	f7ff fe20 	bl	8004ff8 <VL53L0X_encode_timeout>
 80053b8:	4603      	mov	r3, r0
 80053ba:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80053bc:	8b3a      	ldrh	r2, [r7, #24]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 80053c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d108      	bne.n	80053de <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 80053cc:	8b3b      	ldrh	r3, [r7, #24]
 80053ce:	461a      	mov	r2, r3
 80053d0:	2151      	movs	r1, #81	; 0x51
 80053d2:	68f8      	ldr	r0, [r7, #12]
 80053d4:	f001 f9fe 	bl	80067d4 <VL53L0X_WrWord>
 80053d8:	4603      	mov	r3, r0
 80053da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 80053de:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d16b      	bne.n	80054be <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	687a      	ldr	r2, [r7, #4]
 80053ea:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 80053ee:	e066      	b.n	80054be <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 80053f0:	7afb      	ldrb	r3, [r7, #11]
 80053f2:	2b04      	cmp	r3, #4
 80053f4:	d160      	bne.n	80054b8 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 80053f6:	f107 0310 	add.w	r3, r7, #16
 80053fa:	4619      	mov	r1, r3
 80053fc:	68f8      	ldr	r0, [r7, #12]
 80053fe:	f7fd fa95 	bl	800292c <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 8005402:	2300      	movs	r3, #0
 8005404:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 8005406:	7cfb      	ldrb	r3, [r7, #19]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d01d      	beq.n	8005448 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800540c:	f107 031b 	add.w	r3, r7, #27
 8005410:	461a      	mov	r2, r3
 8005412:	2100      	movs	r1, #0
 8005414:	68f8      	ldr	r0, [r7, #12]
 8005416:	f7fd f97f 	bl	8002718 <VL53L0X_GetVcselPulsePeriod>
 800541a:	4603      	mov	r3, r0
 800541c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 8005420:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005424:	2b00      	cmp	r3, #0
 8005426:	d10f      	bne.n	8005448 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 8005428:	f107 0318 	add.w	r3, r7, #24
 800542c:	461a      	mov	r2, r3
 800542e:	2151      	movs	r1, #81	; 0x51
 8005430:	68f8      	ldr	r0, [r7, #12]
 8005432:	f001 fa4c 	bl	80068ce <VL53L0X_RdWord>
 8005436:	4603      	mov	r3, r0
 8005438:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 800543c:	8b3b      	ldrh	r3, [r7, #24]
 800543e:	4618      	mov	r0, r3
 8005440:	f7ff fe06 	bl	8005050 <VL53L0X_decode_timeout>
 8005444:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 8005446:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8005448:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800544c:	2b00      	cmp	r3, #0
 800544e:	d109      	bne.n	8005464 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005450:	f107 031b 	add.w	r3, r7, #27
 8005454:	461a      	mov	r2, r3
 8005456:	2101      	movs	r1, #1
 8005458:	68f8      	ldr	r0, [r7, #12]
 800545a:	f7fd f95d 	bl	8002718 <VL53L0X_GetVcselPulsePeriod>
 800545e:	4603      	mov	r3, r0
 8005460:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8005464:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005468:	2b00      	cmp	r3, #0
 800546a:	d128      	bne.n	80054be <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800546c:	7efb      	ldrb	r3, [r7, #27]
				FinalRangeTimeOutMClks =
 800546e:	461a      	mov	r2, r3
 8005470:	6879      	ldr	r1, [r7, #4]
 8005472:	68f8      	ldr	r0, [r7, #12]
 8005474:	f7ff fe02 	bl	800507c <VL53L0X_calc_timeout_mclks>
 8005478:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 800547a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800547c:	6a3a      	ldr	r2, [r7, #32]
 800547e:	4413      	add	r3, r2
 8005480:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
 8005482:	6a38      	ldr	r0, [r7, #32]
 8005484:	f7ff fdb8 	bl	8004ff8 <VL53L0X_encode_timeout>
 8005488:	4603      	mov	r3, r0
 800548a:	83fb      	strh	r3, [r7, #30]
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);

				if (Status == VL53L0X_ERROR_NONE) {
 800548c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005490:	2b00      	cmp	r3, #0
 8005492:	d108      	bne.n	80054a6 <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 8005494:	8bfb      	ldrh	r3, [r7, #30]
 8005496:	461a      	mov	r2, r3
 8005498:	2171      	movs	r1, #113	; 0x71
 800549a:	68f8      	ldr	r0, [r7, #12]
 800549c:	f001 f99a 	bl	80067d4 <VL53L0X_WrWord>
 80054a0:	4603      	mov	r3, r0
 80054a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 80054a6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d107      	bne.n	80054be <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 80054b6:	e002      	b.n	80054be <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80054b8:	23fc      	movs	r3, #252	; 0xfc
 80054ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 80054be:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3728      	adds	r7, #40	; 0x28
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}

080054ca <VL53L0X_get_vcsel_pulse_period>:
	return Status;
}

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 80054ca:	b580      	push	{r7, lr}
 80054cc:	b086      	sub	sp, #24
 80054ce:	af00      	add	r7, sp, #0
 80054d0:	60f8      	str	r0, [r7, #12]
 80054d2:	460b      	mov	r3, r1
 80054d4:	607a      	str	r2, [r7, #4]
 80054d6:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80054d8:	2300      	movs	r3, #0
 80054da:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 80054dc:	7afb      	ldrb	r3, [r7, #11]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d002      	beq.n	80054e8 <VL53L0X_get_vcsel_pulse_period+0x1e>
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d00a      	beq.n	80054fc <VL53L0X_get_vcsel_pulse_period+0x32>
 80054e6:	e013      	b.n	8005510 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 80054e8:	f107 0316 	add.w	r3, r7, #22
 80054ec:	461a      	mov	r2, r3
 80054ee:	2150      	movs	r1, #80	; 0x50
 80054f0:	68f8      	ldr	r0, [r7, #12]
 80054f2:	f001 f9cd 	bl	8006890 <VL53L0X_RdByte>
 80054f6:	4603      	mov	r3, r0
 80054f8:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 80054fa:	e00b      	b.n	8005514 <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 80054fc:	f107 0316 	add.w	r3, r7, #22
 8005500:	461a      	mov	r2, r3
 8005502:	2170      	movs	r1, #112	; 0x70
 8005504:	68f8      	ldr	r0, [r7, #12]
 8005506:	f001 f9c3 	bl	8006890 <VL53L0X_RdByte>
 800550a:	4603      	mov	r3, r0
 800550c:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800550e:	e001      	b.n	8005514 <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005510:	23fc      	movs	r3, #252	; 0xfc
 8005512:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 8005514:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d107      	bne.n	800552c <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 800551c:	7dbb      	ldrb	r3, [r7, #22]
 800551e:	4618      	mov	r0, r3
 8005520:	f7fe fffc 	bl	800451c <VL53L0X_decode_vcsel_period>
 8005524:	4603      	mov	r3, r0
 8005526:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	701a      	strb	r2, [r3, #0]

	return Status;
 800552c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005530:	4618      	mov	r0, r3
 8005532:	3718      	adds	r7, #24
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}

08005538 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b092      	sub	sp, #72	; 0x48
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005542:	2300      	movs	r3, #0
 8005544:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8005548:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800554c:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800554e:	f240 7376 	movw	r3, #1910	; 0x776
 8005552:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 8005554:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8005558:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800555a:	f44f 7325 	mov.w	r3, #660	; 0x294
 800555e:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 8005560:	f240 234e 	movw	r3, #590	; 0x24e
 8005564:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 8005566:	f240 23b2 	movw	r3, #690	; 0x2b2
 800556a:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800556c:	f44f 7325 	mov.w	r3, #660	; 0x294
 8005570:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8005572:	f240 2326 	movw	r3, #550	; 0x226
 8005576:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8005578:	2300      	movs	r3, #0
 800557a:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 800557c:	f644 6320 	movw	r3, #20000	; 0x4e20
 8005580:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 8005582:	2300      	movs	r3, #0
 8005584:	61fb      	str	r3, [r7, #28]

	

	if (MeasurementTimingBudgetMicroSeconds
 8005586:	683a      	ldr	r2, [r7, #0]
 8005588:	6a3b      	ldr	r3, [r7, #32]
 800558a:	429a      	cmp	r2, r3
 800558c:	d205      	bcs.n	800559a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800558e:	23fc      	movs	r3, #252	; 0xfc
 8005590:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 8005594:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8005598:	e0aa      	b.n	80056f0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 800559a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800559c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800559e:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 80055a0:	683a      	ldr	r2, [r7, #0]
 80055a2:	1ad3      	subs	r3, r2, r3
 80055a4:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 80055a6:	f107 0314 	add.w	r3, r7, #20
 80055aa:	4619      	mov	r1, r3
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f7fd f9bd 	bl	800292c <VL53L0X_GetSequenceStepEnables>
 80055b2:	4603      	mov	r3, r0
 80055b4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 80055b8:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d15b      	bne.n	8005678 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 80055c0:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d105      	bne.n	80055d2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 80055c6:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d102      	bne.n	80055d2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 80055cc:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d052      	beq.n	8005678 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 80055d2:	f107 0310 	add.w	r3, r7, #16
 80055d6:	461a      	mov	r2, r3
 80055d8:	2102      	movs	r1, #2
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f7ff fda2 	bl	8005124 <get_sequence_step_timeout>
 80055e0:	4603      	mov	r3, r0
 80055e2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 80055e6:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d002      	beq.n	80055f4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 80055ee:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80055f2:	e07d      	b.n	80056f0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 80055f4:	7d3b      	ldrb	r3, [r7, #20]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d00f      	beq.n	800561a <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 80055fa:	693a      	ldr	r2, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 80055fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055fe:	4413      	add	r3, r2
 8005600:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 8005602:	69fa      	ldr	r2, [r7, #28]
 8005604:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005606:	429a      	cmp	r2, r3
 8005608:	d204      	bcs.n	8005614 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 800560a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800560c:	69fb      	ldr	r3, [r7, #28]
 800560e:	1ad3      	subs	r3, r2, r3
 8005610:	643b      	str	r3, [r7, #64]	; 0x40
 8005612:	e002      	b.n	800561a <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005614:	23fc      	movs	r3, #252	; 0xfc
 8005616:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 800561a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800561e:	2b00      	cmp	r3, #0
 8005620:	d002      	beq.n	8005628 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			
			return Status;
 8005622:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8005626:	e063      	b.n	80056f0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 8005628:	7dbb      	ldrb	r3, [r7, #22]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d011      	beq.n	8005652 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 800562e:	693a      	ldr	r2, [r7, #16]
 8005630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005632:	4413      	add	r3, r2
 8005634:	005b      	lsls	r3, r3, #1
 8005636:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8005638:	69fa      	ldr	r2, [r7, #28]
 800563a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800563c:	429a      	cmp	r2, r3
 800563e:	d204      	bcs.n	800564a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8005640:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005642:	69fb      	ldr	r3, [r7, #28]
 8005644:	1ad3      	subs	r3, r2, r3
 8005646:	643b      	str	r3, [r7, #64]	; 0x40
 8005648:	e016      	b.n	8005678 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800564a:	23fc      	movs	r3, #252	; 0xfc
 800564c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005650:	e012      	b.n	8005678 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 8005652:	7d7b      	ldrb	r3, [r7, #21]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d00f      	beq.n	8005678 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 8005658:	693a      	ldr	r2, [r7, #16]
 800565a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800565c:	4413      	add	r3, r2
 800565e:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8005660:	69fa      	ldr	r2, [r7, #28]
 8005662:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005664:	429a      	cmp	r2, r3
 8005666:	d204      	bcs.n	8005672 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8005668:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800566a:	69fb      	ldr	r3, [r7, #28]
 800566c:	1ad3      	subs	r3, r2, r3
 800566e:	643b      	str	r3, [r7, #64]	; 0x40
 8005670:	e002      	b.n	8005678 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005672:	23fc      	movs	r3, #252	; 0xfc
 8005674:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 8005678:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800567c:	2b00      	cmp	r3, #0
 800567e:	d002      	beq.n	8005686 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		
		return Status;
 8005680:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8005684:	e034      	b.n	80056f0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 8005686:	7dfb      	ldrb	r3, [r7, #23]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d019      	beq.n	80056c0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 800568c:	f107 030c 	add.w	r3, r7, #12
 8005690:	461a      	mov	r2, r3
 8005692:	2103      	movs	r1, #3
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f7ff fd45 	bl	8005124 <get_sequence_step_timeout>
 800569a:	4603      	mov	r3, r0
 800569c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 80056a0:	68fa      	ldr	r2, [r7, #12]
 80056a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056a4:	4413      	add	r3, r2
 80056a6:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 80056a8:	69fa      	ldr	r2, [r7, #28]
 80056aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056ac:	429a      	cmp	r2, r3
 80056ae:	d204      	bcs.n	80056ba <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 80056b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80056b2:	69fb      	ldr	r3, [r7, #28]
 80056b4:	1ad3      	subs	r3, r2, r3
 80056b6:	643b      	str	r3, [r7, #64]	; 0x40
 80056b8:	e002      	b.n	80056c0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80056ba:	23fc      	movs	r3, #252	; 0xfc
 80056bc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 80056c0:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d111      	bne.n	80056ec <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 80056c8:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d00e      	beq.n	80056ec <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 80056ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80056d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d2:	1ad3      	subs	r3, r2, r3
 80056d4:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 80056d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80056d8:	2104      	movs	r1, #4
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f7ff fe03 	bl	80052e6 <set_sequence_step_timeout>
 80056e0:	4603      	mov	r3, r0
 80056e2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	683a      	ldr	r2, [r7, #0]
 80056ea:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	

	return Status;
 80056ec:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3748      	adds	r7, #72	; 0x48
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}

080056f8 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b090      	sub	sp, #64	; 0x40
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
 8005700:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005702:	2300      	movs	r3, #0
 8005704:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8005708:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800570c:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800570e:	f240 7376 	movw	r3, #1910	; 0x776
 8005712:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 8005714:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8005718:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800571a:	f44f 7325 	mov.w	r3, #660	; 0x294
 800571e:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 8005720:	f240 234e 	movw	r3, #590	; 0x24e
 8005724:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 8005726:	f240 23b2 	movw	r3, #690	; 0x2b2
 800572a:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800572c:	f44f 7325 	mov.w	r3, #660	; 0x294
 8005730:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8005732:	f240 2326 	movw	r3, #550	; 0x226
 8005736:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8005738:	2300      	movs	r3, #0
 800573a:	60fb      	str	r3, [r7, #12]

	

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 800573c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800573e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005740:	441a      	add	r2, r3
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8005746:	f107 0318 	add.w	r3, r7, #24
 800574a:	4619      	mov	r1, r3
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f7fd f8ed 	bl	800292c <VL53L0X_GetSequenceStepEnables>
 8005752:	4603      	mov	r3, r0
 8005754:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 8005758:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800575c:	2b00      	cmp	r3, #0
 800575e:	d002      	beq.n	8005766 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		
		return Status;
 8005760:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005764:	e075      	b.n	8005852 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 8005766:	7e3b      	ldrb	r3, [r7, #24]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d105      	bne.n	8005778 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 800576c:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 800576e:	2b00      	cmp	r3, #0
 8005770:	d102      	bne.n	8005778 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 8005772:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 8005774:	2b00      	cmp	r3, #0
 8005776:	d030      	beq.n	80057da <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 8005778:	f107 0310 	add.w	r3, r7, #16
 800577c:	461a      	mov	r2, r3
 800577e:	2102      	movs	r1, #2
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f7ff fccf 	bl	8005124 <get_sequence_step_timeout>
 8005786:	4603      	mov	r3, r0
 8005788:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 800578c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005790:	2b00      	cmp	r3, #0
 8005792:	d122      	bne.n	80057da <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 8005794:	7e3b      	ldrb	r3, [r7, #24]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d007      	beq.n	80057aa <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800579e:	6939      	ldr	r1, [r7, #16]
 80057a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057a2:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 80057a4:	441a      	add	r2, r3
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 80057aa:	7ebb      	ldrb	r3, [r7, #26]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d009      	beq.n	80057c4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 80057b4:	6939      	ldr	r1, [r7, #16]
 80057b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b8:	440b      	add	r3, r1
 80057ba:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 80057bc:	441a      	add	r2, r3
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	601a      	str	r2, [r3, #0]
 80057c2:	e00a      	b.n	80057da <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 80057c4:	7e7b      	ldrb	r3, [r7, #25]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d007      	beq.n	80057da <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 80057ce:	6939      	ldr	r1, [r7, #16]
 80057d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d2:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 80057d4:	441a      	add	r2, r3
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80057da:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d114      	bne.n	800580c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 80057e2:	7efb      	ldrb	r3, [r7, #27]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d011      	beq.n	800580c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 80057e8:	f107 030c 	add.w	r3, r7, #12
 80057ec:	461a      	mov	r2, r3
 80057ee:	2103      	movs	r1, #3
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f7ff fc97 	bl	8005124 <get_sequence_step_timeout>
 80057f6:	4603      	mov	r3, r0
 80057f8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 8005800:	68f9      	ldr	r1, [r7, #12]
 8005802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005804:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8005806:	441a      	add	r2, r3
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800580c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005810:	2b00      	cmp	r3, #0
 8005812:	d114      	bne.n	800583e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 8005814:	7f3b      	ldrb	r3, [r7, #28]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d011      	beq.n	800583e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 800581a:	f107 0314 	add.w	r3, r7, #20
 800581e:	461a      	mov	r2, r3
 8005820:	2104      	movs	r1, #4
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f7ff fc7e 	bl	8005124 <get_sequence_step_timeout>
 8005828:	4603      	mov	r3, r0
 800582a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 8005832:	6979      	ldr	r1, [r7, #20]
 8005834:	6a3b      	ldr	r3, [r7, #32]
 8005836:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8005838:	441a      	add	r2, r3
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800583e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005842:	2b00      	cmp	r3, #0
 8005844:	d103      	bne.n	800584e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	
	return Status;
 800584e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8005852:	4618      	mov	r0, r3
 8005854:	3740      	adds	r7, #64	; 0x40
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}
	...

0800585c <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b088      	sub	sp, #32
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005866:	2300      	movs	r3, #0
 8005868:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	

	Index = 0;
 800586a:	2300      	movs	r3, #0
 800586c:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800586e:	e0c6      	b.n	80059fe <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	683a      	ldr	r2, [r7, #0]
 8005874:	4413      	add	r3, r2
 8005876:	781b      	ldrb	r3, [r3, #0]
 8005878:	74fb      	strb	r3, [r7, #19]
		Index++;
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	3301      	adds	r3, #1
 800587e:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 8005880:	7cfb      	ldrb	r3, [r7, #19]
 8005882:	2bff      	cmp	r3, #255	; 0xff
 8005884:	f040 808d 	bne.w	80059a2 <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	683a      	ldr	r2, [r7, #0]
 800588c:	4413      	add	r3, r2
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	74bb      	strb	r3, [r7, #18]
			Index++;
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	3301      	adds	r3, #1
 8005896:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 8005898:	7cbb      	ldrb	r3, [r7, #18]
 800589a:	2b03      	cmp	r3, #3
 800589c:	d87e      	bhi.n	800599c <VL53L0X_load_tuning_settings+0x140>
 800589e:	a201      	add	r2, pc, #4	; (adr r2, 80058a4 <VL53L0X_load_tuning_settings+0x48>)
 80058a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058a4:	080058b5 	.word	0x080058b5
 80058a8:	080058ef 	.word	0x080058ef
 80058ac:	08005929 	.word	0x08005929
 80058b0:	08005963 	.word	0x08005963
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	683a      	ldr	r2, [r7, #0]
 80058b8:	4413      	add	r3, r2
 80058ba:	781b      	ldrb	r3, [r3, #0]
 80058bc:	747b      	strb	r3, [r7, #17]
				Index++;
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	3301      	adds	r3, #1
 80058c2:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	683a      	ldr	r2, [r7, #0]
 80058c8:	4413      	add	r3, r2
 80058ca:	781b      	ldrb	r3, [r3, #0]
 80058cc:	743b      	strb	r3, [r7, #16]
				Index++;
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	3301      	adds	r3, #1
 80058d2:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80058d4:	7c7b      	ldrb	r3, [r7, #17]
 80058d6:	b29b      	uxth	r3, r3
 80058d8:	021b      	lsls	r3, r3, #8
 80058da:	b29a      	uxth	r2, r3
 80058dc:	7c3b      	ldrb	r3, [r7, #16]
 80058de:	b29b      	uxth	r3, r3
 80058e0:	4413      	add	r3, r2
 80058e2:	81fb      	strh	r3, [r7, #14]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	89fa      	ldrh	r2, [r7, #14]
 80058e8:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 80058ec:	e087      	b.n	80059fe <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	683a      	ldr	r2, [r7, #0]
 80058f2:	4413      	add	r3, r2
 80058f4:	781b      	ldrb	r3, [r3, #0]
 80058f6:	747b      	strb	r3, [r7, #17]
				Index++;
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	3301      	adds	r3, #1
 80058fc:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	683a      	ldr	r2, [r7, #0]
 8005902:	4413      	add	r3, r2
 8005904:	781b      	ldrb	r3, [r3, #0]
 8005906:	743b      	strb	r3, [r7, #16]
				Index++;
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	3301      	adds	r3, #1
 800590c:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800590e:	7c7b      	ldrb	r3, [r7, #17]
 8005910:	b29b      	uxth	r3, r3
 8005912:	021b      	lsls	r3, r3, #8
 8005914:	b29a      	uxth	r2, r3
 8005916:	7c3b      	ldrb	r3, [r7, #16]
 8005918:	b29b      	uxth	r3, r3
 800591a:	4413      	add	r3, r2
 800591c:	81fb      	strh	r3, [r7, #14]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	89fa      	ldrh	r2, [r7, #14]
 8005922:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 8005926:	e06a      	b.n	80059fe <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	683a      	ldr	r2, [r7, #0]
 800592c:	4413      	add	r3, r2
 800592e:	781b      	ldrb	r3, [r3, #0]
 8005930:	747b      	strb	r3, [r7, #17]
				Index++;
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	3301      	adds	r3, #1
 8005936:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	683a      	ldr	r2, [r7, #0]
 800593c:	4413      	add	r3, r2
 800593e:	781b      	ldrb	r3, [r3, #0]
 8005940:	743b      	strb	r3, [r7, #16]
				Index++;
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	3301      	adds	r3, #1
 8005946:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8005948:	7c7b      	ldrb	r3, [r7, #17]
 800594a:	b29b      	uxth	r3, r3
 800594c:	021b      	lsls	r3, r3, #8
 800594e:	b29a      	uxth	r2, r3
 8005950:	7c3b      	ldrb	r3, [r7, #16]
 8005952:	b29b      	uxth	r3, r3
 8005954:	4413      	add	r3, r2
 8005956:	81fb      	strh	r3, [r7, #14]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	89fa      	ldrh	r2, [r7, #14]
 800595c:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 8005960:	e04d      	b.n	80059fe <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	683a      	ldr	r2, [r7, #0]
 8005966:	4413      	add	r3, r2
 8005968:	781b      	ldrb	r3, [r3, #0]
 800596a:	747b      	strb	r3, [r7, #17]
				Index++;
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	3301      	adds	r3, #1
 8005970:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	683a      	ldr	r2, [r7, #0]
 8005976:	4413      	add	r3, r2
 8005978:	781b      	ldrb	r3, [r3, #0]
 800597a:	743b      	strb	r3, [r7, #16]
				Index++;
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	3301      	adds	r3, #1
 8005980:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8005982:	7c7b      	ldrb	r3, [r7, #17]
 8005984:	b29b      	uxth	r3, r3
 8005986:	021b      	lsls	r3, r3, #8
 8005988:	b29a      	uxth	r2, r3
 800598a:	7c3b      	ldrb	r3, [r7, #16]
 800598c:	b29b      	uxth	r3, r3
 800598e:	4413      	add	r3, r2
 8005990:	81fb      	strh	r3, [r7, #14]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	89fa      	ldrh	r2, [r7, #14]
 8005996:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 800599a:	e030      	b.n	80059fe <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800599c:	23fc      	movs	r3, #252	; 0xfc
 800599e:	77fb      	strb	r3, [r7, #31]
 80059a0:	e02d      	b.n	80059fe <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 80059a2:	7cfb      	ldrb	r3, [r7, #19]
 80059a4:	2b04      	cmp	r3, #4
 80059a6:	d828      	bhi.n	80059fa <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	683a      	ldr	r2, [r7, #0]
 80059ac:	4413      	add	r3, r2
 80059ae:	781b      	ldrb	r3, [r3, #0]
 80059b0:	737b      	strb	r3, [r7, #13]
			Index++;
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	3301      	adds	r3, #1
 80059b6:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 80059b8:	2300      	movs	r3, #0
 80059ba:	61bb      	str	r3, [r7, #24]
 80059bc:	e00f      	b.n	80059de <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	683a      	ldr	r2, [r7, #0]
 80059c2:	4413      	add	r3, r2
 80059c4:	7819      	ldrb	r1, [r3, #0]
 80059c6:	f107 0208 	add.w	r2, r7, #8
 80059ca:	69bb      	ldr	r3, [r7, #24]
 80059cc:	4413      	add	r3, r2
 80059ce:	460a      	mov	r2, r1
 80059d0:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	3301      	adds	r3, #1
 80059d6:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 80059d8:	69bb      	ldr	r3, [r7, #24]
 80059da:	3301      	adds	r3, #1
 80059dc:	61bb      	str	r3, [r7, #24]
 80059de:	7cfa      	ldrb	r2, [r7, #19]
 80059e0:	69bb      	ldr	r3, [r7, #24]
 80059e2:	429a      	cmp	r2, r3
 80059e4:	dceb      	bgt.n	80059be <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 80059e6:	7cfb      	ldrb	r3, [r7, #19]
 80059e8:	f107 0208 	add.w	r2, r7, #8
 80059ec:	7b79      	ldrb	r1, [r7, #13]
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f000 fe84 	bl	80066fc <VL53L0X_WriteMulti>
 80059f4:	4603      	mov	r3, r0
 80059f6:	77fb      	strb	r3, [r7, #31]
 80059f8:	e001      	b.n	80059fe <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80059fa:	23fc      	movs	r3, #252	; 0xfc
 80059fc:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	683a      	ldr	r2, [r7, #0]
 8005a02:	4413      	add	r3, r2
 8005a04:	781b      	ldrb	r3, [r3, #0]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d004      	beq.n	8005a14 <VL53L0X_load_tuning_settings+0x1b8>
 8005a0a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	f43f af2e 	beq.w	8005870 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	
	return Status;
 8005a14:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3720      	adds	r7, #32
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}

08005a20 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b088      	sub	sp, #32
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	60f8      	str	r0, [r7, #12]
 8005a28:	60b9      	str	r1, [r7, #8]
 8005a2a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2200      	movs	r2, #0
 8005a34:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 8005a36:	f107 0313 	add.w	r3, r7, #19
 8005a3a:	4619      	mov	r1, r3
 8005a3c:	68f8      	ldr	r0, [r7, #12]
 8005a3e:	f7fd f801 	bl	8002a44 <VL53L0X_GetXTalkCompensationEnable>
 8005a42:	4603      	mov	r3, r0
 8005a44:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 8005a46:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d111      	bne.n	8005a72 <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 8005a4e:	7cfb      	ldrb	r3, [r7, #19]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d00e      	beq.n	8005a72 <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	6a1b      	ldr	r3, [r3, #32]
 8005a58:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	8a9b      	ldrh	r3, [r3, #20]
 8005a5e:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 8005a60:	69bb      	ldr	r3, [r7, #24]
 8005a62:	fb03 f302 	mul.w	r3, r3, r2
 8005a66:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	3380      	adds	r3, #128	; 0x80
 8005a6c:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 8005a72:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3720      	adds	r7, #32
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}

08005a7e <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 8005a7e:	b580      	push	{r7, lr}
 8005a80:	b086      	sub	sp, #24
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	60f8      	str	r0, [r7, #12]
 8005a86:	60b9      	str	r1, [r7, #8]
 8005a88:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 8005a96:	f107 0310 	add.w	r3, r7, #16
 8005a9a:	461a      	mov	r2, r3
 8005a9c:	68b9      	ldr	r1, [r7, #8]
 8005a9e:	68f8      	ldr	r0, [r7, #12]
 8005aa0:	f7ff ffbe 	bl	8005a20 <VL53L0X_get_total_xtalk_rate>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 8005aa8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d105      	bne.n	8005abc <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	441a      	add	r2, r3
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	601a      	str	r2, [r3, #0]

	return Status;
 8005abc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3718      	adds	r7, #24
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}

08005ac8 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b09a      	sub	sp, #104	; 0x68
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	60f8      	str	r0, [r7, #12]
 8005ad0:	60b9      	str	r1, [r7, #8]
 8005ad2:	607a      	str	r2, [r7, #4]
 8005ad4:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 8005ad6:	2312      	movs	r3, #18
 8005ad8:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 8005ada:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005ade:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 8005ae0:	2342      	movs	r3, #66	; 0x42
 8005ae2:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 8005ae4:	2306      	movs	r3, #6
 8005ae6:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 8005ae8:	2307      	movs	r3, #7
 8005aea:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005aec:	2300      	movs	r3, #0
 8005aee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 8005af8:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8005b00:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 8005b02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b06:	fb02 f303 	mul.w	r3, r2, r3
 8005b0a:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 8005b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b0e:	3380      	adds	r3, #128	; 0x80
 8005b10:	0a1b      	lsrs	r3, r3, #8
 8005b12:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 8005b14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b16:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005b18:	fb02 f303 	mul.w	r3, r2, r3
 8005b1c:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d01b      	beq.n	8005b60 <VL53L0X_calc_dmax+0x98>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	029b      	lsls	r3, r3, #10
 8005b2c:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	085a      	lsrs	r2, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 8005b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b34:	4413      	add	r3, r2
 8005b36:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 8005b38:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b40:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 8005b42:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005b44:	4613      	mov	r3, r2
 8005b46:	005b      	lsls	r3, r3, #1
 8005b48:	4413      	add	r3, r2
 8005b4a:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 8005b4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b4e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005b50:	fb02 f303 	mul.w	r3, r2, r3
 8005b54:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 8005b56:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b58:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005b5c:	0c1b      	lsrs	r3, r3, #16
 8005b5e:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005b64:	fb02 f303 	mul.w	r3, r2, r3
 8005b68:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 8005b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b6c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005b70:	0c1b      	lsrs	r3, r3, #16
 8005b72:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 8005b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b78:	fb02 f303 	mul.w	r3, r2, r3
 8005b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 8005b7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b80:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005b84:	0c1b      	lsrs	r3, r3, #16
 8005b86:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 8005b88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b8a:	085a      	lsrs	r2, r3, #1
 8005b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b8e:	441a      	add	r2, r3
 8005b90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b96:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 8005b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b9c:	fb02 f303 	mul.w	r3, r2, r3
 8005ba0:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 8005ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ba4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ba8:	d302      	bcc.n	8005bb0 <VL53L0X_calc_dmax+0xe8>
		minSignalNeeded_p3 = 0xfff00000;
 8005baa:	4b55      	ldr	r3, [pc, #340]	; (8005d00 <VL53L0X_calc_dmax+0x238>)
 8005bac:	663b      	str	r3, [r7, #96]	; 0x60
 8005bae:	e016      	b.n	8005bde <VL53L0X_calc_dmax+0x116>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 8005bb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bb2:	085a      	lsrs	r2, r3, #1
 8005bb4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005bb6:	441a      	add	r2, r3
 8005bb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bbe:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 8005bc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005bc2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005bc4:	fb02 f303 	mul.w	r3, r2, r3
 8005bc8:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 8005bca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005bcc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005bd0:	0c1b      	lsrs	r3, r3, #16
 8005bd2:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 8005bd4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005bd6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005bd8:	fb02 f303 	mul.w	r3, r2, r3
 8005bdc:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 8005bde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005be0:	039b      	lsls	r3, r3, #14
 8005be2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8005be6:	4a47      	ldr	r2, [pc, #284]	; (8005d04 <VL53L0X_calc_dmax+0x23c>)
 8005be8:	fba2 2303 	umull	r2, r3, r2, r3
 8005bec:	099b      	lsrs	r3, r3, #6
 8005bee:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 8005bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bf4:	fb02 f303 	mul.w	r3, r2, r3
 8005bf8:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 8005bfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bfc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005bfe:	fb02 f303 	mul.w	r3, r2, r3
 8005c02:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 8005c04:	6a3b      	ldr	r3, [r7, #32]
 8005c06:	3308      	adds	r3, #8
 8005c08:	091b      	lsrs	r3, r3, #4
 8005c0a:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 8005c0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c0e:	6a3b      	ldr	r3, [r7, #32]
 8005c10:	1ad3      	subs	r3, r2, r3
 8005c12:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 8005c14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c16:	4613      	mov	r3, r2
 8005c18:	005b      	lsls	r3, r3, #1
 8005c1a:	4413      	add	r3, r2
 8005c1c:	011b      	lsls	r3, r3, #4
 8005c1e:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 8005c20:	69fb      	ldr	r3, [r7, #28]
 8005c22:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005c26:	0b9b      	lsrs	r3, r3, #14
 8005c28:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 8005c2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c2c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c2e:	4413      	add	r3, r2
 8005c30:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 8005c32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c34:	085b      	lsrs	r3, r3, #1
 8005c36:	69ba      	ldr	r2, [r7, #24]
 8005c38:	4413      	add	r3, r2
 8005c3a:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 8005c3c:	69ba      	ldr	r2, [r7, #24]
 8005c3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c40:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c44:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 8005c46:	69bb      	ldr	r3, [r7, #24]
 8005c48:	039b      	lsls	r3, r3, #14
 8005c4a:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 8005c4c:	69fb      	ldr	r3, [r7, #28]
 8005c4e:	085b      	lsrs	r3, r3, #1
 8005c50:	69ba      	ldr	r2, [r7, #24]
 8005c52:	4413      	add	r3, r2
 8005c54:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 8005c56:	69ba      	ldr	r2, [r7, #24]
 8005c58:	69fb      	ldr	r3, [r7, #28]
 8005c5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c5e:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 8005c60:	69bb      	ldr	r3, [r7, #24]
 8005c62:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005c64:	fb02 f303 	mul.w	r3, r2, r3
 8005c68:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8005c6a:	69bb      	ldr	r3, [r7, #24]
 8005c6c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8005c70:	4a24      	ldr	r2, [pc, #144]	; (8005d04 <VL53L0X_calc_dmax+0x23c>)
 8005c72:	fba2 2303 	umull	r2, r3, r2, r3
 8005c76:	099b      	lsrs	r3, r3, #6
 8005c78:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 8005c7a:	69bb      	ldr	r3, [r7, #24]
 8005c7c:	011b      	lsls	r3, r3, #4
 8005c7e:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8005c80:	69bb      	ldr	r3, [r7, #24]
 8005c82:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8005c86:	4a1f      	ldr	r2, [pc, #124]	; (8005d04 <VL53L0X_calc_dmax+0x23c>)
 8005c88:	fba2 2303 	umull	r2, r3, r2, r3
 8005c8c:	099b      	lsrs	r3, r3, #6
 8005c8e:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 8005c90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c92:	3380      	adds	r3, #128	; 0x80
 8005c94:	0a1b      	lsrs	r3, r3, #8
 8005c96:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d008      	beq.n	8005cb0 <VL53L0X_calc_dmax+0x1e8>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	085a      	lsrs	r2, r3, #1
 8005ca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ca4:	441a      	add	r2, r3
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cac:	65bb      	str	r3, [r7, #88]	; 0x58
 8005cae:	e001      	b.n	8005cb4 <VL53L0X_calc_dmax+0x1ec>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 8005cb4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8005cb6:	f7fe fc44 	bl	8004542 <VL53L0X_isqrt>
 8005cba:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 8005cbc:	69bb      	ldr	r3, [r7, #24]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d008      	beq.n	8005cd4 <VL53L0X_calc_dmax+0x20c>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 8005cc2:	69bb      	ldr	r3, [r7, #24]
 8005cc4:	085a      	lsrs	r2, r3, #1
 8005cc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cc8:	441a      	add	r2, r3
 8005cca:	69bb      	ldr	r3, [r7, #24]
 8005ccc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cd0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005cd2:	e001      	b.n	8005cd8 <VL53L0X_calc_dmax+0x210>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 8005cd8:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8005cda:	f7fe fc32 	bl	8004542 <VL53L0X_isqrt>
 8005cde:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 8005ce0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005ce2:	693a      	ldr	r2, [r7, #16]
 8005ce4:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 8005ce6:	693a      	ldr	r2, [r7, #16]
 8005ce8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cea:	429a      	cmp	r2, r3
 8005cec:	d902      	bls.n	8005cf4 <VL53L0X_calc_dmax+0x22c>
		*pdmax_mm = dmaxAmbient;
 8005cee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005cf0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005cf2:	601a      	str	r2, [r3, #0]

	

	return Status;
 8005cf4:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3768      	adds	r7, #104	; 0x68
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}
 8005d00:	fff00000 	.word	0xfff00000
 8005d04:	10624dd3 	.word	0x10624dd3

08005d08 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b0b4      	sub	sp, #208	; 0xd0
 8005d0c:	af04      	add	r7, sp, #16
 8005d0e:	60f8      	str	r0, [r7, #12]
 8005d10:	60b9      	str	r1, [r7, #8]
 8005d12:	607a      	str	r2, [r7, #4]
 8005d14:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 8005d16:	f44f 7348 	mov.w	r3, #800	; 0x320
 8005d1a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 8005d1e:	f44f 7316 	mov.w	r3, #600	; 0x258
 8005d22:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 8005d26:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 8005d2a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 8005d2e:	f241 235c 	movw	r3, #4700	; 0x125c
 8005d32:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 8005d36:	4b9e      	ldr	r3, [pc, #632]	; (8005fb0 <VL53L0X_calc_sigma_estimate+0x2a8>)
 8005d38:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 8005d3c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8005d40:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 8005d42:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 8005d46:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d4e:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 8005d50:	4b98      	ldr	r3, [pc, #608]	; (8005fb4 <VL53L0X_calc_sigma_estimate+0x2ac>)
 8005d52:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 8005d54:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d58:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 8005d5a:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 8005d5e:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 8005d60:	f240 6377 	movw	r3, #1655	; 0x677
 8005d64:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005d66:	2300      	movs	r3, #0
 8005d68:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	6a1b      	ldr	r3, [r3, #32]
 8005d70:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	691b      	ldr	r3, [r3, #16]
 8005d76:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005d7a:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 8005d7e:	0c1b      	lsrs	r3, r3, #16
 8005d80:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	68db      	ldr	r3, [r3, #12]
 8005d86:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 8005d88:	f107 0310 	add.w	r3, r7, #16
 8005d8c:	461a      	mov	r2, r3
 8005d8e:	68b9      	ldr	r1, [r7, #8]
 8005d90:	68f8      	ldr	r0, [r7, #12]
 8005d92:	f7ff fe74 	bl	8005a7e <VL53L0X_get_total_signal_rate>
 8005d96:	4603      	mov	r3, r0
 8005d98:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 8005d9c:	f107 0314 	add.w	r3, r7, #20
 8005da0:	461a      	mov	r2, r3
 8005da2:	68b9      	ldr	r1, [r7, #8]
 8005da4:	68f8      	ldr	r0, [r7, #12]
 8005da6:	f7ff fe3b 	bl	8005a20 <VL53L0X_get_total_xtalk_rate>
 8005daa:	4603      	mov	r3, r0
 8005dac:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005db6:	fb02 f303 	mul.w	r3, r2, r3
 8005dba:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 8005dbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005dbe:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005dc2:	0c1b      	lsrs	r3, r3, #16
 8005dc4:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005dcc:	fb02 f303 	mul.w	r3, r2, r3
 8005dd0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 8005dd4:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8005dd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	d902      	bls.n	8005de4 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 8005dde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005de0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 8005de4:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d168      	bne.n	8005ebe <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8005df2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8005dfc:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8005e00:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8005e04:	461a      	mov	r2, r3
 8005e06:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8005e0a:	68f8      	ldr	r0, [r7, #12]
 8005e0c:	f7ff f936 	bl	800507c <VL53L0X_calc_timeout_mclks>
 8005e10:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005e18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8005e22:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8005e26:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8005e30:	68f8      	ldr	r0, [r7, #12]
 8005e32:	f7ff f923 	bl	800507c <VL53L0X_calc_timeout_mclks>
 8005e36:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 8005e38:	2303      	movs	r3, #3
 8005e3a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 8005e3e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8005e42:	2b08      	cmp	r3, #8
 8005e44:	d102      	bne.n	8005e4c <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 8005e46:	2302      	movs	r3, #2
 8005e48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 8005e4c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005e4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e50:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 8005e52:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8005e56:	fb02 f303 	mul.w	r3, r2, r3
 8005e5a:	02db      	lsls	r3, r3, #11
 8005e5c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8005e60:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005e64:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8005e68:	4a53      	ldr	r2, [pc, #332]	; (8005fb8 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8005e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e6e:	099b      	lsrs	r3, r3, #6
 8005e70:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 8005e74:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005e78:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005e7a:	fb02 f303 	mul.w	r3, r2, r3
 8005e7e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8005e82:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005e86:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8005e8a:	4a4b      	ldr	r2, [pc, #300]	; (8005fb8 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8005e8c:	fba2 2303 	umull	r2, r3, r2, r3
 8005e90:	099b      	lsrs	r3, r3, #6
 8005e92:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	3380      	adds	r3, #128	; 0x80
 8005e9a:	0a1b      	lsrs	r3, r3, #8
 8005e9c:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005ea4:	fb02 f303 	mul.w	r3, r2, r3
 8005ea8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 8005eac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005eb0:	3380      	adds	r3, #128	; 0x80
 8005eb2:	0a1b      	lsrs	r3, r3, #8
 8005eb4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	021b      	lsls	r3, r3, #8
 8005ebc:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 8005ebe:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d002      	beq.n	8005ecc <VL53L0X_calc_sigma_estimate+0x1c4>
		
		return Status;
 8005ec6:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8005eca:	e165      	b.n	8006198 <VL53L0X_calc_sigma_estimate+0x490>
	}

	if (peakSignalRate_kcps == 0) {
 8005ecc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d10c      	bne.n	8005eec <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005ed8:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005ee0:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	601a      	str	r2, [r3, #0]
 8005eea:	e153      	b.n	8006194 <VL53L0X_calc_sigma_estimate+0x48c>
	} else {
		if (vcselTotalEventsRtn < 1)
 8005eec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d102      	bne.n	8005efa <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 8005efa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005efe:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 8005f00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f02:	041a      	lsls	r2, r3, #16
 8005f04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f0a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 8005f0e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005f12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f14:	429a      	cmp	r2, r3
 8005f16:	d902      	bls.n	8005f1e <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 8005f18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f1a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 8005f1e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005f22:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8005f26:	fb02 f303 	mul.w	r3, r2, r3
 8005f2a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 8005f2e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005f32:	4613      	mov	r3, r2
 8005f34:	005b      	lsls	r3, r3, #1
 8005f36:	4413      	add	r3, r2
 8005f38:	009b      	lsls	r3, r3, #2
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f7fe fb01 	bl	8004542 <VL53L0X_isqrt>
 8005f40:	4603      	mov	r3, r0
 8005f42:	005b      	lsls	r3, r3, #1
 8005f44:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	891b      	ldrh	r3, [r3, #8]
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f4e:	fb03 f302 	mul.w	r3, r3, r2
 8005f52:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8005f54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f56:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 8005f58:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005f5c:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8005f5e:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 8005f60:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8005f64:	4a14      	ldr	r2, [pc, #80]	; (8005fb8 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8005f66:	fba2 2303 	umull	r2, r3, r2, r3
 8005f6a:	099b      	lsrs	r3, r3, #6
 8005f6c:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 8005f6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f70:	041b      	lsls	r3, r3, #16
 8005f72:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8005f76:	4a10      	ldr	r2, [pc, #64]	; (8005fb8 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8005f78:	fba2 2303 	umull	r2, r3, r2, r3
 8005f7c:	099b      	lsrs	r3, r3, #6
 8005f7e:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 8005f80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f82:	021b      	lsls	r3, r3, #8
 8005f84:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 8005f86:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	bfb8      	it	lt
 8005f92:	425b      	neglt	r3, r3
 8005f94:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 8005f96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f98:	021b      	lsls	r3, r3, #8
 8005f9a:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	7e1b      	ldrb	r3, [r3, #24]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d00b      	beq.n	8005fbc <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 8005fa4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005fa8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005fac:	e035      	b.n	800601a <VL53L0X_calc_sigma_estimate+0x312>
 8005fae:	bf00      	nop
 8005fb0:	028f87ae 	.word	0x028f87ae
 8005fb4:	0006999a 	.word	0x0006999a
 8005fb8:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 8005fbc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005fbe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005fc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fc6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 8005fca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fcc:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 8005fd0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005fd4:	fb02 f303 	mul.w	r3, r2, r3
 8005fd8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 8005fdc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005fe0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005fe2:	4413      	add	r3, r2
 8005fe4:	0c1b      	lsrs	r3, r3, #16
 8005fe6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 8005fea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005fee:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8005ff2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 8005ff6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005ffa:	085b      	lsrs	r3, r3, #1
 8005ffc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 8006000:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006004:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006008:	fb02 f303 	mul.w	r3, r2, r3
 800600c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 8006010:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006014:	0b9b      	lsrs	r3, r3, #14
 8006016:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800601a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800601e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006020:	fb02 f303 	mul.w	r3, r2, r3
 8006024:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 8006026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006028:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800602c:	0c1b      	lsrs	r3, r3, #16
 800602e:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 8006030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006032:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006034:	fb02 f303 	mul.w	r3, r2, r3
 8006038:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 800603a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800603e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 8006040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006042:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006046:	0c1b      	lsrs	r3, r3, #16
 8006048:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 800604a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800604c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800604e:	fb02 f303 	mul.w	r3, r2, r3
 8006052:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 8006054:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006058:	4413      	add	r3, r2
 800605a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 800605c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800605e:	f7fe fa70 	bl	8004542 <VL53L0X_isqrt>
 8006062:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 8006064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006066:	041b      	lsls	r3, r3, #16
 8006068:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800606a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800606c:	3332      	adds	r3, #50	; 0x32
 800606e:	4a4c      	ldr	r2, [pc, #304]	; (80061a0 <VL53L0X_calc_sigma_estimate+0x498>)
 8006070:	fba2 2303 	umull	r2, r3, r2, r3
 8006074:	095a      	lsrs	r2, r3, #5
 8006076:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006078:	fbb2 f3f3 	udiv	r3, r2, r3
 800607c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 8006080:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006084:	f640 32b5 	movw	r2, #2997	; 0xbb5
 8006088:	fb02 f303 	mul.w	r3, r2, r3
 800608c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 8006090:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006094:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8006098:	3308      	adds	r3, #8
 800609a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 800609e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80060a2:	4a40      	ldr	r2, [pc, #256]	; (80061a4 <VL53L0X_calc_sigma_estimate+0x49c>)
 80060a4:	fba2 2303 	umull	r2, r3, r2, r3
 80060a8:	0b5b      	lsrs	r3, r3, #13
 80060aa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 80060ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80060b2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80060b4:	429a      	cmp	r2, r3
 80060b6:	d902      	bls.n	80060be <VL53L0X_calc_sigma_estimate+0x3b6>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 80060b8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80060ba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 80060be:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80060c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80060c6:	4413      	add	r3, r2
 80060c8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 80060cc:	4a36      	ldr	r2, [pc, #216]	; (80061a8 <VL53L0X_calc_sigma_estimate+0x4a0>)
 80060ce:	fba2 2303 	umull	r2, r3, r2, r3
 80060d2:	099b      	lsrs	r3, r3, #6
 80060d4:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 80060d6:	6a3b      	ldr	r3, [r7, #32]
 80060d8:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 80060da:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80060de:	441a      	add	r2, r3
 80060e0:	6a3b      	ldr	r3, [r7, #32]
 80060e2:	fbb2 f3f3 	udiv	r3, r2, r3
		sigmaEstRef =
 80060e6:	4618      	mov	r0, r3
 80060e8:	f7fe fa2b 	bl	8004542 <VL53L0X_isqrt>
 80060ec:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 80060ee:	69fb      	ldr	r3, [r7, #28]
 80060f0:	021b      	lsls	r3, r3, #8
 80060f2:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 80060f4:	69fb      	ldr	r3, [r7, #28]
 80060f6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80060fa:	4a2b      	ldr	r2, [pc, #172]	; (80061a8 <VL53L0X_calc_sigma_estimate+0x4a0>)
 80060fc:	fba2 2303 	umull	r2, r3, r2, r3
 8006100:	099b      	lsrs	r3, r3, #6
 8006102:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 8006104:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006108:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800610c:	fb02 f303 	mul.w	r3, r2, r3
 8006110:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 8006112:	69fb      	ldr	r3, [r7, #28]
 8006114:	69fa      	ldr	r2, [r7, #28]
 8006116:	fb02 f303 	mul.w	r3, r2, r3
 800611a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800611c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800611e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006120:	4413      	add	r3, r2
 8006122:	4618      	mov	r0, r3
 8006124:	f7fe fa0d 	bl	8004542 <VL53L0X_isqrt>
 8006128:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800612a:	69bb      	ldr	r3, [r7, #24]
 800612c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006130:	fb02 f303 	mul.w	r3, r2, r3
 8006134:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 8006138:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800613a:	2b00      	cmp	r3, #0
 800613c:	d009      	beq.n	8006152 <VL53L0X_calc_sigma_estimate+0x44a>
 800613e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006142:	2b00      	cmp	r3, #0
 8006144:	d005      	beq.n	8006152 <VL53L0X_calc_sigma_estimate+0x44a>
 8006146:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800614a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800614e:	429a      	cmp	r2, r3
 8006150:	d903      	bls.n	800615a <VL53L0X_calc_sigma_estimate+0x452>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 8006152:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006156:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8006160:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681a      	ldr	r2, [r3, #0]
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 800616c:	6939      	ldr	r1, [r7, #16]
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	9303      	str	r3, [sp, #12]
 8006172:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006176:	9302      	str	r3, [sp, #8]
 8006178:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800617c:	9301      	str	r3, [sp, #4]
 800617e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006180:	9300      	str	r3, [sp, #0]
 8006182:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006186:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006188:	68f8      	ldr	r0, [r7, #12]
 800618a:	f7ff fc9d 	bl	8005ac8 <VL53L0X_calc_dmax>
 800618e:	4603      	mov	r3, r0
 8006190:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	
	return Status;
 8006194:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 8006198:	4618      	mov	r0, r3
 800619a:	37c0      	adds	r7, #192	; 0xc0
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}
 80061a0:	51eb851f 	.word	0x51eb851f
 80061a4:	d1b71759 	.word	0xd1b71759
 80061a8:	10624dd3 	.word	0x10624dd3

080061ac <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b090      	sub	sp, #64	; 0x40
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	60f8      	str	r0, [r7, #12]
 80061b4:	607a      	str	r2, [r7, #4]
 80061b6:	461a      	mov	r2, r3
 80061b8:	460b      	mov	r3, r1
 80061ba:	72fb      	strb	r3, [r7, #11]
 80061bc:	4613      	mov	r3, r2
 80061be:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80061c0:	2300      	movs	r3, #0
 80061c2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 80061c6:	2300      	movs	r3, #0
 80061c8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 80061cc:	2300      	movs	r3, #0
 80061ce:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 80061d2:	2300      	movs	r3, #0
 80061d4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 80061d8:	2300      	movs	r3, #0
 80061da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 80061de:	2300      	movs	r3, #0
 80061e0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 80061e4:	2300      	movs	r3, #0
 80061e6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 80061ea:	2300      	movs	r3, #0
 80061ec:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 80061f0:	2300      	movs	r3, #0
 80061f2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 80061f6:	2300      	movs	r3, #0
 80061f8:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 80061fa:	2300      	movs	r3, #0
 80061fc:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 80061fe:	7afb      	ldrb	r3, [r7, #11]
 8006200:	10db      	asrs	r3, r3, #3
 8006202:	b2db      	uxtb	r3, r3
 8006204:	f003 030f 	and.w	r3, r3, #15
 8006208:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 800620c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006210:	2b00      	cmp	r3, #0
 8006212:	d017      	beq.n	8006244 <VL53L0X_get_pal_range_status+0x98>
 8006214:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006218:	2b05      	cmp	r3, #5
 800621a:	d013      	beq.n	8006244 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 800621c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006220:	2b07      	cmp	r3, #7
 8006222:	d00f      	beq.n	8006244 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 8006224:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006228:	2b0c      	cmp	r3, #12
 800622a:	d00b      	beq.n	8006244 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 800622c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006230:	2b0d      	cmp	r3, #13
 8006232:	d007      	beq.n	8006244 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 8006234:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006238:	2b0e      	cmp	r3, #14
 800623a:	d003      	beq.n	8006244 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 800623c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006240:	2b0f      	cmp	r3, #15
 8006242:	d103      	bne.n	800624c <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 8006244:	2301      	movs	r3, #1
 8006246:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800624a:	e002      	b.n	8006252 <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 800624c:	2300      	movs	r3, #0
 800624e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8006252:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006256:	2b00      	cmp	r3, #0
 8006258:	d109      	bne.n	800626e <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800625a:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800625e:	461a      	mov	r2, r3
 8006260:	2100      	movs	r1, #0
 8006262:	68f8      	ldr	r0, [r7, #12]
 8006264:	f7fc fc36 	bl	8002ad4 <VL53L0X_GetLimitCheckEnable>
 8006268:	4603      	mov	r3, r0
 800626a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800626e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006272:	2b00      	cmp	r3, #0
 8006274:	d02e      	beq.n	80062d4 <VL53L0X_get_pal_range_status+0x128>
 8006276:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800627a:	2b00      	cmp	r3, #0
 800627c:	d12a      	bne.n	80062d4 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800627e:	f107 0310 	add.w	r3, r7, #16
 8006282:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8006286:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006288:	68f8      	ldr	r0, [r7, #12]
 800628a:	f7ff fd3d 	bl	8005d08 <VL53L0X_calc_sigma_estimate>
 800628e:	4603      	mov	r3, r0
 8006290:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 8006294:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006298:	2b00      	cmp	r3, #0
 800629a:	d103      	bne.n	80062a4 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	b29a      	uxth	r2, r3
 80062a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062a2:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 80062a4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d113      	bne.n	80062d4 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 80062ac:	f107 0320 	add.w	r3, r7, #32
 80062b0:	461a      	mov	r2, r3
 80062b2:	2100      	movs	r1, #0
 80062b4:	68f8      	ldr	r0, [r7, #12]
 80062b6:	f7fc fc31 	bl	8002b1c <VL53L0X_GetLimitCheckValue>
 80062ba:	4603      	mov	r3, r0
 80062bc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 80062c0:	6a3b      	ldr	r3, [r7, #32]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d006      	beq.n	80062d4 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 80062c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062c8:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 80062ca:	429a      	cmp	r2, r3
 80062cc:	d902      	bls.n	80062d4 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 80062ce:	2301      	movs	r3, #1
 80062d0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 80062d4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d109      	bne.n	80062f0 <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80062dc:	f107 0329 	add.w	r3, r7, #41	; 0x29
 80062e0:	461a      	mov	r2, r3
 80062e2:	2102      	movs	r1, #2
 80062e4:	68f8      	ldr	r0, [r7, #12]
 80062e6:	f7fc fbf5 	bl	8002ad4 <VL53L0X_GetLimitCheckEnable>
 80062ea:	4603      	mov	r3, r0
 80062ec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 80062f0:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d044      	beq.n	8006382 <VL53L0X_get_pal_range_status+0x1d6>
 80062f8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d140      	bne.n	8006382 <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8006300:	f107 031c 	add.w	r3, r7, #28
 8006304:	461a      	mov	r2, r3
 8006306:	2102      	movs	r1, #2
 8006308:	68f8      	ldr	r0, [r7, #12]
 800630a:	f7fc fc07 	bl	8002b1c <VL53L0X_GetLimitCheckValue>
 800630e:	4603      	mov	r3, r0
 8006310:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 8006314:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006318:	2b00      	cmp	r3, #0
 800631a:	d107      	bne.n	800632c <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800631c:	2201      	movs	r2, #1
 800631e:	21ff      	movs	r1, #255	; 0xff
 8006320:	68f8      	ldr	r0, [r7, #12]
 8006322:	f000 fa37 	bl	8006794 <VL53L0X_WrByte>
 8006326:	4603      	mov	r3, r0
 8006328:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 800632c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006330:	2b00      	cmp	r3, #0
 8006332:	d109      	bne.n	8006348 <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 8006334:	f107 0316 	add.w	r3, r7, #22
 8006338:	461a      	mov	r2, r3
 800633a:	21b6      	movs	r1, #182	; 0xb6
 800633c:	68f8      	ldr	r0, [r7, #12]
 800633e:	f000 fac6 	bl	80068ce <VL53L0X_RdWord>
 8006342:	4603      	mov	r3, r0
 8006344:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 8006348:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800634c:	2b00      	cmp	r3, #0
 800634e:	d107      	bne.n	8006360 <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006350:	2200      	movs	r2, #0
 8006352:	21ff      	movs	r1, #255	; 0xff
 8006354:	68f8      	ldr	r0, [r7, #12]
 8006356:	f000 fa1d 	bl	8006794 <VL53L0X_WrByte>
 800635a:	4603      	mov	r3, r0
 800635c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 8006360:	8afb      	ldrh	r3, [r7, #22]
 8006362:	025b      	lsls	r3, r3, #9
 8006364:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800636a:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 800636e:	69fb      	ldr	r3, [r7, #28]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d006      	beq.n	8006382 <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 8006374:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 8006376:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006378:	429a      	cmp	r2, r3
 800637a:	d902      	bls.n	8006382 <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 800637c:	2301      	movs	r3, #1
 800637e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8006382:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006386:	2b00      	cmp	r3, #0
 8006388:	d109      	bne.n	800639e <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800638a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800638e:	461a      	mov	r2, r3
 8006390:	2103      	movs	r1, #3
 8006392:	68f8      	ldr	r0, [r7, #12]
 8006394:	f7fc fb9e 	bl	8002ad4 <VL53L0X_GetLimitCheckEnable>
 8006398:	4603      	mov	r3, r0
 800639a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800639e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d023      	beq.n	80063ee <VL53L0X_get_pal_range_status+0x242>
 80063a6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d11f      	bne.n	80063ee <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 80063ae:	893b      	ldrh	r3, [r7, #8]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d102      	bne.n	80063ba <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 80063b4:	2300      	movs	r3, #0
 80063b6:	637b      	str	r3, [r7, #52]	; 0x34
 80063b8:	e005      	b.n	80063c6 <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	021a      	lsls	r2, r3, #8
 80063be:	893b      	ldrh	r3, [r7, #8]
 80063c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80063c4:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 80063c6:	f107 0318 	add.w	r3, r7, #24
 80063ca:	461a      	mov	r2, r3
 80063cc:	2103      	movs	r1, #3
 80063ce:	68f8      	ldr	r0, [r7, #12]
 80063d0:	f7fc fba4 	bl	8002b1c <VL53L0X_GetLimitCheckValue>
 80063d4:	4603      	mov	r3, r0
 80063d6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 80063da:	69bb      	ldr	r3, [r7, #24]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d006      	beq.n	80063ee <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 80063e0:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 80063e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80063e4:	429a      	cmp	r2, r3
 80063e6:	d202      	bcs.n	80063ee <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 80063e8:	2301      	movs	r3, #1
 80063ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80063ee:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d14a      	bne.n	800648c <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 80063f6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80063fa:	2b01      	cmp	r3, #1
 80063fc:	d103      	bne.n	8006406 <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 80063fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006400:	22ff      	movs	r2, #255	; 0xff
 8006402:	701a      	strb	r2, [r3, #0]
 8006404:	e042      	b.n	800648c <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 8006406:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800640a:	2b01      	cmp	r3, #1
 800640c:	d007      	beq.n	800641e <VL53L0X_get_pal_range_status+0x272>
 800640e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006412:	2b02      	cmp	r3, #2
 8006414:	d003      	beq.n	800641e <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 8006416:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800641a:	2b03      	cmp	r3, #3
 800641c:	d103      	bne.n	8006426 <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800641e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006420:	2205      	movs	r2, #5
 8006422:	701a      	strb	r2, [r3, #0]
 8006424:	e032      	b.n	800648c <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 8006426:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800642a:	2b06      	cmp	r3, #6
 800642c:	d003      	beq.n	8006436 <VL53L0X_get_pal_range_status+0x28a>
 800642e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006432:	2b09      	cmp	r3, #9
 8006434:	d103      	bne.n	800643e <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 8006436:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006438:	2204      	movs	r2, #4
 800643a:	701a      	strb	r2, [r3, #0]
 800643c:	e026      	b.n	800648c <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 800643e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006442:	2b08      	cmp	r3, #8
 8006444:	d007      	beq.n	8006456 <VL53L0X_get_pal_range_status+0x2aa>
 8006446:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800644a:	2b0a      	cmp	r3, #10
 800644c:	d003      	beq.n	8006456 <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 800644e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8006452:	2b01      	cmp	r3, #1
 8006454:	d103      	bne.n	800645e <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 8006456:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006458:	2203      	movs	r2, #3
 800645a:	701a      	strb	r2, [r3, #0]
 800645c:	e016      	b.n	800648c <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 800645e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006462:	2b04      	cmp	r3, #4
 8006464:	d003      	beq.n	800646e <VL53L0X_get_pal_range_status+0x2c2>
 8006466:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800646a:	2b01      	cmp	r3, #1
 800646c:	d103      	bne.n	8006476 <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800646e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006470:	2202      	movs	r2, #2
 8006472:	701a      	strb	r2, [r3, #0]
 8006474:	e00a      	b.n	800648c <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 8006476:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800647a:	2b01      	cmp	r3, #1
 800647c:	d103      	bne.n	8006486 <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800647e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006480:	2201      	movs	r2, #1
 8006482:	701a      	strb	r2, [r3, #0]
 8006484:	e002      	b.n	800648c <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 8006486:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006488:	2200      	movs	r2, #0
 800648a:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 800648c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800648e:	781b      	ldrb	r3, [r3, #0]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d102      	bne.n	800649a <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 8006494:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006496:	2200      	movs	r2, #0
 8006498:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800649a:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800649e:	461a      	mov	r2, r3
 80064a0:	2101      	movs	r1, #1
 80064a2:	68f8      	ldr	r0, [r7, #12]
 80064a4:	f7fc fb16 	bl	8002ad4 <VL53L0X_GetLimitCheckEnable>
 80064a8:	4603      	mov	r3, r0
 80064aa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 80064ae:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d14f      	bne.n	8006556 <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 80064b6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d003      	beq.n	80064c6 <VL53L0X_get_pal_range_status+0x31a>
 80064be:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80064c2:	2b01      	cmp	r3, #1
 80064c4:	d103      	bne.n	80064ce <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 80064c6:	2301      	movs	r3, #1
 80064c8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80064cc:	e002      	b.n	80064d4 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 80064ce:	2300      	movs	r3, #0
 80064d0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80064da:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 80064de:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80064e2:	2b04      	cmp	r3, #4
 80064e4:	d003      	beq.n	80064ee <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 80064e6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d103      	bne.n	80064f6 <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 80064ee:	2301      	movs	r3, #1
 80064f0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80064f4:	e002      	b.n	80064fc <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 80064f6:	2300      	movs	r3, #0
 80064f8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8006502:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 8006506:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800650a:	2b00      	cmp	r3, #0
 800650c:	d003      	beq.n	8006516 <VL53L0X_get_pal_range_status+0x36a>
 800650e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8006512:	2b01      	cmp	r3, #1
 8006514:	d103      	bne.n	800651e <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 8006516:	2301      	movs	r3, #1
 8006518:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800651c:	e002      	b.n	8006524 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 800651e:	2300      	movs	r3, #0
 8006520:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800652a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800652e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006532:	2b00      	cmp	r3, #0
 8006534:	d003      	beq.n	800653e <VL53L0X_get_pal_range_status+0x392>
 8006536:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800653a:	2b01      	cmp	r3, #1
 800653c:	d103      	bne.n	8006546 <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800653e:	2301      	movs	r3, #1
 8006540:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006544:	e002      	b.n	800654c <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 8006546:	2300      	movs	r3, #0
 8006548:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8006552:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	
	return Status;
 8006556:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 800655a:	4618      	mov	r0, r3
 800655c:	3740      	adds	r7, #64	; 0x40
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}
	...

08006564 <VL53L0X_write_multi>:
int VL53L0X_i2c_init(void) {
  //Wire.begin();
  return VL53L0X_ERROR_NONE;
}

int32_t VL53L0X_write_multi(uint8_t address, uint8_t index, uint8_t *pdata, int32_t count) {
 8006564:	b580      	push	{r7, lr}
 8006566:	b086      	sub	sp, #24
 8006568:	af02      	add	r7, sp, #8
 800656a:	60ba      	str	r2, [r7, #8]
 800656c:	607b      	str	r3, [r7, #4]
 800656e:	4603      	mov	r3, r0
 8006570:	73fb      	strb	r3, [r7, #15]
 8006572:	460b      	mov	r3, r1
 8006574:	73bb      	strb	r3, [r7, #14]
  TM_I2C_WriteMulti(I2C1, address, index, pdata, count);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	b29b      	uxth	r3, r3
 800657a:	7bba      	ldrb	r2, [r7, #14]
 800657c:	7bf9      	ldrb	r1, [r7, #15]
 800657e:	9300      	str	r3, [sp, #0]
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	4804      	ldr	r0, [pc, #16]	; (8006594 <VL53L0X_write_multi+0x30>)
 8006584:	f7fb fb7f 	bl	8001c86 <TM_I2C_WriteMulti>
  return VL53L0X_ERROR_NONE;
 8006588:	2300      	movs	r3, #0
}
 800658a:	4618      	mov	r0, r3
 800658c:	3710      	adds	r7, #16
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}
 8006592:	bf00      	nop
 8006594:	40005400 	.word	0x40005400

08006598 <VL53L0X_read_multi>:

int32_t VL53L0X_read_multi(uint8_t address, uint8_t index, uint8_t *pdata, int32_t count) {
 8006598:	b580      	push	{r7, lr}
 800659a:	b086      	sub	sp, #24
 800659c:	af02      	add	r7, sp, #8
 800659e:	60ba      	str	r2, [r7, #8]
 80065a0:	607b      	str	r3, [r7, #4]
 80065a2:	4603      	mov	r3, r0
 80065a4:	73fb      	strb	r3, [r7, #15]
 80065a6:	460b      	mov	r3, r1
 80065a8:	73bb      	strb	r3, [r7, #14]
  TM_I2C_ReadMulti(I2C1, address, index, pdata, count);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	b29b      	uxth	r3, r3
 80065ae:	7bba      	ldrb	r2, [r7, #14]
 80065b0:	7bf9      	ldrb	r1, [r7, #15]
 80065b2:	9300      	str	r3, [sp, #0]
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	4804      	ldr	r0, [pc, #16]	; (80065c8 <VL53L0X_read_multi+0x30>)
 80065b8:	f7fb fb2a 	bl	8001c10 <TM_I2C_ReadMulti>
  return VL53L0X_ERROR_NONE;
 80065bc:	2300      	movs	r3, #0
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3710      	adds	r7, #16
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}
 80065c6:	bf00      	nop
 80065c8:	40005400 	.word	0x40005400

080065cc <VL53L0X_write_byte>:

int32_t VL53L0X_write_byte(uint8_t deviceAddress, uint8_t index, uint8_t data) {
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b082      	sub	sp, #8
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	4603      	mov	r3, r0
 80065d4:	71fb      	strb	r3, [r7, #7]
 80065d6:	460b      	mov	r3, r1
 80065d8:	71bb      	strb	r3, [r7, #6]
 80065da:	4613      	mov	r3, r2
 80065dc:	717b      	strb	r3, [r7, #5]
  return VL53L0X_write_multi(deviceAddress, index, &data, 1);
 80065de:	1d7a      	adds	r2, r7, #5
 80065e0:	79b9      	ldrb	r1, [r7, #6]
 80065e2:	79f8      	ldrb	r0, [r7, #7]
 80065e4:	2301      	movs	r3, #1
 80065e6:	f7ff ffbd 	bl	8006564 <VL53L0X_write_multi>
 80065ea:	4603      	mov	r3, r0
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	3708      	adds	r7, #8
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}

080065f4 <VL53L0X_write_word>:

int32_t VL53L0X_write_word(uint8_t deviceAddress, uint8_t index, uint16_t data) {
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b084      	sub	sp, #16
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	4603      	mov	r3, r0
 80065fc:	71fb      	strb	r3, [r7, #7]
 80065fe:	460b      	mov	r3, r1
 8006600:	71bb      	strb	r3, [r7, #6]
 8006602:	4613      	mov	r3, r2
 8006604:	80bb      	strh	r3, [r7, #4]
  uint8_t buff[2];
  buff[1] = data & 0xFF;
 8006606:	88bb      	ldrh	r3, [r7, #4]
 8006608:	b2db      	uxtb	r3, r3
 800660a:	737b      	strb	r3, [r7, #13]
  buff[0] = data >> 8;
 800660c:	88bb      	ldrh	r3, [r7, #4]
 800660e:	0a1b      	lsrs	r3, r3, #8
 8006610:	b29b      	uxth	r3, r3
 8006612:	b2db      	uxtb	r3, r3
 8006614:	733b      	strb	r3, [r7, #12]
  return VL53L0X_write_multi(deviceAddress, index, buff, 2);
 8006616:	f107 020c 	add.w	r2, r7, #12
 800661a:	79b9      	ldrb	r1, [r7, #6]
 800661c:	79f8      	ldrb	r0, [r7, #7]
 800661e:	2302      	movs	r3, #2
 8006620:	f7ff ffa0 	bl	8006564 <VL53L0X_write_multi>
 8006624:	4603      	mov	r3, r0
}
 8006626:	4618      	mov	r0, r3
 8006628:	3710      	adds	r7, #16
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}

0800662e <VL53L0X_read_byte>:
  buff[0] = data >> 24;

  return VL53L0X_write_multi(deviceAddress, index, buff, 4);
}

int32_t VL53L0X_read_byte(uint8_t deviceAddress, uint8_t index, uint8_t *data) {
 800662e:	b580      	push	{r7, lr}
 8006630:	b082      	sub	sp, #8
 8006632:	af00      	add	r7, sp, #0
 8006634:	4603      	mov	r3, r0
 8006636:	603a      	str	r2, [r7, #0]
 8006638:	71fb      	strb	r3, [r7, #7]
 800663a:	460b      	mov	r3, r1
 800663c:	71bb      	strb	r3, [r7, #6]
  return VL53L0X_read_multi(deviceAddress, index, data, 1);
 800663e:	79b9      	ldrb	r1, [r7, #6]
 8006640:	79f8      	ldrb	r0, [r7, #7]
 8006642:	2301      	movs	r3, #1
 8006644:	683a      	ldr	r2, [r7, #0]
 8006646:	f7ff ffa7 	bl	8006598 <VL53L0X_read_multi>
 800664a:	4603      	mov	r3, r0
}
 800664c:	4618      	mov	r0, r3
 800664e:	3708      	adds	r7, #8
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}

08006654 <VL53L0X_read_word>:

int32_t VL53L0X_read_word(uint8_t deviceAddress, uint8_t index, uint16_t *data) {
 8006654:	b580      	push	{r7, lr}
 8006656:	b084      	sub	sp, #16
 8006658:	af00      	add	r7, sp, #0
 800665a:	4603      	mov	r3, r0
 800665c:	603a      	str	r2, [r7, #0]
 800665e:	71fb      	strb	r3, [r7, #7]
 8006660:	460b      	mov	r3, r1
 8006662:	71bb      	strb	r3, [r7, #6]
  uint8_t buff[2];
  int r = VL53L0X_read_multi(deviceAddress, index, buff, 2);
 8006664:	f107 0208 	add.w	r2, r7, #8
 8006668:	79b9      	ldrb	r1, [r7, #6]
 800666a:	79f8      	ldrb	r0, [r7, #7]
 800666c:	2302      	movs	r3, #2
 800666e:	f7ff ff93 	bl	8006598 <VL53L0X_read_multi>
 8006672:	60f8      	str	r0, [r7, #12]

  uint16_t tmp;
  tmp = buff[0];
 8006674:	7a3b      	ldrb	r3, [r7, #8]
 8006676:	817b      	strh	r3, [r7, #10]
  tmp <<= 8;
 8006678:	897b      	ldrh	r3, [r7, #10]
 800667a:	021b      	lsls	r3, r3, #8
 800667c:	817b      	strh	r3, [r7, #10]
  tmp |= buff[1];
 800667e:	7a7b      	ldrb	r3, [r7, #9]
 8006680:	b29a      	uxth	r2, r3
 8006682:	897b      	ldrh	r3, [r7, #10]
 8006684:	4313      	orrs	r3, r2
 8006686:	817b      	strh	r3, [r7, #10]
  *data = tmp;
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	897a      	ldrh	r2, [r7, #10]
 800668c:	801a      	strh	r2, [r3, #0]

  return r;
 800668e:	68fb      	ldr	r3, [r7, #12]
}
 8006690:	4618      	mov	r0, r3
 8006692:	3710      	adds	r7, #16
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}

08006698 <VL53L0X_read_dword>:

int32_t VL53L0X_read_dword(uint8_t deviceAddress, uint8_t index, uint32_t *data) {
 8006698:	b580      	push	{r7, lr}
 800669a:	b086      	sub	sp, #24
 800669c:	af00      	add	r7, sp, #0
 800669e:	4603      	mov	r3, r0
 80066a0:	603a      	str	r2, [r7, #0]
 80066a2:	71fb      	strb	r3, [r7, #7]
 80066a4:	460b      	mov	r3, r1
 80066a6:	71bb      	strb	r3, [r7, #6]
  uint8_t buff[4];
  int r = VL53L0X_read_multi(deviceAddress, index, buff, 4);
 80066a8:	f107 020c 	add.w	r2, r7, #12
 80066ac:	79b9      	ldrb	r1, [r7, #6]
 80066ae:	79f8      	ldrb	r0, [r7, #7]
 80066b0:	2304      	movs	r3, #4
 80066b2:	f7ff ff71 	bl	8006598 <VL53L0X_read_multi>
 80066b6:	6178      	str	r0, [r7, #20]

  uint32_t tmp;
  tmp = buff[0];
 80066b8:	7b3b      	ldrb	r3, [r7, #12]
 80066ba:	613b      	str	r3, [r7, #16]
  tmp <<= 8;
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	021b      	lsls	r3, r3, #8
 80066c0:	613b      	str	r3, [r7, #16]
  tmp |= buff[1];
 80066c2:	7b7b      	ldrb	r3, [r7, #13]
 80066c4:	461a      	mov	r2, r3
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	4313      	orrs	r3, r2
 80066ca:	613b      	str	r3, [r7, #16]
  tmp <<= 8;
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	021b      	lsls	r3, r3, #8
 80066d0:	613b      	str	r3, [r7, #16]
  tmp |= buff[2];
 80066d2:	7bbb      	ldrb	r3, [r7, #14]
 80066d4:	461a      	mov	r2, r3
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	4313      	orrs	r3, r2
 80066da:	613b      	str	r3, [r7, #16]
  tmp <<= 8;
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	021b      	lsls	r3, r3, #8
 80066e0:	613b      	str	r3, [r7, #16]
  tmp |= buff[3];
 80066e2:	7bfb      	ldrb	r3, [r7, #15]
 80066e4:	461a      	mov	r2, r3
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	4313      	orrs	r3, r2
 80066ea:	613b      	str	r3, [r7, #16]

  *data = tmp;
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	693a      	ldr	r2, [r7, #16]
 80066f0:	601a      	str	r2, [r3, #0]

  return r;
 80066f2:	697b      	ldr	r3, [r7, #20]
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	3718      	adds	r7, #24
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}

080066fc <VL53L0X_WriteMulti>:

    return Status;
}

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count){
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b088      	sub	sp, #32
 8006700:	af00      	add	r7, sp, #0
 8006702:	60f8      	str	r0, [r7, #12]
 8006704:	607a      	str	r2, [r7, #4]
 8006706:	603b      	str	r3, [r7, #0]
 8006708:	460b      	mov	r3, r1
 800670a:	72fb      	strb	r3, [r7, #11]

    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800670c:	2300      	movs	r3, #0
 800670e:	77fb      	strb	r3, [r7, #31]
    int32_t status_int = 0;
 8006710:	2300      	movs	r3, #0
 8006712:	61bb      	str	r3, [r7, #24]
	uint8_t deviceAddress;

    if (count>=VL53L0X_MAX_I2C_XFER_SIZE){
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	2b3f      	cmp	r3, #63	; 0x3f
 8006718:	d901      	bls.n	800671e <VL53L0X_WriteMulti+0x22>
        Status = VL53L0X_ERROR_INVALID_PARAMS;
 800671a:	23fc      	movs	r3, #252	; 0xfc
 800671c:	77fb      	strb	r3, [r7, #31]
    }

	deviceAddress = Dev->I2cDevAddr;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 8006724:	75fb      	strb	r3, [r7, #23]

	status_int = VL53L0X_write_multi(deviceAddress, index, pdata, count);
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	7af9      	ldrb	r1, [r7, #11]
 800672a:	7df8      	ldrb	r0, [r7, #23]
 800672c:	687a      	ldr	r2, [r7, #4]
 800672e:	f7ff ff19 	bl	8006564 <VL53L0X_write_multi>
 8006732:	61b8      	str	r0, [r7, #24]

	if (status_int != 0)
 8006734:	69bb      	ldr	r3, [r7, #24]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d001      	beq.n	800673e <VL53L0X_WriteMulti+0x42>
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800673a:	23ec      	movs	r3, #236	; 0xec
 800673c:	77fb      	strb	r3, [r7, #31]

    return Status;
 800673e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006742:	4618      	mov	r0, r3
 8006744:	3720      	adds	r7, #32
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}

0800674a <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count){
 800674a:	b580      	push	{r7, lr}
 800674c:	b086      	sub	sp, #24
 800674e:	af00      	add	r7, sp, #0
 8006750:	60f8      	str	r0, [r7, #12]
 8006752:	607a      	str	r2, [r7, #4]
 8006754:	603b      	str	r3, [r7, #0]
 8006756:	460b      	mov	r3, r1
 8006758:	72fb      	strb	r3, [r7, #11]
    VL53L0X_I2C_USER_VAR
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800675a:	2300      	movs	r3, #0
 800675c:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
	uint8_t deviceAddress;

    if (count>=VL53L0X_MAX_I2C_XFER_SIZE){
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	2b3f      	cmp	r3, #63	; 0x3f
 8006762:	d901      	bls.n	8006768 <VL53L0X_ReadMulti+0x1e>
        Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006764:	23fc      	movs	r3, #252	; 0xfc
 8006766:	75fb      	strb	r3, [r7, #23]
    }

    deviceAddress = Dev->I2cDevAddr;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800676e:	75bb      	strb	r3, [r7, #22]

	status_int = VL53L0X_read_multi(deviceAddress, index, pdata, count);
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	7af9      	ldrb	r1, [r7, #11]
 8006774:	7db8      	ldrb	r0, [r7, #22]
 8006776:	687a      	ldr	r2, [r7, #4]
 8006778:	f7ff ff0e 	bl	8006598 <VL53L0X_read_multi>
 800677c:	6138      	str	r0, [r7, #16]

	if (status_int != 0)
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d001      	beq.n	8006788 <VL53L0X_ReadMulti+0x3e>
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8006784:	23ec      	movs	r3, #236	; 0xec
 8006786:	75fb      	strb	r3, [r7, #23]

    return Status;
 8006788:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800678c:	4618      	mov	r0, r3
 800678e:	3718      	adds	r7, #24
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}

08006794 <VL53L0X_WrByte>:


VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data){
 8006794:	b580      	push	{r7, lr}
 8006796:	b084      	sub	sp, #16
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
 800679c:	460b      	mov	r3, r1
 800679e:	70fb      	strb	r3, [r7, #3]
 80067a0:	4613      	mov	r3, r2
 80067a2:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80067a4:	2300      	movs	r3, #0
 80067a6:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;
	uint8_t deviceAddress;

    deviceAddress = Dev->I2cDevAddr;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 80067ae:	73bb      	strb	r3, [r7, #14]

	status_int = VL53L0X_write_byte(deviceAddress, index, data);
 80067b0:	78ba      	ldrb	r2, [r7, #2]
 80067b2:	78f9      	ldrb	r1, [r7, #3]
 80067b4:	7bbb      	ldrb	r3, [r7, #14]
 80067b6:	4618      	mov	r0, r3
 80067b8:	f7ff ff08 	bl	80065cc <VL53L0X_write_byte>
 80067bc:	60b8      	str	r0, [r7, #8]

	if (status_int != 0)
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d001      	beq.n	80067c8 <VL53L0X_WrByte+0x34>
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80067c4:	23ec      	movs	r3, #236	; 0xec
 80067c6:	73fb      	strb	r3, [r7, #15]

    return Status;
 80067c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	3710      	adds	r7, #16
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}

080067d4 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data){
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b084      	sub	sp, #16
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
 80067dc:	460b      	mov	r3, r1
 80067de:	70fb      	strb	r3, [r7, #3]
 80067e0:	4613      	mov	r3, r2
 80067e2:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80067e4:	2300      	movs	r3, #0
 80067e6:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;
	uint8_t deviceAddress;

    deviceAddress = Dev->I2cDevAddr;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 80067ee:	73bb      	strb	r3, [r7, #14]

	status_int = VL53L0X_write_word(deviceAddress, index, data);
 80067f0:	883a      	ldrh	r2, [r7, #0]
 80067f2:	78f9      	ldrb	r1, [r7, #3]
 80067f4:	7bbb      	ldrb	r3, [r7, #14]
 80067f6:	4618      	mov	r0, r3
 80067f8:	f7ff fefc 	bl	80065f4 <VL53L0X_write_word>
 80067fc:	60b8      	str	r0, [r7, #8]

	if (status_int != 0)
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d001      	beq.n	8006808 <VL53L0X_WrWord+0x34>
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8006804:	23ec      	movs	r3, #236	; 0xec
 8006806:	73fb      	strb	r3, [r7, #15]

    return Status;
 8006808:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800680c:	4618      	mov	r0, r3
 800680e:	3710      	adds	r7, #16
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}

08006814 <VL53L0X_UpdateByte>:
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;

    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData){
 8006814:	b580      	push	{r7, lr}
 8006816:	b086      	sub	sp, #24
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	4608      	mov	r0, r1
 800681e:	4611      	mov	r1, r2
 8006820:	461a      	mov	r2, r3
 8006822:	4603      	mov	r3, r0
 8006824:	70fb      	strb	r3, [r7, #3]
 8006826:	460b      	mov	r3, r1
 8006828:	70bb      	strb	r3, [r7, #2]
 800682a:	4613      	mov	r3, r2
 800682c:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800682e:	2300      	movs	r3, #0
 8006830:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    uint8_t deviceAddress;
    uint8_t data;

    deviceAddress = Dev->I2cDevAddr;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 8006838:	75bb      	strb	r3, [r7, #22]

    status_int = VL53L0X_read_byte(deviceAddress, index, &data);
 800683a:	f107 020f 	add.w	r2, r7, #15
 800683e:	78f9      	ldrb	r1, [r7, #3]
 8006840:	7dbb      	ldrb	r3, [r7, #22]
 8006842:	4618      	mov	r0, r3
 8006844:	f7ff fef3 	bl	800662e <VL53L0X_read_byte>
 8006848:	6138      	str	r0, [r7, #16]

    if (status_int != 0)
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d001      	beq.n	8006854 <VL53L0X_UpdateByte+0x40>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8006850:	23ec      	movs	r3, #236	; 0xec
 8006852:	75fb      	strb	r3, [r7, #23]

    if (Status == VL53L0X_ERROR_NONE) {
 8006854:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d113      	bne.n	8006884 <VL53L0X_UpdateByte+0x70>
        data = (data & AndData) | OrData;
 800685c:	7bfa      	ldrb	r2, [r7, #15]
 800685e:	78bb      	ldrb	r3, [r7, #2]
 8006860:	4013      	ands	r3, r2
 8006862:	b2da      	uxtb	r2, r3
 8006864:	787b      	ldrb	r3, [r7, #1]
 8006866:	4313      	orrs	r3, r2
 8006868:	b2db      	uxtb	r3, r3
 800686a:	73fb      	strb	r3, [r7, #15]
        status_int = VL53L0X_write_byte(deviceAddress, index, data);
 800686c:	7bfa      	ldrb	r2, [r7, #15]
 800686e:	78f9      	ldrb	r1, [r7, #3]
 8006870:	7dbb      	ldrb	r3, [r7, #22]
 8006872:	4618      	mov	r0, r3
 8006874:	f7ff feaa 	bl	80065cc <VL53L0X_write_byte>
 8006878:	6138      	str	r0, [r7, #16]

        if (status_int != 0)
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d001      	beq.n	8006884 <VL53L0X_UpdateByte+0x70>
            Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8006880:	23ec      	movs	r3, #236	; 0xec
 8006882:	75fb      	strb	r3, [r7, #23]
    }

    return Status;
 8006884:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006888:	4618      	mov	r0, r3
 800688a:	3718      	adds	r7, #24
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}

08006890 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data){
 8006890:	b580      	push	{r7, lr}
 8006892:	b086      	sub	sp, #24
 8006894:	af00      	add	r7, sp, #0
 8006896:	60f8      	str	r0, [r7, #12]
 8006898:	460b      	mov	r3, r1
 800689a:	607a      	str	r2, [r7, #4]
 800689c:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800689e:	2300      	movs	r3, #0
 80068a0:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    uint8_t deviceAddress;

    deviceAddress = Dev->I2cDevAddr;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 80068a8:	75bb      	strb	r3, [r7, #22]

    status_int = VL53L0X_read_byte(deviceAddress, index, data);
 80068aa:	7af9      	ldrb	r1, [r7, #11]
 80068ac:	7dbb      	ldrb	r3, [r7, #22]
 80068ae:	687a      	ldr	r2, [r7, #4]
 80068b0:	4618      	mov	r0, r3
 80068b2:	f7ff febc 	bl	800662e <VL53L0X_read_byte>
 80068b6:	6138      	str	r0, [r7, #16]

    if (status_int != 0)
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d001      	beq.n	80068c2 <VL53L0X_RdByte+0x32>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80068be:	23ec      	movs	r3, #236	; 0xec
 80068c0:	75fb      	strb	r3, [r7, #23]

    return Status;
 80068c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3718      	adds	r7, #24
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}

080068ce <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data){
 80068ce:	b580      	push	{r7, lr}
 80068d0:	b086      	sub	sp, #24
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	60f8      	str	r0, [r7, #12]
 80068d6:	460b      	mov	r3, r1
 80068d8:	607a      	str	r2, [r7, #4]
 80068da:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80068dc:	2300      	movs	r3, #0
 80068de:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    uint8_t deviceAddress;

    deviceAddress = Dev->I2cDevAddr;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 80068e6:	75bb      	strb	r3, [r7, #22]

    status_int = VL53L0X_read_word(deviceAddress, index, data);
 80068e8:	7af9      	ldrb	r1, [r7, #11]
 80068ea:	7dbb      	ldrb	r3, [r7, #22]
 80068ec:	687a      	ldr	r2, [r7, #4]
 80068ee:	4618      	mov	r0, r3
 80068f0:	f7ff feb0 	bl	8006654 <VL53L0X_read_word>
 80068f4:	6138      	str	r0, [r7, #16]

    if (status_int != 0)
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d001      	beq.n	8006900 <VL53L0X_RdWord+0x32>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80068fc:	23ec      	movs	r3, #236	; 0xec
 80068fe:	75fb      	strb	r3, [r7, #23]

    return Status;
 8006900:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006904:	4618      	mov	r0, r3
 8006906:	3718      	adds	r7, #24
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}

0800690c <VL53L0X_RdDWord>:

VL53L0X_Error  VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data){
 800690c:	b580      	push	{r7, lr}
 800690e:	b086      	sub	sp, #24
 8006910:	af00      	add	r7, sp, #0
 8006912:	60f8      	str	r0, [r7, #12]
 8006914:	460b      	mov	r3, r1
 8006916:	607a      	str	r2, [r7, #4]
 8006918:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800691a:	2300      	movs	r3, #0
 800691c:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    uint8_t deviceAddress;

    deviceAddress = Dev->I2cDevAddr;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 8006924:	75bb      	strb	r3, [r7, #22]

    status_int = VL53L0X_read_dword(deviceAddress, index, data);
 8006926:	7af9      	ldrb	r1, [r7, #11]
 8006928:	7dbb      	ldrb	r3, [r7, #22]
 800692a:	687a      	ldr	r2, [r7, #4]
 800692c:	4618      	mov	r0, r3
 800692e:	f7ff feb3 	bl	8006698 <VL53L0X_read_dword>
 8006932:	6138      	str	r0, [r7, #16]

    if (status_int != 0)
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d001      	beq.n	800693e <VL53L0X_RdDWord+0x32>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800693a:	23ec      	movs	r3, #236	; 0xec
 800693c:	75fb      	strb	r3, [r7, #23]

    return Status;
 800693e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006942:	4618      	mov	r0, r3
 8006944:	3718      	adds	r7, #24
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}

0800694a <VL53L0X_PollingDelay>:

#define VL53L0X_POLLINGDELAY_LOOPNB  250
VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev){
 800694a:	b480      	push	{r7}
 800694c:	b085      	sub	sp, #20
 800694e:	af00      	add	r7, sp, #0
 8006950:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8006952:	2300      	movs	r3, #0
 8006954:	73fb      	strb	r3, [r7, #15]
    volatile uint32_t i;

    for(i=0;i<VL53L0X_POLLINGDELAY_LOOPNB;i++){
 8006956:	2300      	movs	r3, #0
 8006958:	60bb      	str	r3, [r7, #8]
 800695a:	e003      	b.n	8006964 <VL53L0X_PollingDelay+0x1a>
        //Do nothing
        asm("nop");
 800695c:	bf00      	nop
    for(i=0;i<VL53L0X_POLLINGDELAY_LOOPNB;i++){
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	3301      	adds	r3, #1
 8006962:	60bb      	str	r3, [r7, #8]
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	2bf9      	cmp	r3, #249	; 0xf9
 8006968:	d9f8      	bls.n	800695c <VL53L0X_PollingDelay+0x12>
    }

    return status;
 800696a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800696e:	4618      	mov	r0, r3
 8006970:	3714      	adds	r7, #20
 8006972:	46bd      	mov	sp, r7
 8006974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006978:	4770      	bx	lr
	...

0800697c <__libc_init_array>:
 800697c:	b570      	push	{r4, r5, r6, lr}
 800697e:	4e0d      	ldr	r6, [pc, #52]	; (80069b4 <__libc_init_array+0x38>)
 8006980:	4c0d      	ldr	r4, [pc, #52]	; (80069b8 <__libc_init_array+0x3c>)
 8006982:	1ba4      	subs	r4, r4, r6
 8006984:	10a4      	asrs	r4, r4, #2
 8006986:	2500      	movs	r5, #0
 8006988:	42a5      	cmp	r5, r4
 800698a:	d109      	bne.n	80069a0 <__libc_init_array+0x24>
 800698c:	4e0b      	ldr	r6, [pc, #44]	; (80069bc <__libc_init_array+0x40>)
 800698e:	4c0c      	ldr	r4, [pc, #48]	; (80069c0 <__libc_init_array+0x44>)
 8006990:	f000 f908 	bl	8006ba4 <_init>
 8006994:	1ba4      	subs	r4, r4, r6
 8006996:	10a4      	asrs	r4, r4, #2
 8006998:	2500      	movs	r5, #0
 800699a:	42a5      	cmp	r5, r4
 800699c:	d105      	bne.n	80069aa <__libc_init_array+0x2e>
 800699e:	bd70      	pop	{r4, r5, r6, pc}
 80069a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80069a4:	4798      	blx	r3
 80069a6:	3501      	adds	r5, #1
 80069a8:	e7ee      	b.n	8006988 <__libc_init_array+0xc>
 80069aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80069ae:	4798      	blx	r3
 80069b0:	3501      	adds	r5, #1
 80069b2:	e7f2      	b.n	800699a <__libc_init_array+0x1e>
 80069b4:	08006bd4 	.word	0x08006bd4
 80069b8:	08006bd4 	.word	0x08006bd4
 80069bc:	08006bd4 	.word	0x08006bd4
 80069c0:	08006bd8 	.word	0x08006bd8

080069c4 <malloc>:
 80069c4:	4b02      	ldr	r3, [pc, #8]	; (80069d0 <malloc+0xc>)
 80069c6:	4601      	mov	r1, r0
 80069c8:	6818      	ldr	r0, [r3, #0]
 80069ca:	f000 b86d 	b.w	8006aa8 <_malloc_r>
 80069ce:	bf00      	nop
 80069d0:	200002dc 	.word	0x200002dc

080069d4 <free>:
 80069d4:	4b02      	ldr	r3, [pc, #8]	; (80069e0 <free+0xc>)
 80069d6:	4601      	mov	r1, r0
 80069d8:	6818      	ldr	r0, [r3, #0]
 80069da:	f000 b817 	b.w	8006a0c <_free_r>
 80069de:	bf00      	nop
 80069e0:	200002dc 	.word	0x200002dc

080069e4 <memcpy>:
 80069e4:	b510      	push	{r4, lr}
 80069e6:	1e43      	subs	r3, r0, #1
 80069e8:	440a      	add	r2, r1
 80069ea:	4291      	cmp	r1, r2
 80069ec:	d100      	bne.n	80069f0 <memcpy+0xc>
 80069ee:	bd10      	pop	{r4, pc}
 80069f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80069f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80069f8:	e7f7      	b.n	80069ea <memcpy+0x6>

080069fa <memset>:
 80069fa:	4402      	add	r2, r0
 80069fc:	4603      	mov	r3, r0
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d100      	bne.n	8006a04 <memset+0xa>
 8006a02:	4770      	bx	lr
 8006a04:	f803 1b01 	strb.w	r1, [r3], #1
 8006a08:	e7f9      	b.n	80069fe <memset+0x4>
	...

08006a0c <_free_r>:
 8006a0c:	b538      	push	{r3, r4, r5, lr}
 8006a0e:	4605      	mov	r5, r0
 8006a10:	2900      	cmp	r1, #0
 8006a12:	d045      	beq.n	8006aa0 <_free_r+0x94>
 8006a14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a18:	1f0c      	subs	r4, r1, #4
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	bfb8      	it	lt
 8006a1e:	18e4      	addlt	r4, r4, r3
 8006a20:	f000 f8b0 	bl	8006b84 <__malloc_lock>
 8006a24:	4a1f      	ldr	r2, [pc, #124]	; (8006aa4 <_free_r+0x98>)
 8006a26:	6813      	ldr	r3, [r2, #0]
 8006a28:	4610      	mov	r0, r2
 8006a2a:	b933      	cbnz	r3, 8006a3a <_free_r+0x2e>
 8006a2c:	6063      	str	r3, [r4, #4]
 8006a2e:	6014      	str	r4, [r2, #0]
 8006a30:	4628      	mov	r0, r5
 8006a32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a36:	f000 b8a6 	b.w	8006b86 <__malloc_unlock>
 8006a3a:	42a3      	cmp	r3, r4
 8006a3c:	d90c      	bls.n	8006a58 <_free_r+0x4c>
 8006a3e:	6821      	ldr	r1, [r4, #0]
 8006a40:	1862      	adds	r2, r4, r1
 8006a42:	4293      	cmp	r3, r2
 8006a44:	bf04      	itt	eq
 8006a46:	681a      	ldreq	r2, [r3, #0]
 8006a48:	685b      	ldreq	r3, [r3, #4]
 8006a4a:	6063      	str	r3, [r4, #4]
 8006a4c:	bf04      	itt	eq
 8006a4e:	1852      	addeq	r2, r2, r1
 8006a50:	6022      	streq	r2, [r4, #0]
 8006a52:	6004      	str	r4, [r0, #0]
 8006a54:	e7ec      	b.n	8006a30 <_free_r+0x24>
 8006a56:	4613      	mov	r3, r2
 8006a58:	685a      	ldr	r2, [r3, #4]
 8006a5a:	b10a      	cbz	r2, 8006a60 <_free_r+0x54>
 8006a5c:	42a2      	cmp	r2, r4
 8006a5e:	d9fa      	bls.n	8006a56 <_free_r+0x4a>
 8006a60:	6819      	ldr	r1, [r3, #0]
 8006a62:	1858      	adds	r0, r3, r1
 8006a64:	42a0      	cmp	r0, r4
 8006a66:	d10b      	bne.n	8006a80 <_free_r+0x74>
 8006a68:	6820      	ldr	r0, [r4, #0]
 8006a6a:	4401      	add	r1, r0
 8006a6c:	1858      	adds	r0, r3, r1
 8006a6e:	4282      	cmp	r2, r0
 8006a70:	6019      	str	r1, [r3, #0]
 8006a72:	d1dd      	bne.n	8006a30 <_free_r+0x24>
 8006a74:	6810      	ldr	r0, [r2, #0]
 8006a76:	6852      	ldr	r2, [r2, #4]
 8006a78:	605a      	str	r2, [r3, #4]
 8006a7a:	4401      	add	r1, r0
 8006a7c:	6019      	str	r1, [r3, #0]
 8006a7e:	e7d7      	b.n	8006a30 <_free_r+0x24>
 8006a80:	d902      	bls.n	8006a88 <_free_r+0x7c>
 8006a82:	230c      	movs	r3, #12
 8006a84:	602b      	str	r3, [r5, #0]
 8006a86:	e7d3      	b.n	8006a30 <_free_r+0x24>
 8006a88:	6820      	ldr	r0, [r4, #0]
 8006a8a:	1821      	adds	r1, r4, r0
 8006a8c:	428a      	cmp	r2, r1
 8006a8e:	bf04      	itt	eq
 8006a90:	6811      	ldreq	r1, [r2, #0]
 8006a92:	6852      	ldreq	r2, [r2, #4]
 8006a94:	6062      	str	r2, [r4, #4]
 8006a96:	bf04      	itt	eq
 8006a98:	1809      	addeq	r1, r1, r0
 8006a9a:	6021      	streq	r1, [r4, #0]
 8006a9c:	605c      	str	r4, [r3, #4]
 8006a9e:	e7c7      	b.n	8006a30 <_free_r+0x24>
 8006aa0:	bd38      	pop	{r3, r4, r5, pc}
 8006aa2:	bf00      	nop
 8006aa4:	2000037c 	.word	0x2000037c

08006aa8 <_malloc_r>:
 8006aa8:	b570      	push	{r4, r5, r6, lr}
 8006aaa:	1ccd      	adds	r5, r1, #3
 8006aac:	f025 0503 	bic.w	r5, r5, #3
 8006ab0:	3508      	adds	r5, #8
 8006ab2:	2d0c      	cmp	r5, #12
 8006ab4:	bf38      	it	cc
 8006ab6:	250c      	movcc	r5, #12
 8006ab8:	2d00      	cmp	r5, #0
 8006aba:	4606      	mov	r6, r0
 8006abc:	db01      	blt.n	8006ac2 <_malloc_r+0x1a>
 8006abe:	42a9      	cmp	r1, r5
 8006ac0:	d903      	bls.n	8006aca <_malloc_r+0x22>
 8006ac2:	230c      	movs	r3, #12
 8006ac4:	6033      	str	r3, [r6, #0]
 8006ac6:	2000      	movs	r0, #0
 8006ac8:	bd70      	pop	{r4, r5, r6, pc}
 8006aca:	f000 f85b 	bl	8006b84 <__malloc_lock>
 8006ace:	4a23      	ldr	r2, [pc, #140]	; (8006b5c <_malloc_r+0xb4>)
 8006ad0:	6814      	ldr	r4, [r2, #0]
 8006ad2:	4621      	mov	r1, r4
 8006ad4:	b991      	cbnz	r1, 8006afc <_malloc_r+0x54>
 8006ad6:	4c22      	ldr	r4, [pc, #136]	; (8006b60 <_malloc_r+0xb8>)
 8006ad8:	6823      	ldr	r3, [r4, #0]
 8006ada:	b91b      	cbnz	r3, 8006ae4 <_malloc_r+0x3c>
 8006adc:	4630      	mov	r0, r6
 8006ade:	f000 f841 	bl	8006b64 <_sbrk_r>
 8006ae2:	6020      	str	r0, [r4, #0]
 8006ae4:	4629      	mov	r1, r5
 8006ae6:	4630      	mov	r0, r6
 8006ae8:	f000 f83c 	bl	8006b64 <_sbrk_r>
 8006aec:	1c43      	adds	r3, r0, #1
 8006aee:	d126      	bne.n	8006b3e <_malloc_r+0x96>
 8006af0:	230c      	movs	r3, #12
 8006af2:	6033      	str	r3, [r6, #0]
 8006af4:	4630      	mov	r0, r6
 8006af6:	f000 f846 	bl	8006b86 <__malloc_unlock>
 8006afa:	e7e4      	b.n	8006ac6 <_malloc_r+0x1e>
 8006afc:	680b      	ldr	r3, [r1, #0]
 8006afe:	1b5b      	subs	r3, r3, r5
 8006b00:	d41a      	bmi.n	8006b38 <_malloc_r+0x90>
 8006b02:	2b0b      	cmp	r3, #11
 8006b04:	d90f      	bls.n	8006b26 <_malloc_r+0x7e>
 8006b06:	600b      	str	r3, [r1, #0]
 8006b08:	50cd      	str	r5, [r1, r3]
 8006b0a:	18cc      	adds	r4, r1, r3
 8006b0c:	4630      	mov	r0, r6
 8006b0e:	f000 f83a 	bl	8006b86 <__malloc_unlock>
 8006b12:	f104 000b 	add.w	r0, r4, #11
 8006b16:	1d23      	adds	r3, r4, #4
 8006b18:	f020 0007 	bic.w	r0, r0, #7
 8006b1c:	1ac3      	subs	r3, r0, r3
 8006b1e:	d01b      	beq.n	8006b58 <_malloc_r+0xb0>
 8006b20:	425a      	negs	r2, r3
 8006b22:	50e2      	str	r2, [r4, r3]
 8006b24:	bd70      	pop	{r4, r5, r6, pc}
 8006b26:	428c      	cmp	r4, r1
 8006b28:	bf0d      	iteet	eq
 8006b2a:	6863      	ldreq	r3, [r4, #4]
 8006b2c:	684b      	ldrne	r3, [r1, #4]
 8006b2e:	6063      	strne	r3, [r4, #4]
 8006b30:	6013      	streq	r3, [r2, #0]
 8006b32:	bf18      	it	ne
 8006b34:	460c      	movne	r4, r1
 8006b36:	e7e9      	b.n	8006b0c <_malloc_r+0x64>
 8006b38:	460c      	mov	r4, r1
 8006b3a:	6849      	ldr	r1, [r1, #4]
 8006b3c:	e7ca      	b.n	8006ad4 <_malloc_r+0x2c>
 8006b3e:	1cc4      	adds	r4, r0, #3
 8006b40:	f024 0403 	bic.w	r4, r4, #3
 8006b44:	42a0      	cmp	r0, r4
 8006b46:	d005      	beq.n	8006b54 <_malloc_r+0xac>
 8006b48:	1a21      	subs	r1, r4, r0
 8006b4a:	4630      	mov	r0, r6
 8006b4c:	f000 f80a 	bl	8006b64 <_sbrk_r>
 8006b50:	3001      	adds	r0, #1
 8006b52:	d0cd      	beq.n	8006af0 <_malloc_r+0x48>
 8006b54:	6025      	str	r5, [r4, #0]
 8006b56:	e7d9      	b.n	8006b0c <_malloc_r+0x64>
 8006b58:	bd70      	pop	{r4, r5, r6, pc}
 8006b5a:	bf00      	nop
 8006b5c:	2000037c 	.word	0x2000037c
 8006b60:	20000380 	.word	0x20000380

08006b64 <_sbrk_r>:
 8006b64:	b538      	push	{r3, r4, r5, lr}
 8006b66:	4c06      	ldr	r4, [pc, #24]	; (8006b80 <_sbrk_r+0x1c>)
 8006b68:	2300      	movs	r3, #0
 8006b6a:	4605      	mov	r5, r0
 8006b6c:	4608      	mov	r0, r1
 8006b6e:	6023      	str	r3, [r4, #0]
 8006b70:	f000 f80a 	bl	8006b88 <_sbrk>
 8006b74:	1c43      	adds	r3, r0, #1
 8006b76:	d102      	bne.n	8006b7e <_sbrk_r+0x1a>
 8006b78:	6823      	ldr	r3, [r4, #0]
 8006b7a:	b103      	cbz	r3, 8006b7e <_sbrk_r+0x1a>
 8006b7c:	602b      	str	r3, [r5, #0]
 8006b7e:	bd38      	pop	{r3, r4, r5, pc}
 8006b80:	200003b0 	.word	0x200003b0

08006b84 <__malloc_lock>:
 8006b84:	4770      	bx	lr

08006b86 <__malloc_unlock>:
 8006b86:	4770      	bx	lr

08006b88 <_sbrk>:
 8006b88:	4b04      	ldr	r3, [pc, #16]	; (8006b9c <_sbrk+0x14>)
 8006b8a:	6819      	ldr	r1, [r3, #0]
 8006b8c:	4602      	mov	r2, r0
 8006b8e:	b909      	cbnz	r1, 8006b94 <_sbrk+0xc>
 8006b90:	4903      	ldr	r1, [pc, #12]	; (8006ba0 <_sbrk+0x18>)
 8006b92:	6019      	str	r1, [r3, #0]
 8006b94:	6818      	ldr	r0, [r3, #0]
 8006b96:	4402      	add	r2, r0
 8006b98:	601a      	str	r2, [r3, #0]
 8006b9a:	4770      	bx	lr
 8006b9c:	20000384 	.word	0x20000384
 8006ba0:	200003b4 	.word	0x200003b4

08006ba4 <_init>:
 8006ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ba6:	bf00      	nop
 8006ba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006baa:	bc08      	pop	{r3}
 8006bac:	469e      	mov	lr, r3
 8006bae:	4770      	bx	lr

08006bb0 <_fini>:
 8006bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bb2:	bf00      	nop
 8006bb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bb6:	bc08      	pop	{r3}
 8006bb8:	469e      	mov	lr, r3
 8006bba:	4770      	bx	lr
